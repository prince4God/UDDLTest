/**
 * generated by Xtext 2.32.0
 */
package com.epistimis.uddl.tests;

import com.epistimis.uddl.scoping.IndexUtilities;
import com.epistimis.uddl.uddl.ConceptualDataModel;
import com.epistimis.uddl.uddl.DataModel;
import com.epistimis.uddl.uddl.UddlPackage;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(UddlInjectorProvider.class)
@SuppressWarnings("all")
public class UddlParsingTest {
  @Inject
  @Extension
  private ParseHelper<DataModel> parseHelper;

  @Inject
  @Extension
  private IndexUtilities _indexUtilities;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("dm Conceptual_Model  {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("cdm FACE_Shared_Data_Model_Conceptual  {");
      _builder.newLine();
      _builder.append("\t  ");
      _builder.append("cdm Observables {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("observable NonPhysicalAddress \"A scheme applied over a non-physical location/space used to delineate different elements or parts (e.g. IPv4, IPv4, telephone number).\" ;");
      _builder.newLine();
      _builder.append("\t  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DataModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testExportedEObjectDescriptions() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("dm d  {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("cdm c1  {");
      _builder.newLine();
      _builder.append("\t  ");
      _builder.append("cdm c2 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("observable o \"A scheme applied over a non-physical location/space used to delineate different elements or parts (e.g. IPv4, IPv4, telephone number).\" ;");
      _builder.newLine();
      _builder.append("\t  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DataModel result = this.parseHelper.parse(_builder);
      this.assertExportedEObjectDescriptions(result, "d, d.c1, d.c1.c2, d.c1.c2.o");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testClassesInIndex() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("dm d  {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("cdm c1  {");
      _builder.newLine();
      _builder.append("\t  ");
      _builder.append("cdm c2 {");
      _builder.newLine();
      _builder.append("\t  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      final DataModel first = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("dm d2  {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("cdm c1  {");
      _builder_1.newLine();
      _builder_1.append("\t  ");
      _builder_1.append("cdm c2 {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("observable o \"A scheme applied over a non-physical location/space used to delineate different elements or parts (e.g. IPv4, IPv4, telephone number).\" ;");
      _builder_1.newLine();
      _builder_1.append("\t  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this.assertTypesInIndex(IterableExtensions.<ConceptualDataModel>head(this.parseHelper.parse(_builder_1, first.eResource().getResourceSet()).getCdm()), UddlPackage.eINSTANCE.getConceptualDataModel(), "d.c1, d.c1.c2, d2.c1, d2.c1.c2");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  private void assertExportedEObjectDescriptions(final EObject o, final CharSequence expected) {
    final Function1<IEObjectDescription, QualifiedName> _function = (IEObjectDescription it) -> {
      return it.getQualifiedName();
    };
    final String actual = IterableExtensions.join(IterableExtensions.<IEObjectDescription, QualifiedName>map(this._indexUtilities.getExportedEObjectDescriptions(o), _function), ", ");
    Assertions.assertEquals(expected.toString().compareTo(actual), 0);
  }

  private void assertTypesInIndex(final EObject o, final EClass type, final String expected) {
    final Iterable<IEObjectDescription> visibleClassesDescriptions = this._indexUtilities.getVisibleEObjectDescriptions(o, type);
    final Function1<IEObjectDescription, QualifiedName> _function = (IEObjectDescription it) -> {
      return it.getQualifiedName();
    };
    Assertions.assertEquals(expected, 
      IterableExtensions.join(IterableExtensions.<IEObjectDescription, QualifiedName>map(visibleClassesDescriptions, _function), ", "));
  }
}
