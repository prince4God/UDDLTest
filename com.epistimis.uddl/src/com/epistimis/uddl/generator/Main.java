/*
 * generated by Xtext 2.32.0
 */
/*
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.generator;

import java.io.File;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xmi.XMIResource;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.epistimis.uddl.UddlStandaloneSetup;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
//import org.eclipse.xtext.diagnostics.Severity;

public class Main {

	static Logger logger = Logger.getLogger(Main.class);

	public static void main(String[] args) {
		if (args.length == 0) {
			logger.error("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new UddlStandaloneSetup().createInjectorAndDoEMFRegistration();

		// Injector queryInjector = new
		// UddlStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String[] args) {
		// For all specified files, load them
		ResourceSet set = resourceSetProvider.get();

		// Replace all '.xmi' extensions with '.ecore'
		URI originalURI = URI.createFileURI(args[0]);
		String ext = originalURI.fileExtension().toLowerCase();
		if (ext.equals("xmi")) {
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put( 
					"ecore", new EcoreResourceFactoryImpl()); 
			// This is a metamodel - convert it to ecore
			String destPath = args[0].substring(0,args[0].lastIndexOf('.'))+ ".ecore";
			URI destinationURI = URI.createURI(destPath);
			XMIResource sourceRes = new XMIResourceImpl(originalURI);
			try {
				sourceRes.load(null);
				Resource destRes = set.createResource(destinationURI);
				destRes.getContents().add(sourceRes.getContents().get(0));
				var options = new HashMap<String, Boolean>();
				options.put(XMIResource.OPTION_SCHEMA_LOCATION, true);	

//				fileAccess.setOutputPath("src-gen/");					
//				fsa.generateFile(ROOT_DIR + generateHeaderName(pdtContainer),pdtContainer.compile)
				var ostream = new FileOutputStream(new File(destPath));
				destRes.save(ostream, options);
					

			} catch (Exception excp) {
				logger.error("Exception: " + excp.getLocalizedMessage(),excp);
				//excp.printStackTrace();
				return;
			}
			logger.info("Finished processing " + args[0]);
		}
		
		for (String arg: args) {
			// Load the resource
			//Resource resource = 
					set.getResource(URI.createFileURI(arg), true);
		}

		/**
		 * Validate the resources - since validation depends on resolving cross references, do that first
		 * This should? do most of the work when resolving the first resource - it shouldn't repeat work?
		 */
		for (Resource resource: set.getResources()) {
			EcoreUtil.resolveAll(resource);
			List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
			if (!list.isEmpty()) {
				for (Issue issue : list) {
					switch(issue.getSeverity()) {
					case ERROR:
						logger.error(issue);
						break;
					case WARNING:
						logger.warn(issue);
						break;
					case INFO:
						logger.info(issue);
						break;
					case IGNORE:
						logger.trace(issue);
						break;
					}
				}
				return;
			}
		}
		/**
		 * Generate for the first resource only - the others were just there to resolve references
		 */
		URI uri = URI.createURI(args[0]);
		Resource res2Gen = set.getResource(uri, false);
		// Configure and start the generator
		fileAccess.setOutputPath("src-gen/");
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(res2Gen, fileAccess, context);

		logger.info("Code generation finished.");
	}
}
