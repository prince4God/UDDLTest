import  'platform:/plugin/com.epistimis.uddl/model/generated/Uddl.ecore'
--import 'http://www.epistimis.com/uddl/Uddl'
    /*
     * The entire process of applying OCL for data usage constraints revolves around determining what Observable is being realized by any particular Entity/Composition/Participant.
     * 
     * This provides the generalized mechanism that returns the Conceptual that is being realized by a given Platform level element.  While this might 
     * appear straightforward, keep in mind that Platform realizations do not need to include everything in a Conceptual. So what we really want is the information
     * about what is **actually** realized, not what could have been realized. 
     * 
     * Further note that just getting the raw realization isn't enough. A lot of that will be structures but Observables are the lowest level things. So we need to deconstruct
     * all structures into their constituent Observables. And that may require multiple recursions since structures can be nested to any level.
     * 
     * This file implements that. 
     * 
     * The realizedConceptuals() result will be returned as a Sequence, where 
     * 1) the first element is the Conceptual Entity/Association that is realized by the Platform Entity/Association;
     * 2) the second element is a Sequence of Conceptual Compositions that realize the compositions of that Platform Entity/Association
     * 3) the (optional) third element is a Sequence of Conceptual Participants that realize the participants of the Platform Association (if it is a Platform Association)
     * 4) the forth (optional) element is a Sequence containing all the content of whatever this specializes (if it specializes anything). It could
     * specialize nothing, a PlatformEntity, or a PlatformAssociation. NOTE that this means knowing what a sequence contains simply by looking at its length isn't definitive - one with
     * 3 elements could be a non specializing PlatformAssociation or a specializing PlatformEntity. You have to know the structure of that third element. It it is just a sequence, then you
     * have a PlatformAssociation. If it is a Sequence of Sequences, then it is the specializes portion of a PlatformEntity
     *  
     * 
     * The constituentObservables() are returned as the net Set - there is no point in having duplicates without structure to know their relationships. If you need the structure
     * info, then you need a Conceptual Entity / Association.
     * 
     * these general tools can then be used with any rules about data constraints. 
     */

package uddl
  context UddlElement
  
   /**
	 * Declare a helper operation to map an ok/warning verdict to ok/error.
	 */
	def: asError(verdict : Boolean) : Boolean = if verdict then true else null endif

/**
 * This section defines constituentObservables
 */

    context ConceptualComposableElement
    	/**
    	 * Helper method to unroll an element into all its Observable constituents. Sometimes that will be needed.
    	 * We only need the unique values, so just return a set
    	 * 
    	 * NOTE: The recursion termination condition is here for ConceptualObservable
    	 */
	  def: constituentObservables(): Set(ConceptualObservable) =
	      if self.oclIsTypeOf(ConceptualAssociation) then
	        self.oclAsType(ConceptualAssociation).constituentObservables()
	      else 
	      	if self.oclIsTypeOf(ConceptualObservable) then
	      		Set{self.oclAsType(ConceptualObservable)}
	      	else 
	        	self.oclAsType(ConceptualEntity).constituentObservables()
	      	endif
	      endif

    context ConceptualObservable
	  def: constituentObservables(): Set(ConceptualObservable) =
			Set{self}
   
    context ConceptualEntity
    	/**
    	 * Helper method to unroll an element into all its Observable constituents. Sometimes that will be needed.
    	 * We only need the unique values, so just return a set
    	 * 
    	 * NOTE: This will recurse with the other constituentObservables() methods
    	 */
	  def: constituentObservables(): Set(ConceptualObservable) =
		let constituentSpecializes = self.specializes.constituentObservables() in
			
			self.composition->collect(obj: ConceptualComposition | obj.constituentObservables())
--			->union(constituentSpecializes)
			->flatten()->asSet()
 
    context ConceptualAssociation
    	/**
    	 * Helper method to unroll an element into all its Observable constituents. Sometimes that will be needed.
    	 * We only need the unique values, so just return a set
    	 * 
    	 * NOTE: This will recurse with the other constituentObservables() methods
    	 */
	  def: constituentObservables(): Set(ConceptualObservable) =
		let compObs = self.composition->collect(obj: ConceptualComposition | obj.constituentObservables())->flatten()
			,partObs = self.participant->collect(obj: ConceptualParticipant | obj.constituentObservables())->flatten()
--		    ,constituentSpecializes = self.specializes.constituentObservables() 
		    in
		    	
			compObs->union(partObs)
--			->union(constituentSpecializes)
			->flatten()->asSet()

    context ConceptualCharacteristic
    	/**
    	 * Helper method to unroll an element into all its Observable constituents. Sometimes that will be needed.
    	 * We only need the unique values, so just return a set
    	 * 
    	 * NOTE: This will recurse with the other constituentObservables() methods
    	 */
	  def: constituentObservables(): Set(ConceptualObservable) =
	      if self.oclIsTypeOf(ConceptualComposition) then
	        self.oclAsType(ConceptualComposition).constituentObservables()
	      else 
	        self.oclAsType(ConceptualParticipant).constituentObservables()
	      endif

	context ConceptualComposition
    	/**
    	 * Helper method to unroll an element into all its Observable constituents. Sometimes that will be needed.
    	 * We only need the unique values, so just return a set
    	 * 
    	 * NOTE: This will recurse with the other constituentObservables() methods
    	 */
	  def: constituentObservables(): Set(ConceptualObservable) =
		self.type.constituentObservables()
--		->union(self.specializes.constituentObservables())
		->flatten()->asSet()


  	context ConceptualParticipant
    	/**
    	 * Helper method to unroll an element into all its Observable constituents. Sometimes that will be needed.
    	 * We only need the unique values, so just return a set
    	 * 
    	 * NOTE: This will recurse with the other constituentObservables() methods
    	 */
	  def: constituentObservables(): Set(ConceptualObservable) =
 		self.type.constituentObservables()
-- 		->union(self.specializes.constituentObservables())
 		->flatten()->asSet()
  
  
  /**
   * This section defines realizedConceptuals (and constituentObservables)
   */
  	  	
    context LogicalEntity
	    /*
	     * Helper method that collects what this LogicalEntity realizes. This 
	     * can be used for analysis
	     */
      def: realizedConceptuals() : Sequence(OclAny) =
		let realizedEnt = self.realizes
			,realizedCompositions = self.composition->collect(obj: LogicalComposition| obj.realizes)->flatten()
--			,realizedSpecializes = self.specializes.realizedConceptuals()
		 in
		 Sequence{realizedEnt, realizedCompositions} --,realizedSpecializes}

	  def: constituentObservables(): Set(ConceptualObservable) =
		let realizedCompositions = self.composition->collect(obj: LogicalComposition| obj.realizes)->flatten()
--			,realizedSpecializes = self.specializes.realizedConceptuals() 
			in
			realizedCompositions->collect(obj: ConceptualComposition | obj.constituentObservables())
--			->union(realizedSpecializes->collect(constituentObservables()))
			->flatten()->asSet()



    context LogicalAssociation
 	    /*
	     * Helper method that collects what this LogicalAssociation realizes. This 
	     * can be used for analysis
	     */
      def: realizedConceptuals() : Sequence(OclAny) =
		let realizedEnt = self.realizes
			,realizedCompositions = self.composition->collect(realizes)
			,realizedParticipants = self.participant->collect(realizes)
--			,realizedSpecializes = self.specializes.realizedConceptuals()
		 in
		 Sequence{realizedEnt, realizedCompositions, realizedParticipants} --,realizedSpecializes}

 	  def: constituentObservables(): Set(ConceptualObservable) =
		let realizedCompositions = self.composition->collect(realizes)->flatten()
			,realizedParticipants = self.participant->collect(realizes)->flatten()
--			,realizedSpecializes = self.specializes.realizedConceptuals() 
			in
			
			realizedCompositions->collect(obj: ConceptualComposition | obj.constituentObservables())
			->union(realizedParticipants->collect(obj: ConceptualParticipant | obj.constituentObservables()))
--			->union(realizedSpecializes->collect(constituentObservables()))
			->flatten()->asSet()
   
    context PlatformEntity
	    /*
	     * Helper method that collects what this PlatformEntity realizes. This 
	     * can be used for analysis
	     * 
	     * NOTE: User must be aware of the structure of this sequence and cast each
	     * of its elements appropriately. 
	     * 
     	 * 1) the first element is the Conceptual Entity/Association that is realized by the Platform Entity/Association;
     	 * 2) the second element is a Sequence of Conceptual Compositions that realize the compositions of that Platform Entity/Association
         * 4) the third (optional) element is a Sequence containing all the content of whatever this specializes (if it specializes anything). It could
         * specialize nothing, a PlatformEntity, or a PlatformAssociation. 
	     * 
	     */
      def: realizedConceptuals() : Sequence(OclAny) =
		let realizedEnt = self.realizes.realizes
			,realizedCompositions = self.composition->collect(obj: PlatformComposition| obj.realizes.realizes)->flatten()
--			,realizedSpecializes = self.specializes.realizedConceptuals()
		 in
		 Sequence{realizedEnt, realizedCompositions } -- , realizedSpecializes}

	  def: constituentObservables(): Set(ConceptualObservable) =
		let realizedCompositions = self.composition->collect(obj: PlatformComposition| obj.realizes.realizes)->flatten()
--			,realizedSpecializes = self.specializes.realizedConceptuals() 
			in
			realizedCompositions->collect(obj: ConceptualComposition | obj.constituentObservables())
--			->union(realizedSpecializes->collect(constituentObservables()))
			->flatten()->asSet()
		
--	  inv noSpecialCategoryDataUsed: not self.constituentObservables()->collect(name.toLowerCase())->includes('health')

    context PlatformAssociation
 	    /*
	     * Helper method that collects what this PlatformAssociation realizes. This 
	     * can be used for analysis
		 *
	     * NOTE: User must be aware of the structure of this sequence and cast each
	     * of its elements appropriately. 
	     * 
         * 1) the first element is the Conceptual Entity/Association that is realized by the Platform Entity/Association;
         * 2) the second element is a Sequence of Conceptual Compositions that realize the compositions of that Platform Entity/Association
         * 3) the third element is a Sequence of Conceptual Participants that realize the participants of the Platform Association 
         * 4) the forth (optional) element is a Sequence containing all the content of whatever this specializes (if it specializes anything). It could
         * specialize nothing, a PlatformEntity, or a PlatformAssociation. NOTE that this means knowing what a sequence con
	     */
      def: realizedConceptuals() : Sequence(OclAny) =
		let realizedEnt = self.realizes.realizes
			,realizedCompositions = self.composition->collect(realizes.realizes)
			,realizedParticipants = self.participant->collect(realizes.realizes)
--			,realizedSpecializes = self.specializes.realizedConceptuals()
		 in
		 Sequence{realizedEnt, realizedCompositions, realizedParticipants} --,realizedSpecializes}

	  def: constituentObservables(): Set(ConceptualObservable) =
		let realizedCompositions = self.composition->collect(realizes.realizes)->flatten()
			,realizedParticipants = self.participant->collect(realizes.realizes)->flatten()
--			,realizedSpecializes = self.specializes.realizedConceptuals() 
			in
			
			realizedCompositions->collect(obj: ConceptualComposition | obj.constituentObservables())
			->union(realizedParticipants->collect(obj: ConceptualParticipant | obj.constituentObservables()))
--			->union(realizedSpecializes->collect(obj: Sequence{PlatformEntity | obj.constituentObservables()))
			->flatten()->asSet()

--		inv noSpecialCategoryDataUsed('PlatformAssociation '+ self.name + ' uses a Special Category of Data. Remove that usage to continue'): 
--			 asError(not self.constituentObservables()->collect(name.toLowerCase())->includes('health')) 
			   
endpackage
