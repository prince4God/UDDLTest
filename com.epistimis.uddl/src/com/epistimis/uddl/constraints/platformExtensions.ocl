/**
 * UDDL Platform level - Epistimis extensions outside of the UDDL spec
 */
import ecore : 'http://www.eclipse.org/emf/2002/Ecore#/'
--import 'http://www.epistimis.com/uddl/Uddl'
--import  '../../../../../model/generated/Uddl.ecore'
import 'platform:/plugin/com.epistimis.uddl/model/generated/Uddl.ecore'

--include 'conceptualExtensions.ocl'
--include 'logicalExtensions.ocl'
include 'platform:/plugin/com.epistimis.uddl/src/com/epistimis/uddl/constraints/conceptualExtensions.ocl'
include 'platform:/plugin/com.epistimis.uddl/src/com/epistimis/uddl/constraints/logicalExtensions.ocl'

package uddl

	context PlatformComposableElement
	
		/**
		 * Return a set of all the model types referenced by this element
		 */
	    def: referencedModelTypes(): Set(ConceptualComposableElement) =
	 		if (self.oclIsKindOf(LogicalMeasurement)) then
				self.oclAsType(PlatformDataType).referencedModelTypes()
			else
				self.oclAsType(PlatformEntity).referencedModelTypes()
			endif
	    	
		/**
		 * Does this element reference the specified type?
		 */
		def: referencesModelType(o:ConceptualObservable): Boolean = 
			self.referencedModelTypes()->includes(o)
	
	
	context PlatformDataType
		/**
		 * Return a set of all the model types referenced by this element
		 */
	    def: referencedModelTypes(): Set(ConceptualComposableElement) =
			self.realizes.oclAsType(LogicalComposableElement).referencedModelTypes()
			
			
	context PlatformEntity
	
		/**
		 * Because we can have duplicate leaf names even when the FQNs are distinct
		 * we return the full set. The caller will need to filter these in more
		 * detail. Note further: We do not have a generic QualifiedNameProvider
		 * defined in OCL because that duplicates what we have in Java. So we don't
		 * parse QNs here.
		 */
		static def: findByName(n: String): Set(PlatformEntity) =
			PlatformEntity.allInstances()->select(o|o.name = n)->asSet()
		/**
		 * Return a set of all the model types referenced by this element
		 */
		def: referencedModelTypes(): Set(ConceptualComposableElement) =
			let myComps = self.composition->collect(type.referencedModelTypes())->flatten()->asSet() in
			let parentTypes = if (self.specializes.oclIsUndefined()) then  Bag {} 
			else if self.specializes.oclIsKindOf(ConceptualAssociation) then
				self.specializes.oclAsType(PlatformAssociation).referencedModelTypes() 
				else self.specializes.referencedModelTypes() 
				endif
			endif in
			myComps->union(parentTypes)->asSet()
				
		/**
		 * oclIsKindOf uses the metamodel. We want to follow the UDDL
		 * specialization hierarchy
		 */		
		def: isTypeOrSpecializationOf(t: PlatformEntity): Boolean =
			self = t or if (self.specializes->notEmpty()) then self.specializes.isTypeOrSpecializationOf(t) else false endif
 
		/**
		 * Get all the Entities that specialize the root
		 */
		static def: specializationHierarchy(root: PlatformEntity): Set(PlatformEntity) =
			PlatformEntity.allInstances()->select(isTypeOrSpecializationOf(root))

	
		/**
		 * PlatformEntities cannot specialize a PlatformAssociation. Any specialization of
		 * a PlatformAssociation must be a PlatformAssociation. Why? Because it's still a
		 * PlatformAssociation even if the specialization does not add participants
		 */
		inv specializesOnlyPlatformEntity:
			self.specializes <> null implies not self.specializes.oclIsKindOf(PlatformAssociation)
	
	context PlatformAssociation
	
		/**
		 * Return a set of all the model types referenced by this element
		 */
		def: referencedModelTypes(): Set(ConceptualComposableElement) =
			let compTypes = self.oclAsType(PlatformEntity).referencedModelTypes() in
			-- This call will also handle the specialization 
			let assocTypes = self.participant->collect(type.referencedModelTypes())->flatten()->asSet() in
			compTypes->union(assocTypes)
	
	context PlatformView
		/**
		 * Return a set of all the model types referenced by this element
		 */
		def: referencedModelTypes(): Set(ConceptualComposableElement) =
			if (self.oclIsTypeOf(PlatformQuery)) then
				self.oclAsType(PlatformQuery).referencedModelTypes()
			else 
				self.oclAsType(PlatformCompositeQuery).referencedModelTypes()
			endif
	
	context PlatformQuery
		/**
		 * Return a set of all the model types referenced by this element
		 * TODO: This requires a Java call - which isn't yet available.
		 * In the mean time, some simple string parsing might work in limited cases
		 * This only works on a single entity name - need to split it to get more
		 * Also does not work with aliases
		 */
	   def: referencedEntities(): Set(PlatformEntity) =
			let lspec = self.specification.toLowerCase() in
			let fromNdx = lspec.indexOf(' from ') in
			let whereNdx = lspec.indexOf(' where ') in
			let joinNdx = lspec.indexOf(' join ') in
			let asNdx = lspec.indexOf(' as ') in
			let endNdx = if (asNdx > fromNdx) then
							asNdx
						 else if ( joinNdx > fromNdx) then 
								joinNdx 
						 	else if (whereNdx > fromNdx) then 
						 			whereNdx 
						 		else -- 
						 			self.specification.size() 
						 		endif
						 	endif
						 endif in
			let name = self.specification.substring(fromNdx+6,endNdx).trim() in
			PlatformEntity::findByName(name)->asSet() 
	
		/**
		 * Return a set of all the model types referenced by this element
		 */
		def: referencedModelTypes(): Set(ConceptualComposableElement) =
			self.referencedEntities()->collect(referencedModelTypes())->flatten()->asSet()
	
	
	context PlatformCompositeQuery
		/**
		 * Return a set of all the model types referenced by this element
		 */
		def: referencedModelTypes(): Set(ConceptualComposableElement) =
			self.composition->collect(type.referencedModelTypes())->flatten()->asSet()

endpackage
