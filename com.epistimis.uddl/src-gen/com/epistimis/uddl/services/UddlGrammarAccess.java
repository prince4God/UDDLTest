/*
 * generated by Xtext 2.32.0
 */
/*
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UddlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cCdmAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cCdmConceptualDataModelParserRuleCall_4_0_0 = (RuleCall)cCdmAssignment_4_0.eContents().get(0);
		private final Assignment cLdmAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cLdmLogicalDataModelParserRuleCall_4_1_0 = (RuleCall)cLdmAssignment_4_1.eContents().get(0);
		private final Assignment cPdmAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cPdmPlatformDataModelParserRuleCall_4_2_0 = (RuleCall)cPdmAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////// Starter rule comes first
		////ModelFile:
		////    includes+=Include*
		////    dataModel=DataModel
		////;
		///** A DataModel is a container for ConceptualDataModels, LogicalDataModels, and PlatformDataModels */
		//DataModel:
		//    'dm' name=ID (description=STRING)? '{'
		//        (cdm+=ConceptualDataModel |
		//        ldm+=LogicalDataModel |
		//        pdm+=PlatformDataModel)*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'dm' name=ID (description=STRING)? '{'
		//    (cdm+=ConceptualDataModel |
		//    ldm+=LogicalDataModel |
		//    pdm+=PlatformDataModel)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'dm'
		public Keyword getDmKeyword_0() { return cDmKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(cdm+=ConceptualDataModel |
		//ldm+=LogicalDataModel |
		//pdm+=PlatformDataModel)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//cdm+=ConceptualDataModel
		public Assignment getCdmAssignment_4_0() { return cCdmAssignment_4_0; }
		
		//ConceptualDataModel
		public RuleCall getCdmConceptualDataModelParserRuleCall_4_0_0() { return cCdmConceptualDataModelParserRuleCall_4_0_0; }
		
		//ldm+=LogicalDataModel
		public Assignment getLdmAssignment_4_1() { return cLdmAssignment_4_1; }
		
		//LogicalDataModel
		public RuleCall getLdmLogicalDataModelParserRuleCall_4_1_0() { return cLdmLogicalDataModelParserRuleCall_4_1_0; }
		
		//pdm+=PlatformDataModel
		public Assignment getPdmAssignment_4_2() { return cPdmAssignment_4_2; }
		
		//PlatformDataModel
		public RuleCall getPdmPlatformDataModelParserRuleCall_4_2_0() { return cPdmPlatformDataModelParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class QNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.QN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////DOUBLE returns ecore::EDouble : INT '.' INT ('D'|'d');
		//QN:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		///**
		// * Use 'include' because 'import' is an XBase keyword
		// */
		//Include:
		//    'include' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///**
		// * Already defined in XBase
		// */
		//QualifiedNameWithWildcard:
		//    QN '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QN '.*'?
		public Group getGroup() { return cGroup; }
		
		//QN
		public RuleCall getQNParserRuleCall_0() { return cQNParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class UddlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.UddlElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptualDataModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalDataModelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlatformDataModelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConceptualElementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLogicalElementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPlatformElementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLogicalReferencePointParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLogicalEnumerationLabelParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLogicalConstraintParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		// // Metamodel concepts starts here
		///** An Element is the root type for defining all named elements in the DataModel. The “name” attribute captures the name of the Element in the model. The “description” attribute captures a description for the Element. */
		//UddlElement:  // This is datamodel.Element but it's too much hassle to fix after the fact.
		//    DataModel |
		//    ConceptualDataModel | LogicalDataModel | PlatformDataModel|
		//    ConceptualElement|
		//    LogicalElement |
		//    PlatformElement |
		//    LogicalReferencePoint |
		//    LogicalEnumerationLabel |
		//    LogicalConstraint
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// This is datamodel.Element but it's too much hassle to fix after the fact.
		//  DataModel |
		//  ConceptualDataModel | LogicalDataModel | PlatformDataModel|
		//  ConceptualElement|
		//  LogicalElement |
		//  PlatformElement |
		//  LogicalReferencePoint |
		//  LogicalEnumerationLabel |
		//  LogicalConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// This is datamodel.Element but it's too much hassle to fix after the fact.
		//  DataModel
		public RuleCall getDataModelParserRuleCall_0() { return cDataModelParserRuleCall_0; }
		
		//ConceptualDataModel
		public RuleCall getConceptualDataModelParserRuleCall_1() { return cConceptualDataModelParserRuleCall_1; }
		
		//LogicalDataModel
		public RuleCall getLogicalDataModelParserRuleCall_2() { return cLogicalDataModelParserRuleCall_2; }
		
		//PlatformDataModel
		public RuleCall getPlatformDataModelParserRuleCall_3() { return cPlatformDataModelParserRuleCall_3; }
		
		//ConceptualElement
		public RuleCall getConceptualElementParserRuleCall_4() { return cConceptualElementParserRuleCall_4; }
		
		//LogicalElement
		public RuleCall getLogicalElementParserRuleCall_5() { return cLogicalElementParserRuleCall_5; }
		
		//PlatformElement
		public RuleCall getPlatformElementParserRuleCall_6() { return cPlatformElementParserRuleCall_6; }
		
		//LogicalReferencePoint
		public RuleCall getLogicalReferencePointParserRuleCall_7() { return cLogicalReferencePointParserRuleCall_7; }
		
		//LogicalEnumerationLabel
		public RuleCall getLogicalEnumerationLabelParserRuleCall_8() { return cLogicalEnumerationLabelParserRuleCall_8; }
		
		//LogicalConstraint
		public RuleCall getLogicalConstraintParserRuleCall_9() { return cLogicalConstraintParserRuleCall_9; }
	}
	public class ConceptualDataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualDataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCdmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cElementAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cElementConceptualElementParserRuleCall_4_0_0 = (RuleCall)cElementAssignment_4_0.eContents().get(0);
		private final Assignment cCdmAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cCdmConceptualDataModelParserRuleCall_4_1_0 = (RuleCall)cCdmAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A ConceptualDataModel is a container for CDM Elements. */
		//ConceptualDataModel:
		//    'cdm'    name=ID (description=STRING)? '{'
		//        (element+=ConceptualElement | cdm+=ConceptualDataModel)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'cdm'    name=ID (description=STRING)? '{'
		//    (element+=ConceptualElement | cdm+=ConceptualDataModel)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'cdm'
		public Keyword getCdmKeyword_0() { return cCdmKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(element+=ConceptualElement | cdm+=ConceptualDataModel)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//element+=ConceptualElement
		public Assignment getElementAssignment_4_0() { return cElementAssignment_4_0; }
		
		//ConceptualElement
		public RuleCall getElementConceptualElementParserRuleCall_4_0_0() { return cElementConceptualElementParserRuleCall_4_0_0; }
		
		//cdm+=ConceptualDataModel
		public Assignment getCdmAssignment_4_1() { return cCdmAssignment_4_1; }
		
		//ConceptualDataModel
		public RuleCall getCdmConceptualDataModelParserRuleCall_4_1_0() { return cCdmConceptualDataModelParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LogicalDataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalDataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cElementAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cElementLogicalElementParserRuleCall_4_0_0 = (RuleCall)cElementAssignment_4_0.eContents().get(0);
		private final Assignment cLdmAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cLdmLogicalDataModelParserRuleCall_4_1_0 = (RuleCall)cLdmAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A LogicalDataModel is a container for LDM Elements. */
		//LogicalDataModel:
		//    'ldm'    name=ID (description=STRING)? '{'
		//        (element+=LogicalElement | ldm+=LogicalDataModel)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ldm'    name=ID (description=STRING)? '{'
		//    (element+=LogicalElement | ldm+=LogicalDataModel)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ldm'
		public Keyword getLdmKeyword_0() { return cLdmKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(element+=LogicalElement | ldm+=LogicalDataModel)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//element+=LogicalElement
		public Assignment getElementAssignment_4_0() { return cElementAssignment_4_0; }
		
		//LogicalElement
		public RuleCall getElementLogicalElementParserRuleCall_4_0_0() { return cElementLogicalElementParserRuleCall_4_0_0; }
		
		//ldm+=LogicalDataModel
		public Assignment getLdmAssignment_4_1() { return cLdmAssignment_4_1; }
		
		//LogicalDataModel
		public RuleCall getLdmLogicalDataModelParserRuleCall_4_1_0() { return cLdmLogicalDataModelParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PlatformDataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformDataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPdmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cElementAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cElementPlatformElementParserRuleCall_4_0_0 = (RuleCall)cElementAssignment_4_0.eContents().get(0);
		private final Assignment cPdmAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPdmPlatformDataModelParserRuleCall_4_1_0 = (RuleCall)cPdmAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A PlatformDataModel is a container for platform Data Model elements. */
		//PlatformDataModel:
		//    'pdm'    name=ID (description=STRING)? '{'
		//        (element+=PlatformElement | pdm+=PlatformDataModel)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pdm'    name=ID (description=STRING)? '{'
		//    (element+=PlatformElement | pdm+=PlatformDataModel)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'pdm'
		public Keyword getPdmKeyword_0() { return cPdmKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(element+=PlatformElement | pdm+=PlatformDataModel)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//element+=PlatformElement
		public Assignment getElementAssignment_4_0() { return cElementAssignment_4_0; }
		
		//PlatformElement
		public RuleCall getElementPlatformElementParserRuleCall_4_0_0() { return cElementPlatformElementParserRuleCall_4_0_0; }
		
		//pdm+=PlatformDataModel
		public Assignment getPdmAssignment_4_1() { return cPdmAssignment_4_1; }
		
		//PlatformDataModel
		public RuleCall getPdmPlatformDataModelParserRuleCall_4_1_0() { return cPdmPlatformDataModelParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConceptualElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptualDomainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptualBasisEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConceptualComposableElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConceptualViewParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** A conceptual Element is the root type for defining the conceptual elements of a Data Model. */
		//ConceptualElement:
		//    ConceptualDomain |
		//    ConceptualBasisEntity |
		//    ConceptualComposableElement |
		//    ConceptualView
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptualDomain |
		//ConceptualBasisEntity |
		//ConceptualComposableElement |
		//ConceptualView
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptualDomain
		public RuleCall getConceptualDomainParserRuleCall_0() { return cConceptualDomainParserRuleCall_0; }
		
		//ConceptualBasisEntity
		public RuleCall getConceptualBasisEntityParserRuleCall_1() { return cConceptualBasisEntityParserRuleCall_1; }
		
		//ConceptualComposableElement
		public RuleCall getConceptualComposableElementParserRuleCall_2() { return cConceptualComposableElementParserRuleCall_2; }
		
		//ConceptualView
		public RuleCall getConceptualViewParserRuleCall_3() { return cConceptualViewParserRuleCall_3; }
	}
	public class ConceptualComposableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualComposableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptualEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptualObservableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A conceptual ComposableElement is a conceptual Element that is allowed to participate in a Composition relationship. In other words, these are the conceptual Elements that may be a characteristic of a conceptual Entity. */
		//ConceptualComposableElement:
		//    ConceptualEntity |
		//    ConceptualObservable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptualEntity |
		//ConceptualObservable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptualEntity
		public RuleCall getConceptualEntityParserRuleCall_0() { return cConceptualEntityParserRuleCall_0; }
		
		//ConceptualObservable
		public RuleCall getConceptualObservableParserRuleCall_1() { return cConceptualObservableParserRuleCall_1; }
	}
	public class ConceptualBasisEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualBasisEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////NOTE: BasisElement has single inheritance - it has no independent functionality so it gets dropped
		//// A conceptual BasisElement is a conceptual data type that is independent of any specific data representation.
		///** A BasisEntity represents a unique domain concept and establishes a basis which can be used by conceptual Entities.  */
		//ConceptualBasisEntity:
		//    'basis' name=ID (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'basis' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'basis'
		public Keyword getBasisKeyword_0() { return cBasisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConceptualDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A Domain represents a space defined by a set of BasisEntities relating to well understood concepts by practitioners within a particular domain.  */
		//ConceptualDomain:
		//    'domain' name=ID (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConceptualObservableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualObservable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObservableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** An Observable is something that can be observed but not further characterized, and is typically quantified through measurements of the physical world. An observable is independent of any specific data representation, units, or reference frame. For example, “length” may be thought of as an observable in that it can be measured, but at the conceptual level the nature of the measurement is not specified. */
		//ConceptualObservable:
		//    'observable' name=ID (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'observable' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'observable'
		public Keyword getObservableKeyword_0() { return cObservableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConceptualCharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualCharacteristic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptualCompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptualParticipantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** Either a ConceptualComposition or a ConceptualParticipant.
		// * A conceptual Characteristic contributes to the uniqueness of a conceptual Entity. The “rolename” attribute defines the name of the conceptual Characteristic within the scope of the conceptual Entity. The “lowerBound” and “upperBound” attributes define the multiplicity of the composed Characteristic. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
		//ConceptualCharacteristic:
		//    ConceptualComposition |
		//    ConceptualParticipant
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptualComposition |
		//ConceptualParticipant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptualComposition
		public RuleCall getConceptualCompositionParserRuleCall_0() { return cConceptualCompositionParserRuleCall_0; }
		
		//ConceptualParticipant
		public RuleCall getConceptualParticipantParserRuleCall_1() { return cConceptualParticipantParserRuleCall_1; }
	}
	public class ConceptualEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptualAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCentityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cDescriptionAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final CrossReference cSpecializesConceptualEntityCrossReference_1_3_1_0 = (CrossReference)cSpecializesAssignment_1_3_1.eContents().get(0);
		private final RuleCall cSpecializesConceptualEntityQNParserRuleCall_1_3_1_0_1 = (RuleCall)cSpecializesConceptualEntityCrossReference_1_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cCompositionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cCompositionConceptualCompositionParserRuleCall_1_5_0 = (RuleCall)cCompositionAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cBasisKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cBasisEntityAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final CrossReference cBasisEntityConceptualBasisEntityCrossReference_1_6_2_0 = (CrossReference)cBasisEntityAssignment_1_6_2.eContents().get(0);
		private final RuleCall cBasisEntityConceptualBasisEntityQNParserRuleCall_1_6_2_0_1 = (RuleCall)cBasisEntityConceptualBasisEntityCrossReference_1_6_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Keyword cRightCurlyBracketSemicolonKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		///** A conceptual Entity represents a domain concept in terms of its Observables and other composed conceptual Entities. Since a conceptual Entity is built only from conceptual ComposableElements, it is independent of any specific data representation, units, or reference frame. */
		//ConceptualEntity:
		//    ConceptualAssociation |
		//    'centity' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
		//        composition+=ConceptualComposition*
		//        ('basis:' '[' basisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptualAssociation |
		//'centity' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
		//    composition+=ConceptualComposition*
		//    ('basis:' '[' basisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		//'};'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptualAssociation
		public RuleCall getConceptualAssociationParserRuleCall_0() { return cConceptualAssociationParserRuleCall_0; }
		
		//'centity' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
		//    composition+=ConceptualComposition*
		//    ('basis:' '[' basisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		//'};'
		public Group getGroup_1() { return cGroup_1; }
		
		//'centity'
		public Keyword getCentityKeyword_1_0() { return cCentityKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_1_2() { return cDescriptionAssignment_1_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_1_2_0; }
		
		//(':' specializes=[ConceptualEntity|QN])?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//':'
		public Keyword getColonKeyword_1_3_0() { return cColonKeyword_1_3_0; }
		
		//specializes=[ConceptualEntity|QN]
		public Assignment getSpecializesAssignment_1_3_1() { return cSpecializesAssignment_1_3_1; }
		
		//[ConceptualEntity|QN]
		public CrossReference getSpecializesConceptualEntityCrossReference_1_3_1_0() { return cSpecializesConceptualEntityCrossReference_1_3_1_0; }
		
		//QN
		public RuleCall getSpecializesConceptualEntityQNParserRuleCall_1_3_1_0_1() { return cSpecializesConceptualEntityQNParserRuleCall_1_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//composition+=ConceptualComposition*
		public Assignment getCompositionAssignment_1_5() { return cCompositionAssignment_1_5; }
		
		//ConceptualComposition
		public RuleCall getCompositionConceptualCompositionParserRuleCall_1_5_0() { return cCompositionConceptualCompositionParserRuleCall_1_5_0; }
		
		//('basis:' '[' basisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'basis:'
		public Keyword getBasisKeyword_1_6_0() { return cBasisKeyword_1_6_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_6_1() { return cLeftSquareBracketKeyword_1_6_1; }
		
		//basisEntity+=[ConceptualBasisEntity|QN]+
		public Assignment getBasisEntityAssignment_1_6_2() { return cBasisEntityAssignment_1_6_2; }
		
		//[ConceptualBasisEntity|QN]
		public CrossReference getBasisEntityConceptualBasisEntityCrossReference_1_6_2_0() { return cBasisEntityConceptualBasisEntityCrossReference_1_6_2_0; }
		
		//QN
		public RuleCall getBasisEntityConceptualBasisEntityQNParserRuleCall_1_6_2_0_1() { return cBasisEntityConceptualBasisEntityQNParserRuleCall_1_6_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_6_3() { return cRightSquareBracketKeyword_1_6_3; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_1_7() { return cRightCurlyBracketSemicolonKeyword_1_7; }
	}
	public class ConceptualCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConceptualComposableElementCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeConceptualComposableElementQNParserRuleCall_0_0_1 = (RuleCall)cTypeConceptualComposableElementCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecializesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecializesConceptualCharacteristicCrossReference_4_1_0 = (CrossReference)cSpecializesAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecializesConceptualCharacteristicQNParserRuleCall_4_1_0_1 = (RuleCall)cSpecializesConceptualCharacteristicCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A conceptual Composition is the mechanism that allows conceptual Entities to be constructed from other conceptual ComposableElements. The “type” of a Composition is the ComposableElement being used to construct the conceptual Entity. */
		//ConceptualComposition:
		//    type=[ConceptualComposableElement|QN]  rolename=ID ('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')? (description=STRING)? (':' specializes=[ConceptualCharacteristic|QN])? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[ConceptualComposableElement|QN]  rolename=ID ('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')? (description=STRING)? (':' specializes=[ConceptualCharacteristic|QN])? ';'
		public Group getGroup() { return cGroup; }
		
		//type=[ConceptualComposableElement|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[ConceptualComposableElement|QN]
		public CrossReference getTypeConceptualComposableElementCrossReference_0_0() { return cTypeConceptualComposableElementCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeConceptualComposableElementQNParserRuleCall_0_0_1() { return cTypeConceptualComposableElementQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(lowerBound=INT)?
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_2_1_0() { return cLowerBoundINTTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//(upperBound=INT)?
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_3_0() { return cUpperBoundINTTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//(':' specializes=[ConceptualCharacteristic|QN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//specializes=[ConceptualCharacteristic|QN]
		public Assignment getSpecializesAssignment_4_1() { return cSpecializesAssignment_4_1; }
		
		//[ConceptualCharacteristic|QN]
		public CrossReference getSpecializesConceptualCharacteristicCrossReference_4_1_0() { return cSpecializesConceptualCharacteristicCrossReference_4_1_0; }
		
		//QN
		public RuleCall getSpecializesConceptualCharacteristicQNParserRuleCall_4_1_0_1() { return cSpecializesConceptualCharacteristicQNParserRuleCall_4_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConceptualAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCassocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSpecializesConceptualEntityCrossReference_3_1_0 = (CrossReference)cSpecializesAssignment_3_1.eContents().get(0);
		private final RuleCall cSpecializesConceptualEntityQNParserRuleCall_3_1_0_1 = (RuleCall)cSpecializesConceptualEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompositionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompositionConceptualCompositionParserRuleCall_5_0 = (RuleCall)cCompositionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cBasisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cConceptualBasisEntityAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cConceptualBasisEntityConceptualBasisEntityCrossReference_6_2_0 = (CrossReference)cConceptualBasisEntityAssignment_6_2.eContents().get(0);
		private final RuleCall cConceptualBasisEntityConceptualBasisEntityQNParserRuleCall_6_2_0_1 = (RuleCall)cConceptualBasisEntityConceptualBasisEntityCrossReference_6_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cParticipantsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cParticipantAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cParticipantConceptualParticipantParserRuleCall_7_2_0 = (RuleCall)cParticipantAssignment_7_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///** A conceptual Association represents a relationship between two or more conceptual Entities. The conceptual Entities participating in the conceptual Association may be specified locally or in its generalized types. In addition, there may be one or more conceptual ComposableElements that characterize the relationship. Conceptual Associations are conceptual Entities that may also participate in other conceptual Associations. */
		//ConceptualAssociation:
		//        'cassoc' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
		//        composition+=ConceptualComposition*
		//        ('basis:' '[' ConceptualBasisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		//        ('participants:' '[' participant+=ConceptualParticipant+ ']')?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    'cassoc' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
		//    composition+=ConceptualComposition*
		//    ('basis:' '[' ConceptualBasisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		//    ('participants:' '[' participant+=ConceptualParticipant+ ']')?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'cassoc'
		public Keyword getCassocKeyword_0() { return cCassocKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(':' specializes=[ConceptualEntity|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//specializes=[ConceptualEntity|QN]
		public Assignment getSpecializesAssignment_3_1() { return cSpecializesAssignment_3_1; }
		
		//[ConceptualEntity|QN]
		public CrossReference getSpecializesConceptualEntityCrossReference_3_1_0() { return cSpecializesConceptualEntityCrossReference_3_1_0; }
		
		//QN
		public RuleCall getSpecializesConceptualEntityQNParserRuleCall_3_1_0_1() { return cSpecializesConceptualEntityQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//composition+=ConceptualComposition*
		public Assignment getCompositionAssignment_5() { return cCompositionAssignment_5; }
		
		//ConceptualComposition
		public RuleCall getCompositionConceptualCompositionParserRuleCall_5_0() { return cCompositionConceptualCompositionParserRuleCall_5_0; }
		
		//('basis:' '[' ConceptualBasisEntity+=[ConceptualBasisEntity|QN]+ ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'basis:'
		public Keyword getBasisKeyword_6_0() { return cBasisKeyword_6_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_1() { return cLeftSquareBracketKeyword_6_1; }
		
		//ConceptualBasisEntity+=[ConceptualBasisEntity|QN]+
		public Assignment getConceptualBasisEntityAssignment_6_2() { return cConceptualBasisEntityAssignment_6_2; }
		
		//[ConceptualBasisEntity|QN]
		public CrossReference getConceptualBasisEntityConceptualBasisEntityCrossReference_6_2_0() { return cConceptualBasisEntityConceptualBasisEntityCrossReference_6_2_0; }
		
		//QN
		public RuleCall getConceptualBasisEntityConceptualBasisEntityQNParserRuleCall_6_2_0_1() { return cConceptualBasisEntityConceptualBasisEntityQNParserRuleCall_6_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
		
		//('participants:' '[' participant+=ConceptualParticipant+ ']')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'participants:'
		public Keyword getParticipantsKeyword_7_0() { return cParticipantsKeyword_7_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }
		
		//participant+=ConceptualParticipant+
		public Assignment getParticipantAssignment_7_2() { return cParticipantAssignment_7_2; }
		
		//ConceptualParticipant
		public RuleCall getParticipantConceptualParticipantParserRuleCall_7_2_0() { return cParticipantConceptualParticipantParserRuleCall_7_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_8() { return cRightCurlyBracketSemicolonKeyword_8; }
	}
	public class ConceptualParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualParticipant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConceptualEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeConceptualEntityQNParserRuleCall_0_0_1 = (RuleCall)cTypeConceptualEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecializesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecializesConceptualCharacteristicCrossReference_4_1_0 = (CrossReference)cSpecializesAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecializesConceptualCharacteristicQNParserRuleCall_4_1_0_1 = (RuleCall)cSpecializesConceptualCharacteristicCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSrcKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceLowerBoundAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceLowerBoundINTTerminalRuleCall_8_0 = (RuleCall)cSourceLowerBoundAssignment_8.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSourceUpperBoundAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSourceUpperBoundINTTerminalRuleCall_10_0 = (RuleCall)cSourceUpperBoundAssignment_10.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cPathKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cPathAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cPathConceptualPathNodeParserRuleCall_12_1_0 = (RuleCall)cPathAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		///** A conceptual Participant is the mechanism that allows a conceptual Association to be constructed between two or more conceptual Entities. The “type” of a conceptual Participant is the conceptual Entity being used to construct the conceptual Association. The “sourceLowerBound” and “sourceUpperBound” attributes define the multiplicity of the conceptual Association relative to the Participant. A “sourceUpperBound” multiplicity of –1 represents an unbounded sequence. The “path” attribute of the Participant describes the chain of entity characteristics to traverse to reach the subject of the association beginning with the entity referenced by the “type” attribute.  */
		//ConceptualParticipant:
		//    type=[ConceptualEntity|QN]  rolename=ID ('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')? (description=STRING)? (':' specializes=[ConceptualCharacteristic|QN])?
		//        '{'
		//            'src:' '['sourceLowerBound=INT ':' sourceUpperBound=INT ']'
		//            ('path:' path=ConceptualPathNode)?
		//        '}'
		//        ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[ConceptualEntity|QN]  rolename=ID ('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')? (description=STRING)? (':' specializes=[ConceptualCharacteristic|QN])?
		//    '{'
		//        'src:' '['sourceLowerBound=INT ':' sourceUpperBound=INT ']'
		//        ('path:' path=ConceptualPathNode)?
		//    '}'
		//    ';'
		public Group getGroup() { return cGroup; }
		
		//type=[ConceptualEntity|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[ConceptualEntity|QN]
		public CrossReference getTypeConceptualEntityCrossReference_0_0() { return cTypeConceptualEntityCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeConceptualEntityQNParserRuleCall_0_0_1() { return cTypeConceptualEntityQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(lowerBound=INT)?
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_2_1_0() { return cLowerBoundINTTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//(upperBound=INT)?
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_3_0() { return cUpperBoundINTTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//(':' specializes=[ConceptualCharacteristic|QN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//specializes=[ConceptualCharacteristic|QN]
		public Assignment getSpecializesAssignment_4_1() { return cSpecializesAssignment_4_1; }
		
		//[ConceptualCharacteristic|QN]
		public CrossReference getSpecializesConceptualCharacteristicCrossReference_4_1_0() { return cSpecializesConceptualCharacteristicCrossReference_4_1_0; }
		
		//QN
		public RuleCall getSpecializesConceptualCharacteristicQNParserRuleCall_4_1_0_1() { return cSpecializesConceptualCharacteristicQNParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'src:'
		public Keyword getSrcKeyword_6() { return cSrcKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//sourceLowerBound=INT
		public Assignment getSourceLowerBoundAssignment_8() { return cSourceLowerBoundAssignment_8; }
		
		//INT
		public RuleCall getSourceLowerBoundINTTerminalRuleCall_8_0() { return cSourceLowerBoundINTTerminalRuleCall_8_0; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//sourceUpperBound=INT
		public Assignment getSourceUpperBoundAssignment_10() { return cSourceUpperBoundAssignment_10; }
		
		//INT
		public RuleCall getSourceUpperBoundINTTerminalRuleCall_10_0() { return cSourceUpperBoundINTTerminalRuleCall_10_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//('path:' path=ConceptualPathNode)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'path:'
		public Keyword getPathKeyword_12_0() { return cPathKeyword_12_0; }
		
		//path=ConceptualPathNode
		public Assignment getPathAssignment_12_1() { return cPathAssignment_12_1; }
		
		//ConceptualPathNode
		public RuleCall getPathConceptualPathNodeParserRuleCall_12_1_0() { return cPathConceptualPathNodeParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}
	public class ConceptualPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualPathNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptualParticipantPathNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptualCharacteristicPathNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** Either a ConceptualParticipantPathNode or a ConceptualCharacteristicPathNode.
		// * A conceptual PathNode is a single element in a chain that collectively forms a path specification. */
		//ConceptualPathNode:
		//    ConceptualParticipantPathNode |
		//    ConceptualCharacteristicPathNode
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptualParticipantPathNode |
		//ConceptualCharacteristicPathNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptualParticipantPathNode
		public RuleCall getConceptualParticipantPathNodeParserRuleCall_0() { return cConceptualParticipantPathNodeParserRuleCall_0; }
		
		//ConceptualCharacteristicPathNode
		public RuleCall getConceptualCharacteristicPathNodeParserRuleCall_1() { return cConceptualCharacteristicPathNodeParserRuleCall_1; }
	}
	public class ConceptualParticipantPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualParticipantPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectedParticipantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProjectedParticipantConceptualParticipantCrossReference_1_0 = (CrossReference)cProjectedParticipantAssignment_1.eContents().get(0);
		private final RuleCall cProjectedParticipantConceptualParticipantQNParserRuleCall_1_0_1 = (RuleCall)cProjectedParticipantConceptualParticipantCrossReference_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeConceptualPathNodeParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		//// NOTE: There is something I did to set up the path resolution here that made things very succinct. I think it had to do
		//// with the NameProvider?
		///** A conceptual ParticipantPathNode is a conceptual PathNode that selects a Participant that references an Entity. This provides a mechanism for reverse navigation from an Entity that participates in an Association back to the Association. */
		//ConceptualParticipantPathNode:
		//    '/' projectedParticipant=[ConceptualParticipant|QN]
		//    ( node=ConceptualPathNode )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'/' projectedParticipant=[ConceptualParticipant|QN]
		//( node=ConceptualPathNode )?
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//projectedParticipant=[ConceptualParticipant|QN]
		public Assignment getProjectedParticipantAssignment_1() { return cProjectedParticipantAssignment_1; }
		
		//[ConceptualParticipant|QN]
		public CrossReference getProjectedParticipantConceptualParticipantCrossReference_1_0() { return cProjectedParticipantConceptualParticipantCrossReference_1_0; }
		
		//QN
		public RuleCall getProjectedParticipantConceptualParticipantQNParserRuleCall_1_0_1() { return cProjectedParticipantConceptualParticipantQNParserRuleCall_1_0_1; }
		
		//( node=ConceptualPathNode )?
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//ConceptualPathNode
		public RuleCall getNodeConceptualPathNodeParserRuleCall_2_0() { return cNodeConceptualPathNodeParserRuleCall_2_0; }
	}
	public class ConceptualCharacteristicPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualCharacteristicPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectedCharacteristicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProjectedCharacteristicConceptualCharacteristicCrossReference_1_0 = (CrossReference)cProjectedCharacteristicAssignment_1.eContents().get(0);
		private final RuleCall cProjectedCharacteristicConceptualCharacteristicQNParserRuleCall_1_0_1 = (RuleCall)cProjectedCharacteristicConceptualCharacteristicCrossReference_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeConceptualPathNodeParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		///** A conceptual CharacteristicPathNode is a conceptual PathNode that selects a conceptual Characteristic which is directly contained in a conceptual Entity or Association. */
		//ConceptualCharacteristicPathNode:
		//    '#' projectedCharacteristic=[ConceptualCharacteristic|QN]
		//    ( node=ConceptualPathNode )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' projectedCharacteristic=[ConceptualCharacteristic|QN]
		//( node=ConceptualPathNode )?
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//projectedCharacteristic=[ConceptualCharacteristic|QN]
		public Assignment getProjectedCharacteristicAssignment_1() { return cProjectedCharacteristicAssignment_1; }
		
		//[ConceptualCharacteristic|QN]
		public CrossReference getProjectedCharacteristicConceptualCharacteristicCrossReference_1_0() { return cProjectedCharacteristicConceptualCharacteristicCrossReference_1_0; }
		
		//QN
		public RuleCall getProjectedCharacteristicConceptualCharacteristicQNParserRuleCall_1_0_1() { return cProjectedCharacteristicConceptualCharacteristicQNParserRuleCall_1_0_1; }
		
		//( node=ConceptualPathNode )?
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//ConceptualPathNode
		public RuleCall getNodeConceptualPathNodeParserRuleCall_2_0() { return cNodeConceptualPathNodeParserRuleCall_2_0; }
	}
	public class ConceptualViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualView");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptualQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptualCompositeQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** Either a ConceptualQuery or a ConceptualCompositeQuery.
		// * A conceptual View is a conceptual Query or a conceptual CompositeQuery. */
		//ConceptualView:
		//    ConceptualQuery |
		//    ConceptualCompositeQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptualQuery |
		//ConceptualCompositeQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptualQuery
		public RuleCall getConceptualQueryParserRuleCall_0() { return cConceptualQueryParserRuleCall_0; }
		
		//ConceptualCompositeQuery
		public RuleCall getConceptualCompositeQueryParserRuleCall_1() { return cConceptualCompositeQueryParserRuleCall_1; }
	}
	public class ConceptualQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCqueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSpecKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSpecificationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSpecificationSTRINGTerminalRuleCall_5_0 = (RuleCall)cSpecificationAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** A conceptual Query is a specification that defines the content of conceptual View as a set of conceptual Characteristics projected from a selected set of related conceptual Entities. The “specification” attribute captures the specification of a Query as defined by the Query grammar.  */
		//ConceptualQuery:
		//    'cquery' name=ID (description=STRING)? '{'
		//        'spec:' specification=STRING
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'cquery' name=ID (description=STRING)? '{'
		//    'spec:' specification=STRING
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'cquery'
		public Keyword getCqueryKeyword_0() { return cCqueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'spec:'
		public Keyword getSpecKeyword_4() { return cSpecKeyword_4; }
		
		//specification=STRING
		public Assignment getSpecificationAssignment_5() { return cSpecificationAssignment_5; }
		
		//STRING
		public RuleCall getSpecificationSTRINGTerminalRuleCall_5_0() { return cSpecificationSTRINGTerminalRuleCall_5_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_6() { return cRightCurlyBracketSemicolonKeyword_6; }
	}
	public class ConceptualCompositeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualCompositeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCcqueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIsUnionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsUnionIsUnionKeyword_4_0 = (Keyword)cIsUnionAssignment_4.eContents().get(0);
		private final Assignment cCompositionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompositionConceptualQueryCompositionParserRuleCall_5_0 = (RuleCall)cCompositionAssignment_5.eContents().get(0);
		private final Assignment cCompositionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCompositionConceptualQueryCompositionParserRuleCall_6_0 = (RuleCall)cCompositionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A conceptual CompositeQuery is a collection of two or more conceptual Views. The “isUnion” attribute specifies whether the composed Views are intended to be mutually exclusive or not. */
		//ConceptualCompositeQuery:
		//    'ccquery' name=ID (description=STRING)? '{'
		//        isUnion?='isUnion'
		//        composition+=ConceptualQueryComposition
		//        (composition+=ConceptualQueryComposition)+
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ccquery' name=ID (description=STRING)? '{'
		//    isUnion?='isUnion'
		//    composition+=ConceptualQueryComposition
		//    (composition+=ConceptualQueryComposition)+
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'ccquery'
		public Keyword getCcqueryKeyword_0() { return cCcqueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//isUnion?='isUnion'
		public Assignment getIsUnionAssignment_4() { return cIsUnionAssignment_4; }
		
		//'isUnion'
		public Keyword getIsUnionIsUnionKeyword_4_0() { return cIsUnionIsUnionKeyword_4_0; }
		
		//composition+=ConceptualQueryComposition
		public Assignment getCompositionAssignment_5() { return cCompositionAssignment_5; }
		
		//ConceptualQueryComposition
		public RuleCall getCompositionConceptualQueryCompositionParserRuleCall_5_0() { return cCompositionConceptualQueryCompositionParserRuleCall_5_0; }
		
		//(composition+=ConceptualQueryComposition)+
		public Assignment getCompositionAssignment_6() { return cCompositionAssignment_6; }
		
		//ConceptualQueryComposition
		public RuleCall getCompositionConceptualQueryCompositionParserRuleCall_6_0() { return cCompositionConceptualQueryCompositionParserRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class ConceptualQueryCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.ConceptualQueryComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConceptualViewCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeConceptualViewQNParserRuleCall_0_0_1 = (RuleCall)cTypeConceptualViewCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///** A conceptual QueryComposition is the mechanism that allows a conceptual CompositeQuery to be constructed from conceptual Queries and other conceptual CompositeQueries. The “rolename” attribute defines the name of the composed conceptual View within the scope of the composing conceptual CompositeQuery. The “type” of a conceptual QueryComposition is the conceptual View being used to construct the conceptual CompositeQuery. */
		//ConceptualQueryComposition:
		//    type=[ConceptualView|QN] rolename=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[ConceptualView|QN] rolename=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=[ConceptualView|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[ConceptualView|QN]
		public CrossReference getTypeConceptualViewCrossReference_0_0() { return cTypeConceptualViewCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeConceptualViewQNParserRuleCall_0_0_1() { return cTypeConceptualViewQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LogicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalComposableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalUnitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicalCoordinateSystemParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLogicalCoordinateSystemAxisParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLogicalMeasurementConversionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLogicalMeasurementSystemConversionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLogicalMeasurementAxisParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLogicalAbstractMeasurementSystemParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLogicalMeasurementSystemAxisParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLogicalValueTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLogicalViewParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLogicalLandmarkParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLogicalValueTypeUnitParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		///** A logical Element is the root type for defining the logical elements of a Data Model. */
		//LogicalElement:
		//    LogicalComposableElement |
		//    LogicalConversion | // LogicalConversion has a single inheritance of LogicalAffineConversion - so that is promoted to here
		//    LogicalUnit | //LogicalConvertibleElement | // LogicalConvertibleElement has a single inheritance of LogicalUnit - promote that to here
		//    LogicalCoordinateSystem |
		//    LogicalCoordinateSystemAxis |
		//    LogicalMeasurementConversion |
		//    LogicalMeasurementSystemConversion |
		//    LogicalMeasurementAxis | // Also derived from AbstractMeasurement
		//    LogicalAbstractMeasurementSystem| //LogicalMeasurementSystem |
		//    LogicalMeasurementSystemAxis |
		//    LogicalValueType | // Also derived from AbstractMeasurement
		//    LogicalView |
		//    LogicalLandmark |
		//    LogicalValueTypeUnit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalComposableElement |
		//LogicalConversion | // LogicalConversion has a single inheritance of LogicalAffineConversion - so that is promoted to here
		//LogicalUnit | //LogicalConvertibleElement | // LogicalConvertibleElement has a single inheritance of LogicalUnit - promote that to here
		//LogicalCoordinateSystem |
		//LogicalCoordinateSystemAxis |
		//LogicalMeasurementConversion |
		//LogicalMeasurementSystemConversion |
		//LogicalMeasurementAxis | // Also derived from AbstractMeasurement
		//LogicalAbstractMeasurementSystem| //LogicalMeasurementSystem |
		//LogicalMeasurementSystemAxis |
		//LogicalValueType | // Also derived from AbstractMeasurement
		//LogicalView |
		//LogicalLandmark |
		//LogicalValueTypeUnit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalComposableElement
		public RuleCall getLogicalComposableElementParserRuleCall_0() { return cLogicalComposableElementParserRuleCall_0; }
		
		//LogicalConversion
		public RuleCall getLogicalConversionParserRuleCall_1() { return cLogicalConversionParserRuleCall_1; }
		
		//// LogicalConversion has a single inheritance of LogicalAffineConversion - so that is promoted to here
		//   LogicalUnit
		public RuleCall getLogicalUnitParserRuleCall_2() { return cLogicalUnitParserRuleCall_2; }
		
		////LogicalConvertibleElement | // LogicalConvertibleElement has a single inheritance of LogicalUnit - promote that to here
		//   LogicalCoordinateSystem
		public RuleCall getLogicalCoordinateSystemParserRuleCall_3() { return cLogicalCoordinateSystemParserRuleCall_3; }
		
		//LogicalCoordinateSystemAxis
		public RuleCall getLogicalCoordinateSystemAxisParserRuleCall_4() { return cLogicalCoordinateSystemAxisParserRuleCall_4; }
		
		//LogicalMeasurementConversion
		public RuleCall getLogicalMeasurementConversionParserRuleCall_5() { return cLogicalMeasurementConversionParserRuleCall_5; }
		
		//LogicalMeasurementSystemConversion
		public RuleCall getLogicalMeasurementSystemConversionParserRuleCall_6() { return cLogicalMeasurementSystemConversionParserRuleCall_6; }
		
		//LogicalMeasurementAxis
		public RuleCall getLogicalMeasurementAxisParserRuleCall_7() { return cLogicalMeasurementAxisParserRuleCall_7; }
		
		//// Also derived from AbstractMeasurement
		//   LogicalAbstractMeasurementSystem
		public RuleCall getLogicalAbstractMeasurementSystemParserRuleCall_8() { return cLogicalAbstractMeasurementSystemParserRuleCall_8; }
		
		////LogicalMeasurementSystem |
		//   LogicalMeasurementSystemAxis
		public RuleCall getLogicalMeasurementSystemAxisParserRuleCall_9() { return cLogicalMeasurementSystemAxisParserRuleCall_9; }
		
		//LogicalValueType
		public RuleCall getLogicalValueTypeParserRuleCall_10() { return cLogicalValueTypeParserRuleCall_10; }
		
		//// Also derived from AbstractMeasurement
		//   LogicalView
		public RuleCall getLogicalViewParserRuleCall_11() { return cLogicalViewParserRuleCall_11; }
		
		//LogicalLandmark
		public RuleCall getLogicalLandmarkParserRuleCall_12() { return cLogicalLandmarkParserRuleCall_12; }
		
		//LogicalValueTypeUnit
		public RuleCall getLogicalValueTypeUnitParserRuleCall_13() { return cLogicalValueTypeUnitParserRuleCall_13; }
	}
	public class LogicalUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLunitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// NOTE: LogicalConvertibleElement has LogicalUnit as a single inheritance. Since it has nothing else, promote LogicalUnit directly
		//// to LogicalElement
		///** A ConvertibleElement is a Unit. */
		///** A Unit is a defined magnitude of quantity used as a standard for measurement.  */
		//LogicalUnit:
		//    'lunit' name=ID (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lunit' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'lunit'
		public Keyword getLunitKeyword_0() { return cLunitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cConvKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cDescriptionAssignment_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSourceAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cSourceLogicalAssociationCrossReference_0_4_0 = (CrossReference)cSourceAssignment_0_4.eContents().get(0);
		private final RuleCall cSourceLogicalAssociationQNParserRuleCall_0_4_0_1 = (RuleCall)cSourceLogicalAssociationCrossReference_0_4_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisRightParenthesisGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cDestinationAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final CrossReference cDestinationLogicalAssociationCrossReference_0_6_0 = (CrossReference)cDestinationAssignment_0_6.eContents().get(0);
		private final RuleCall cDestinationLogicalAssociationQNParserRuleCall_0_6_0_1 = (RuleCall)cDestinationLogicalAssociationCrossReference_0_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketSemicolonKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final RuleCall cLogicalAffineConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// NOTE: LogicalConversion has LogicalAffineConversion as a single inheritance. Since it has nothing else, promote LogicalAffineConversion directly
		//// to LogicalElement
		///** A Conversion is a relationship between two ConvertibleElements that describes how to transform measured quantities between two Units. */
		//LogicalConversion:
		//    'conv' name=ID  (description=STRING)? '{'
		//        source=[LogicalAssociation|QN] '-()>'  destination=[LogicalAssociation|QN]
		//        '};' |
		//    LogicalAffineConversion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'conv' name=ID  (description=STRING)? '{'
		//    source=[LogicalAssociation|QN] '-()>'  destination=[LogicalAssociation|QN]
		//    '};' |
		//LogicalAffineConversion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'conv' name=ID  (description=STRING)? '{'
		//    source=[LogicalAssociation|QN] '-()>'  destination=[LogicalAssociation|QN]
		//    '};'
		public Group getGroup_0() { return cGroup_0; }
		
		//'conv'
		public Keyword getConvKeyword_0_0() { return cConvKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_0_2() { return cDescriptionAssignment_0_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_2_0() { return cDescriptionSTRINGTerminalRuleCall_0_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }
		
		//source=[LogicalAssociation|QN]
		public Assignment getSourceAssignment_0_4() { return cSourceAssignment_0_4; }
		
		//[LogicalAssociation|QN]
		public CrossReference getSourceLogicalAssociationCrossReference_0_4_0() { return cSourceLogicalAssociationCrossReference_0_4_0; }
		
		//QN
		public RuleCall getSourceLogicalAssociationQNParserRuleCall_0_4_0_1() { return cSourceLogicalAssociationQNParserRuleCall_0_4_0_1; }
		
		//'-()>'
		public Keyword getHyphenMinusLeftParenthesisRightParenthesisGreaterThanSignKeyword_0_5() { return cHyphenMinusLeftParenthesisRightParenthesisGreaterThanSignKeyword_0_5; }
		
		//destination=[LogicalAssociation|QN]
		public Assignment getDestinationAssignment_0_6() { return cDestinationAssignment_0_6; }
		
		//[LogicalAssociation|QN]
		public CrossReference getDestinationLogicalAssociationCrossReference_0_6_0() { return cDestinationLogicalAssociationCrossReference_0_6_0; }
		
		//QN
		public RuleCall getDestinationLogicalAssociationQNParserRuleCall_0_6_0_1() { return cDestinationLogicalAssociationQNParserRuleCall_0_6_0_1; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_0_7() { return cRightCurlyBracketSemicolonKeyword_0_7; }
		
		//LogicalAffineConversion
		public RuleCall getLogicalAffineConversionParserRuleCall_1() { return cLogicalAffineConversionParserRuleCall_1; }
	}
	public class LogicalAffineConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalAffineConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAconvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceLogicalAssociationCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceLogicalAssociationQNParserRuleCall_4_0_1 = (RuleCall)cSourceLogicalAssociationCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConversionFactorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConversionFactorFLOATTerminalRuleCall_7_0 = (RuleCall)cConversionFactorAssignment_7.eContents().get(0);
		private final Keyword cBKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOffsetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOffsetFLOATTerminalRuleCall_9_0 = (RuleCall)cOffsetAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisHyphenMinusGreaterThanSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cDestinationAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cDestinationLogicalAssociationCrossReference_11_0 = (CrossReference)cDestinationAssignment_11.eContents().get(0);
		private final RuleCall cDestinationLogicalAssociationQNParserRuleCall_11_0_1 = (RuleCall)cDestinationLogicalAssociationCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///** An AffineConversion is a relationship between two ConvertibleElements in the form mx+b. */
		//LogicalAffineConversion:
		//    'aconv' name=ID  (description=STRING)? '{'
		//        source=[LogicalAssociation|QN] '-(' 'm:' conversionFactor=FLOAT 'b:' offset=FLOAT ')->'  destination=[LogicalAssociation|QN]
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'aconv' name=ID  (description=STRING)? '{'
		//    source=[LogicalAssociation|QN] '-(' 'm:' conversionFactor=FLOAT 'b:' offset=FLOAT ')->'  destination=[LogicalAssociation|QN]
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'aconv'
		public Keyword getAconvKeyword_0() { return cAconvKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//source=[LogicalAssociation|QN]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//[LogicalAssociation|QN]
		public CrossReference getSourceLogicalAssociationCrossReference_4_0() { return cSourceLogicalAssociationCrossReference_4_0; }
		
		//QN
		public RuleCall getSourceLogicalAssociationQNParserRuleCall_4_0_1() { return cSourceLogicalAssociationQNParserRuleCall_4_0_1; }
		
		//'-('
		public Keyword getHyphenMinusLeftParenthesisKeyword_5() { return cHyphenMinusLeftParenthesisKeyword_5; }
		
		//'m:'
		public Keyword getMKeyword_6() { return cMKeyword_6; }
		
		//conversionFactor=FLOAT
		public Assignment getConversionFactorAssignment_7() { return cConversionFactorAssignment_7; }
		
		//FLOAT
		public RuleCall getConversionFactorFLOATTerminalRuleCall_7_0() { return cConversionFactorFLOATTerminalRuleCall_7_0; }
		
		//'b:'
		public Keyword getBKeyword_8() { return cBKeyword_8; }
		
		//offset=FLOAT
		public Assignment getOffsetAssignment_9() { return cOffsetAssignment_9; }
		
		//FLOAT
		public RuleCall getOffsetFLOATTerminalRuleCall_9_0() { return cOffsetFLOATTerminalRuleCall_9_0; }
		
		//')->'
		public Keyword getRightParenthesisHyphenMinusGreaterThanSignKeyword_10() { return cRightParenthesisHyphenMinusGreaterThanSignKeyword_10; }
		
		//destination=[LogicalAssociation|QN]
		public Assignment getDestinationAssignment_11() { return cDestinationAssignment_11; }
		
		//[LogicalAssociation|QN]
		public CrossReference getDestinationLogicalAssociationCrossReference_11_0() { return cDestinationLogicalAssociationCrossReference_11_0; }
		
		//QN
		public RuleCall getDestinationLogicalAssociationQNParserRuleCall_11_0_1() { return cDestinationLogicalAssociationQNParserRuleCall_11_0_1; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_12() { return cRightCurlyBracketSemicolonKeyword_12; }
	}
	public class LogicalValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalNumericParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalCharacterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicalStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLogicalEnumeratedBaseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///** A ValueType specifies the logical representation of a MeasurementSystem or Measurement. Integer, Real, and String are examples of logical ValueTypes. */
		//LogicalValueType:
		//    LogicalBoolean |
		//    LogicalNumeric |
		//    LogicalCharacter |
		//    LogicalString |
		//    LogicalEnumeratedBase // EXTENSION
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalBoolean |
		//LogicalNumeric |
		//LogicalCharacter |
		//LogicalString |
		//LogicalEnumeratedBase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalBoolean
		public RuleCall getLogicalBooleanParserRuleCall_0() { return cLogicalBooleanParserRuleCall_0; }
		
		//LogicalNumeric
		public RuleCall getLogicalNumericParserRuleCall_1() { return cLogicalNumericParserRuleCall_1; }
		
		//LogicalCharacter
		public RuleCall getLogicalCharacterParserRuleCall_2() { return cLogicalCharacterParserRuleCall_2; }
		
		//LogicalString
		public RuleCall getLogicalStringParserRuleCall_3() { return cLogicalStringParserRuleCall_3; }
		
		//LogicalEnumeratedBase
		public RuleCall getLogicalEnumeratedBaseParserRuleCall_4() { return cLogicalEnumeratedBaseParserRuleCall_4; }
	}
	public class LogicalStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A String is a value type that represents a variable length sequence of characters. */
		//LogicalString:                     'str'     name=ID (description=STRING)? ';'     ;
		@Override public ParserRule getRule() { return rule; }
		
		//'str' 	name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'str'
		public Keyword getStrKeyword_0() { return cStrKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalCharacter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A Character is a value type representing characters from any character set. */
		//LogicalCharacter:                 'ch'     name=ID (description=STRING)? ';'    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ch' 	name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'ch'
		public Keyword getChKeyword_0() { return cChKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A Boolean is a value type representing the two values TRUE and FALSE. */
		//LogicalBoolean:                    'bool'     name=ID (description=STRING)? ';'    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'bool' 	name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'bool'
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalNumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalNumeric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalNaturalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalRealParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicalNonNegativeRealParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** A Numeric is a numeric ValueType. */
		//LogicalNumeric:
		//    LogicalInteger |
		//    LogicalNatural |
		//    LogicalReal |
		//    LogicalNonNegativeReal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalInteger |
		//LogicalNatural |
		//LogicalReal |
		//LogicalNonNegativeReal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalInteger
		public RuleCall getLogicalIntegerParserRuleCall_0() { return cLogicalIntegerParserRuleCall_0; }
		
		//LogicalNatural
		public RuleCall getLogicalNaturalParserRuleCall_1() { return cLogicalNaturalParserRuleCall_1; }
		
		//LogicalReal
		public RuleCall getLogicalRealParserRuleCall_2() { return cLogicalRealParserRuleCall_2; }
		
		//LogicalNonNegativeReal
		public RuleCall getLogicalNonNegativeRealParserRuleCall_3() { return cLogicalNonNegativeRealParserRuleCall_3; }
	}
	public class LogicalIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** An Integer is a value type representing integer numbers. */
		//LogicalInteger:                    'int'     name=ID (description=STRING)? ';'    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' 	name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalNaturalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalNatural");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A Natural is a value type representing the non-negative integers. */
		//LogicalNatural:                    'nat'     name=ID (description=STRING)? ';'    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'nat' 	name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'nat'
		public Keyword getNatKeyword_0() { return cNatKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A Real is a value type representing real numbers. */
		//LogicalReal:                    'real'     name=ID (description=STRING)? ';'    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'real' 	name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'real'
		public Keyword getRealKeyword_0() { return cRealKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalNonNegativeRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalNonNegativeReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A NonNegativeReal is a value type representing non-negative real numbers. */
		//LogicalNonNegativeReal:            'real+' name=ID (description=STRING)? ';'    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'real+' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'real+'
		public Keyword getRealKeyword_0() { return cRealKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalEnumeratedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalEnumerated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStdRefKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStandardReferenceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStandardReferenceSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cStandardReferenceAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cLabelAlternatives_5_0 = (Alternatives)cLabelAssignment_5.eContents().get(0);
		private final RuleCall cLabelLogicalEnumerationLabelParserRuleCall_5_0_0 = (RuleCall)cLabelAlternatives_5_0.eContents().get(0);
		private final RuleCall cLabelLogicalEnumeratedSetParserRuleCall_5_0_1 = (RuleCall)cLabelAlternatives_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cLabelAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Alternatives cLabelAlternatives_7_0_0 = (Alternatives)cLabelAssignment_7_0.eContents().get(0);
		private final RuleCall cLabelLogicalEnumerationLabelParserRuleCall_7_0_0_0 = (RuleCall)cLabelAlternatives_7_0_0.eContents().get(0);
		private final RuleCall cLabelLogicalEnumeratedSetParserRuleCall_7_0_0_1 = (RuleCall)cLabelAlternatives_7_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** An Enumerated is a value type representing a set of named values, each with specific meaning. */
		//LogicalEnumerated:
		//    'enum'     name=ID (description=STRING)?
		//        ('stdRef:' standardReference=STRING)?
		//        '['
		//        label+=(LogicalEnumerationLabel | LogicalEnumeratedSet) ','? (label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
		//        ']'
		//        ';'
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum'     name=ID (description=STRING)?
		//    ('stdRef:' standardReference=STRING)?
		//    '['
		//    label+=(LogicalEnumerationLabel | LogicalEnumeratedSet) ','? (label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
		//    ']'
		//    ';'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('stdRef:' standardReference=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'stdRef:'
		public Keyword getStdRefKeyword_3_0() { return cStdRefKeyword_3_0; }
		
		//standardReference=STRING
		public Assignment getStandardReferenceAssignment_3_1() { return cStandardReferenceAssignment_3_1; }
		
		//STRING
		public RuleCall getStandardReferenceSTRINGTerminalRuleCall_3_1_0() { return cStandardReferenceSTRINGTerminalRuleCall_3_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//label+=(LogicalEnumerationLabel | LogicalEnumeratedSet)
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//(LogicalEnumerationLabel | LogicalEnumeratedSet)
		public Alternatives getLabelAlternatives_5_0() { return cLabelAlternatives_5_0; }
		
		//LogicalEnumerationLabel
		public RuleCall getLabelLogicalEnumerationLabelParserRuleCall_5_0_0() { return cLabelLogicalEnumerationLabelParserRuleCall_5_0_0; }
		
		//LogicalEnumeratedSet
		public RuleCall getLabelLogicalEnumeratedSetParserRuleCall_5_0_1() { return cLabelLogicalEnumeratedSetParserRuleCall_5_0_1; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//(label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
		public Group getGroup_7() { return cGroup_7; }
		
		//label+=(LogicalEnumerationLabel| LogicalEnumeratedSet)
		public Assignment getLabelAssignment_7_0() { return cLabelAssignment_7_0; }
		
		//(LogicalEnumerationLabel| LogicalEnumeratedSet)
		public Alternatives getLabelAlternatives_7_0_0() { return cLabelAlternatives_7_0_0; }
		
		//LogicalEnumerationLabel
		public RuleCall getLabelLogicalEnumerationLabelParserRuleCall_7_0_0_0() { return cLabelLogicalEnumerationLabelParserRuleCall_7_0_0_0; }
		
		//LogicalEnumeratedSet
		public RuleCall getLabelLogicalEnumeratedSetParserRuleCall_7_0_0_1() { return cLabelLogicalEnumeratedSetParserRuleCall_7_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_7_1() { return cCommaKeyword_7_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class TaxonomyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.Taxonomy");
		private final RuleCall cLogicalEnumeratedBaseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///**EXTENSION: The foundation for every taxonomic type hierarchy. Override and extend as needed */
		//Taxonomy:
		//    LogicalEnumeratedBase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalEnumeratedBase
		public RuleCall getLogicalEnumeratedBaseParserRuleCall() { return cLogicalEnumeratedBaseParserRuleCall; }
	}
	public class LogicalEnumeratedBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalEnumeratedBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalEnumeratedSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalEnumerationLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalEnumeratedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///**EXTENSION: Creates the foundation for a hierarchy of enumerated values  */
		//LogicalEnumeratedBase:
		//    LogicalEnumeratedSet |
		//    LogicalEnumerationLabel |
		//    LogicalEnumerated
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalEnumeratedSet |
		//LogicalEnumerationLabel |
		//LogicalEnumerated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalEnumeratedSet
		public RuleCall getLogicalEnumeratedSetParserRuleCall_0() { return cLogicalEnumeratedSetParserRuleCall_0; }
		
		//LogicalEnumerationLabel
		public RuleCall getLogicalEnumerationLabelParserRuleCall_1() { return cLogicalEnumerationLabelParserRuleCall_1; }
		
		//LogicalEnumerated
		public RuleCall getLogicalEnumeratedParserRuleCall_2() { return cLogicalEnumeratedParserRuleCall_2; }
	}
	public class LogicalEnumeratedSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalEnumeratedSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cLabelAlternatives_4_0 = (Alternatives)cLabelAssignment_4.eContents().get(0);
		private final RuleCall cLabelLogicalEnumerationLabelParserRuleCall_4_0_0 = (RuleCall)cLabelAlternatives_4_0.eContents().get(0);
		private final RuleCall cLabelLogicalEnumeratedSetParserRuleCall_4_0_1 = (RuleCall)cLabelAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cLabelAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Alternatives cLabelAlternatives_6_0_0 = (Alternatives)cLabelAssignment_6_0.eContents().get(0);
		private final RuleCall cLabelLogicalEnumerationLabelParserRuleCall_6_0_0_0 = (RuleCall)cLabelAlternatives_6_0_0.eContents().get(0);
		private final RuleCall cLabelLogicalEnumeratedSetParserRuleCall_6_0_0_1 = (RuleCall)cLabelAlternatives_6_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///**EXTENSION: allowing label to be a LogicalEnumeratedSet enables taxonomy definitions via enumerations  */
		//LogicalEnumeratedSet:
		//        '(' name=ID (description=STRING)?
		//        '['
		//        label+=(LogicalEnumerationLabel | LogicalEnumeratedSet) ','? (label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
		//        ']' ')'
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=ID (description=STRING)?
		//'['
		//label+=(LogicalEnumerationLabel | LogicalEnumeratedSet) ','? (label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
		//']' ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//label+=(LogicalEnumerationLabel | LogicalEnumeratedSet)
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//(LogicalEnumerationLabel | LogicalEnumeratedSet)
		public Alternatives getLabelAlternatives_4_0() { return cLabelAlternatives_4_0; }
		
		//LogicalEnumerationLabel
		public RuleCall getLabelLogicalEnumerationLabelParserRuleCall_4_0_0() { return cLabelLogicalEnumerationLabelParserRuleCall_4_0_0; }
		
		//LogicalEnumeratedSet
		public RuleCall getLabelLogicalEnumeratedSetParserRuleCall_4_0_1() { return cLabelLogicalEnumeratedSetParserRuleCall_4_0_1; }
		
		//','?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//(label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
		public Group getGroup_6() { return cGroup_6; }
		
		//label+=(LogicalEnumerationLabel| LogicalEnumeratedSet)
		public Assignment getLabelAssignment_6_0() { return cLabelAssignment_6_0; }
		
		//(LogicalEnumerationLabel| LogicalEnumeratedSet)
		public Alternatives getLabelAlternatives_6_0_0() { return cLabelAlternatives_6_0_0; }
		
		//LogicalEnumerationLabel
		public RuleCall getLabelLogicalEnumerationLabelParserRuleCall_6_0_0_0() { return cLabelLogicalEnumerationLabelParserRuleCall_6_0_0_0; }
		
		//LogicalEnumeratedSet
		public RuleCall getLabelLogicalEnumeratedSetParserRuleCall_6_0_0_1() { return cLabelLogicalEnumeratedSetParserRuleCall_6_0_0_1; }
		
		//','?
		public Keyword getCommaKeyword_6_1() { return cCommaKeyword_6_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class LogicalEnumerationLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalEnumerationLabel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cDescriptionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///** An EnumerationLabel defines a named member of an Enumerated value set. */
		//LogicalEnumerationLabel:    name=ID |    '(' name=ID description=STRING ')' ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID |	'(' name=ID description=STRING ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'(' name=ID description=STRING ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1_2() { return cDescriptionAssignment_1_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class LogicalCoordinateSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalCoordinateSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAxisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAxisRelationshipDescriptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAxisRelationshipDescriptionSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cAxisRelationshipDescriptionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAngleEqKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAngleEquationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAngleEquationSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cAngleEquationAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDistanceEqKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDistanceEquationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDistanceEquationSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cDistanceEquationAssignment_6_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAxisAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAxisLogicalCoordinateSystemAxisCrossReference_8_0 = (CrossReference)cAxisAssignment_8.eContents().get(0);
		private final RuleCall cAxisLogicalCoordinateSystemAxisQNParserRuleCall_8_0_1 = (RuleCall)cAxisLogicalCoordinateSystemAxisCrossReference_8_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///** A CoordinateSystem is a system which uses one or more coordinates to uniquely determine the position of a point in an N-dimensional space. The coordinate system is comprised of multiple CoordinateSystemAxis which completely span the space. Coordinates are quantified relative to the CoordinateSystemAxis. It is not required that the dimensions be ordered or continuous. */
		//LogicalCoordinateSystem:
		//    'coord' name=ID (description=STRING)? '{'
		//        ('axis:'         axisRelationshipDescription=STRING)?
		//        ('angleEq:'     angleEquation=STRING)?
		//        ('distanceEq:'     distanceEquation=STRING)?
		//        '['axis+=[LogicalCoordinateSystemAxis|QN]+ ']'
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'coord' name=ID (description=STRING)? '{'
		//    ('axis:'         axisRelationshipDescription=STRING)?
		//    ('angleEq:'     angleEquation=STRING)?
		//    ('distanceEq:'     distanceEquation=STRING)?
		//    '['axis+=[LogicalCoordinateSystemAxis|QN]+ ']'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'coord'
		public Keyword getCoordKeyword_0() { return cCoordKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('axis:' 		axisRelationshipDescription=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'axis:'
		public Keyword getAxisKeyword_4_0() { return cAxisKeyword_4_0; }
		
		//axisRelationshipDescription=STRING
		public Assignment getAxisRelationshipDescriptionAssignment_4_1() { return cAxisRelationshipDescriptionAssignment_4_1; }
		
		//STRING
		public RuleCall getAxisRelationshipDescriptionSTRINGTerminalRuleCall_4_1_0() { return cAxisRelationshipDescriptionSTRINGTerminalRuleCall_4_1_0; }
		
		//('angleEq:' 	angleEquation=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'angleEq:'
		public Keyword getAngleEqKeyword_5_0() { return cAngleEqKeyword_5_0; }
		
		//angleEquation=STRING
		public Assignment getAngleEquationAssignment_5_1() { return cAngleEquationAssignment_5_1; }
		
		//STRING
		public RuleCall getAngleEquationSTRINGTerminalRuleCall_5_1_0() { return cAngleEquationSTRINGTerminalRuleCall_5_1_0; }
		
		//('distanceEq:' 	distanceEquation=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'distanceEq:'
		public Keyword getDistanceEqKeyword_6_0() { return cDistanceEqKeyword_6_0; }
		
		//distanceEquation=STRING
		public Assignment getDistanceEquationAssignment_6_1() { return cDistanceEquationAssignment_6_1; }
		
		//STRING
		public RuleCall getDistanceEquationSTRINGTerminalRuleCall_6_1_0() { return cDistanceEquationSTRINGTerminalRuleCall_6_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//axis+=[LogicalCoordinateSystemAxis|QN]+
		public Assignment getAxisAssignment_8() { return cAxisAssignment_8; }
		
		//[LogicalCoordinateSystemAxis|QN]
		public CrossReference getAxisLogicalCoordinateSystemAxisCrossReference_8_0() { return cAxisLogicalCoordinateSystemAxisCrossReference_8_0; }
		
		//QN
		public RuleCall getAxisLogicalCoordinateSystemAxisQNParserRuleCall_8_0_1() { return cAxisLogicalCoordinateSystemAxisQNParserRuleCall_8_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_10() { return cRightCurlyBracketSemicolonKeyword_10; }
	}
	public class LogicalCoordinateSystemAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalCoordinateSystemAxis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCsaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A CoordinateSystemAxis represents a dimension within a CoordinateSystem. */
		//LogicalCoordinateSystemAxis:
		//    'csa' name=ID (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'csa' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'csa'
		public Keyword getCsaKeyword_0() { return cCsaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalAbstractMeasurementSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalAbstractMeasurementSystem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalStandardMeasurementSystemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalMeasurementSystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** An AbstractMeasurementSystem is an abstract parent for StandardMeasurementSystems and MeasurementSystems. It is used for structural simplicity in the metamodel.  */
		//LogicalAbstractMeasurementSystem:
		//    LogicalStandardMeasurementSystem |
		//    LogicalMeasurementSystem
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalStandardMeasurementSystem |
		//LogicalMeasurementSystem
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalStandardMeasurementSystem
		public RuleCall getLogicalStandardMeasurementSystemParserRuleCall_0() { return cLogicalStandardMeasurementSystemParserRuleCall_0; }
		
		//LogicalMeasurementSystem
		public RuleCall getLogicalMeasurementSystemParserRuleCall_1() { return cLogicalMeasurementSystemParserRuleCall_1; }
	}
	public class LogicalStandardMeasurementSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalStandardMeasurementSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmsysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRefStdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReferenceStandardAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReferenceStandardSTRINGTerminalRuleCall_5_0 = (RuleCall)cReferenceStandardAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** A StandardMeasurementSystem is used to represent an open, referenced measurement system without requiring the detailed modeling of the measurement system. The reference should be unambiguous and allows for full comprehension of the underlying measurement system. */
		//LogicalStandardMeasurementSystem:
		//    'smsys' name=ID (description=STRING)? '{'
		//        'refStd:' referenceStandard=STRING
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'smsys' name=ID (description=STRING)? '{'
		//    'refStd:' referenceStandard=STRING
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'smsys'
		public Keyword getSmsysKeyword_0() { return cSmsysKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'refStd:'
		public Keyword getRefStdKeyword_4() { return cRefStdKeyword_4; }
		
		//referenceStandard=STRING
		public Assignment getReferenceStandardAssignment_5() { return cReferenceStandardAssignment_5; }
		
		//STRING
		public RuleCall getReferenceStandardSTRINGTerminalRuleCall_5_0() { return cReferenceStandardSTRINGTerminalRuleCall_5_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_6() { return cRightCurlyBracketSemicolonKeyword_6; }
	}
	public class LogicalLandmarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalLandmark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLandmarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** A Landmark is a named, recognizable or artificial feature used to locate a ReferencePoint in a measurable space. */
		//LogicalLandmark:
		//    'landmark' name=ID (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'landmark' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'landmark'
		public Keyword getLandmarkKeyword_0() { return cLandmarkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LogicalMeasurementSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMsysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMaxisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMeasurementSystemAxisAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_6_0 = (CrossReference)cMeasurementSystemAxisAssignment_6.eContents().get(0);
		private final RuleCall cMeasurementSystemAxisLogicalMeasurementSystemAxisQNParserRuleCall_6_0_1 = (RuleCall)cMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_6_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCoordKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCoordinateSystemAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cCoordinateSystemLogicalCoordinateSystemCrossReference_9_0 = (CrossReference)cCoordinateSystemAssignment_9.eContents().get(0);
		private final RuleCall cCoordinateSystemLogicalCoordinateSystemQNParserRuleCall_9_0_1 = (RuleCall)cCoordinateSystemLogicalCoordinateSystemCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cExtRefStdKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cExternalStandardReferenceAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExternalStandardReferenceSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cExternalStandardReferenceAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cOrientKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cOrientationAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cOrientationSTRINGTerminalRuleCall_11_1_0 = (RuleCall)cOrientationAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cRefPtKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cReferencePointAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cReferencePointLogicalReferencePointParserRuleCall_12_2_0 = (RuleCall)cReferencePointAssignment_12_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cExclamationMarkLeftSquareBracketKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cConstraintAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cConstraintLogicalMeasurementConstraintParserRuleCall_13_1_0 = (RuleCall)cConstraintAssignment_13_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Keyword cRightCurlyBracketSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		///** A MeasurementSystem relates a CoordinateSystem to an origin and orientation for the purpose of establishing a common basis for describing points in an N-dimensional space. Defining a MeasurementSystem establishes additional properties of the CoordinateSystem including units and value types for each axis, and a set of reference points that can be used to establish an origin and indicate the direction of each axis. */
		//LogicalMeasurementSystem:
		//    'msys' name=ID (description=STRING)? '{'
		//        'maxis:' '[' measurementSystemAxis+=[LogicalMeasurementSystemAxis|QN]+ ']'
		//        'coord:' coordinateSystem=[LogicalCoordinateSystem|QN]
		//        ('extRefStd:' externalStandardReference=STRING)?
		//        ('orient:' orientation=STRING)?
		//        ('refPt:' '[' referencePoint+=LogicalReferencePoint+ ']')?
		//        ('![' constraint+=LogicalMeasurementConstraint+ ']')?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'msys' name=ID (description=STRING)? '{'
		//    'maxis:' '[' measurementSystemAxis+=[LogicalMeasurementSystemAxis|QN]+ ']'
		//    'coord:' coordinateSystem=[LogicalCoordinateSystem|QN]
		//    ('extRefStd:' externalStandardReference=STRING)?
		//    ('orient:' orientation=STRING)?
		//    ('refPt:' '[' referencePoint+=LogicalReferencePoint+ ']')?
		//    ('![' constraint+=LogicalMeasurementConstraint+ ']')?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'msys'
		public Keyword getMsysKeyword_0() { return cMsysKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'maxis:'
		public Keyword getMaxisKeyword_4() { return cMaxisKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//measurementSystemAxis+=[LogicalMeasurementSystemAxis|QN]+
		public Assignment getMeasurementSystemAxisAssignment_6() { return cMeasurementSystemAxisAssignment_6; }
		
		//[LogicalMeasurementSystemAxis|QN]
		public CrossReference getMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_6_0() { return cMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_6_0; }
		
		//QN
		public RuleCall getMeasurementSystemAxisLogicalMeasurementSystemAxisQNParserRuleCall_6_0_1() { return cMeasurementSystemAxisLogicalMeasurementSystemAxisQNParserRuleCall_6_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//'coord:'
		public Keyword getCoordKeyword_8() { return cCoordKeyword_8; }
		
		//coordinateSystem=[LogicalCoordinateSystem|QN]
		public Assignment getCoordinateSystemAssignment_9() { return cCoordinateSystemAssignment_9; }
		
		//[LogicalCoordinateSystem|QN]
		public CrossReference getCoordinateSystemLogicalCoordinateSystemCrossReference_9_0() { return cCoordinateSystemLogicalCoordinateSystemCrossReference_9_0; }
		
		//QN
		public RuleCall getCoordinateSystemLogicalCoordinateSystemQNParserRuleCall_9_0_1() { return cCoordinateSystemLogicalCoordinateSystemQNParserRuleCall_9_0_1; }
		
		//('extRefStd:' externalStandardReference=STRING)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'extRefStd:'
		public Keyword getExtRefStdKeyword_10_0() { return cExtRefStdKeyword_10_0; }
		
		//externalStandardReference=STRING
		public Assignment getExternalStandardReferenceAssignment_10_1() { return cExternalStandardReferenceAssignment_10_1; }
		
		//STRING
		public RuleCall getExternalStandardReferenceSTRINGTerminalRuleCall_10_1_0() { return cExternalStandardReferenceSTRINGTerminalRuleCall_10_1_0; }
		
		//('orient:' orientation=STRING)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'orient:'
		public Keyword getOrientKeyword_11_0() { return cOrientKeyword_11_0; }
		
		//orientation=STRING
		public Assignment getOrientationAssignment_11_1() { return cOrientationAssignment_11_1; }
		
		//STRING
		public RuleCall getOrientationSTRINGTerminalRuleCall_11_1_0() { return cOrientationSTRINGTerminalRuleCall_11_1_0; }
		
		//('refPt:' '[' referencePoint+=LogicalReferencePoint+ ']')?
		public Group getGroup_12() { return cGroup_12; }
		
		//'refPt:'
		public Keyword getRefPtKeyword_12_0() { return cRefPtKeyword_12_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_12_1() { return cLeftSquareBracketKeyword_12_1; }
		
		//referencePoint+=LogicalReferencePoint+
		public Assignment getReferencePointAssignment_12_2() { return cReferencePointAssignment_12_2; }
		
		//LogicalReferencePoint
		public RuleCall getReferencePointLogicalReferencePointParserRuleCall_12_2_0() { return cReferencePointLogicalReferencePointParserRuleCall_12_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12_3() { return cRightSquareBracketKeyword_12_3; }
		
		//('![' constraint+=LogicalMeasurementConstraint+ ']')?
		public Group getGroup_13() { return cGroup_13; }
		
		//'!['
		public Keyword getExclamationMarkLeftSquareBracketKeyword_13_0() { return cExclamationMarkLeftSquareBracketKeyword_13_0; }
		
		//constraint+=LogicalMeasurementConstraint+
		public Assignment getConstraintAssignment_13_1() { return cConstraintAssignment_13_1; }
		
		//LogicalMeasurementConstraint
		public RuleCall getConstraintLogicalMeasurementConstraintParserRuleCall_13_1_0() { return cConstraintLogicalMeasurementConstraintParserRuleCall_13_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13_2() { return cRightSquareBracketKeyword_13_2; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_14() { return cRightCurlyBracketSemicolonKeyword_14; }
	}
	public class LogicalMeasurementSystemAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementSystemAxis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMsaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAxisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAxisAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAxisLogicalCoordinateSystemAxisCrossReference_5_0 = (CrossReference)cAxisAssignment_5.eContents().get(0);
		private final RuleCall cAxisLogicalCoordinateSystemAxisQNParserRuleCall_5_0_1 = (RuleCall)cAxisLogicalCoordinateSystemAxisCrossReference_5_0.eContents().get(1);
		private final Keyword cVtuKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDefaultValueTypeUnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cDefaultValueTypeUnitLogicalValueTypeUnitCrossReference_8_0 = (CrossReference)cDefaultValueTypeUnitAssignment_8.eContents().get(0);
		private final RuleCall cDefaultValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_8_0_1 = (RuleCall)cDefaultValueTypeUnitLogicalValueTypeUnitCrossReference_8_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cExclamationMarkLeftSquareBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cConstraintAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cConstraintLogicalMeasurementConstraintParserRuleCall_10_1_0 = (RuleCall)cConstraintAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Keyword cRightCurlyBracketSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		///** A MeasurementSystemAxis establishes additional properties for a CoordinateSystemAxis including units and value types. */
		//LogicalMeasurementSystemAxis:
		//    'msa' name=ID (description=STRING)? '{'
		//        'axis:' axis=[LogicalCoordinateSystemAxis|QN]
		//        'vtu:' '[' defaultValueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']'
		//        ('![' constraint+=LogicalMeasurementConstraint+ ']'    )?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'msa' name=ID (description=STRING)? '{'
		//    'axis:' axis=[LogicalCoordinateSystemAxis|QN]
		//    'vtu:' '[' defaultValueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']'
		//    ('![' constraint+=LogicalMeasurementConstraint+ ']'    )?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'msa'
		public Keyword getMsaKeyword_0() { return cMsaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'axis:'
		public Keyword getAxisKeyword_4() { return cAxisKeyword_4; }
		
		//axis=[LogicalCoordinateSystemAxis|QN]
		public Assignment getAxisAssignment_5() { return cAxisAssignment_5; }
		
		//[LogicalCoordinateSystemAxis|QN]
		public CrossReference getAxisLogicalCoordinateSystemAxisCrossReference_5_0() { return cAxisLogicalCoordinateSystemAxisCrossReference_5_0; }
		
		//QN
		public RuleCall getAxisLogicalCoordinateSystemAxisQNParserRuleCall_5_0_1() { return cAxisLogicalCoordinateSystemAxisQNParserRuleCall_5_0_1; }
		
		//'vtu:'
		public Keyword getVtuKeyword_6() { return cVtuKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//defaultValueTypeUnit+=[LogicalValueTypeUnit|QN]+
		public Assignment getDefaultValueTypeUnitAssignment_8() { return cDefaultValueTypeUnitAssignment_8; }
		
		//[LogicalValueTypeUnit|QN]
		public CrossReference getDefaultValueTypeUnitLogicalValueTypeUnitCrossReference_8_0() { return cDefaultValueTypeUnitLogicalValueTypeUnitCrossReference_8_0; }
		
		//QN
		public RuleCall getDefaultValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_8_0_1() { return cDefaultValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_8_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//('![' constraint+=LogicalMeasurementConstraint+ ']'	)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'!['
		public Keyword getExclamationMarkLeftSquareBracketKeyword_10_0() { return cExclamationMarkLeftSquareBracketKeyword_10_0; }
		
		//constraint+=LogicalMeasurementConstraint+
		public Assignment getConstraintAssignment_10_1() { return cConstraintAssignment_10_1; }
		
		//LogicalMeasurementConstraint
		public RuleCall getConstraintLogicalMeasurementConstraintParserRuleCall_10_1_0() { return cConstraintLogicalMeasurementConstraintParserRuleCall_10_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10_2() { return cRightSquareBracketKeyword_10_2; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_11() { return cRightCurlyBracketSemicolonKeyword_11; }
	}
	public class LogicalReferencePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalReferencePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLandmarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLandmarkAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLandmarkLogicalLandmarkCrossReference_4_0 = (CrossReference)cLandmarkAssignment_4.eContents().get(0);
		private final RuleCall cLandmarkLogicalLandmarkQNParserRuleCall_4_0_1 = (RuleCall)cLandmarkLogicalLandmarkCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReferencePointPartAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReferencePointPartLogicalReferencePointPartParserRuleCall_6_0 = (RuleCall)cReferencePointPartAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///** A ReferencePoint is an identifiable point (landmark) that can be used to provide a basis for locating and/or orienting a MeasurementSystem. */
		//LogicalReferencePoint:
		//    '(' name=ID (description=STRING)?
		//        'landmark:' landmark=[LogicalLandmark|QN]
		//        '[' referencePointPart+=LogicalReferencePointPart+ ']'
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=ID (description=STRING)?
		//    'landmark:' landmark=[LogicalLandmark|QN]
		//    '[' referencePointPart+=LogicalReferencePointPart+ ']'
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'landmark:'
		public Keyword getLandmarkKeyword_3() { return cLandmarkKeyword_3; }
		
		//landmark=[LogicalLandmark|QN]
		public Assignment getLandmarkAssignment_4() { return cLandmarkAssignment_4; }
		
		//[LogicalLandmark|QN]
		public CrossReference getLandmarkLogicalLandmarkCrossReference_4_0() { return cLandmarkLogicalLandmarkCrossReference_4_0; }
		
		//QN
		public RuleCall getLandmarkLogicalLandmarkQNParserRuleCall_4_0_1() { return cLandmarkLogicalLandmarkQNParserRuleCall_4_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//referencePointPart+=LogicalReferencePointPart+
		public Assignment getReferencePointPartAssignment_6() { return cReferencePointPartAssignment_6; }
		
		//LogicalReferencePointPart
		public RuleCall getReferencePointPartLogicalReferencePointPartParserRuleCall_6_0() { return cReferencePointPartLogicalReferencePointPartParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class LogicalReferencePointPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalReferencePointPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAxisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAxisLogicalMeasurementSystemAxisCrossReference_1_0 = (CrossReference)cAxisAssignment_1.eContents().get(0);
		private final RuleCall cAxisLogicalMeasurementSystemAxisQNParserRuleCall_1_0_1 = (RuleCall)cAxisLogicalMeasurementSystemAxisCrossReference_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueTypeUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueTypeUnitLogicalValueTypeUnitCrossReference_3_0 = (CrossReference)cValueTypeUnitAssignment_3.eContents().get(0);
		private final RuleCall cValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_3_0_1 = (RuleCall)cValueTypeUnitLogicalValueTypeUnitCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///** A ReferencePointPart is a value for one ValueTypeUnit in a ValueTypeUnit set that is used to identify a specific point along an axis.  */
		//LogicalReferencePointPart:
		//    '(' (axis=[LogicalMeasurementSystemAxis|QN])?  value=STRING  (valueTypeUnit=[LogicalValueTypeUnit|QN])? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (axis=[LogicalMeasurementSystemAxis|QN])?  value=STRING  (valueTypeUnit=[LogicalValueTypeUnit|QN])? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(axis=[LogicalMeasurementSystemAxis|QN])?
		public Assignment getAxisAssignment_1() { return cAxisAssignment_1; }
		
		//[LogicalMeasurementSystemAxis|QN]
		public CrossReference getAxisLogicalMeasurementSystemAxisCrossReference_1_0() { return cAxisLogicalMeasurementSystemAxisCrossReference_1_0; }
		
		//QN
		public RuleCall getAxisLogicalMeasurementSystemAxisQNParserRuleCall_1_0_1() { return cAxisLogicalMeasurementSystemAxisQNParserRuleCall_1_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//(valueTypeUnit=[LogicalValueTypeUnit|QN])?
		public Assignment getValueTypeUnitAssignment_3() { return cValueTypeUnitAssignment_3; }
		
		//[LogicalValueTypeUnit|QN]
		public CrossReference getValueTypeUnitLogicalValueTypeUnitCrossReference_3_0() { return cValueTypeUnitLogicalValueTypeUnitCrossReference_3_0; }
		
		//QN
		public RuleCall getValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_3_0_1() { return cValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LogicalValueTypeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalValueTypeUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVtuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueTypeLogicalValueTypeCrossReference_1_0 = (CrossReference)cValueTypeAssignment_1.eContents().get(0);
		private final RuleCall cValueTypeLogicalValueTypeQNParserRuleCall_1_0_1 = (RuleCall)cValueTypeLogicalValueTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUnitLogicalUnitCrossReference_2_0 = (CrossReference)cUnitAssignment_2.eContents().get(0);
		private final RuleCall cUnitLogicalUnitQNParserRuleCall_2_0_1 = (RuleCall)cUnitLogicalUnitCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConstraintAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConstraintLogicalConstraintParserRuleCall_5_2_0 = (RuleCall)cConstraintAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** A ValueTypeUnit defines the logical representation of a MeasurementSystemAxis or MeasurementAxis value type in terms of a Unit and ValueType pair. */
		//LogicalValueTypeUnit:
		//    'vtu' valueType=[LogicalValueType|QN] unit=[LogicalUnit|QN] name=ID (description=STRING)?
		//    ('{' '!' constraint=LogicalConstraint '}')?
		//     ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'vtu' valueType=[LogicalValueType|QN] unit=[LogicalUnit|QN] name=ID (description=STRING)?
		//('{' '!' constraint=LogicalConstraint '}')?
		// ';'
		public Group getGroup() { return cGroup; }
		
		//'vtu'
		public Keyword getVtuKeyword_0() { return cVtuKeyword_0; }
		
		//valueType=[LogicalValueType|QN]
		public Assignment getValueTypeAssignment_1() { return cValueTypeAssignment_1; }
		
		//[LogicalValueType|QN]
		public CrossReference getValueTypeLogicalValueTypeCrossReference_1_0() { return cValueTypeLogicalValueTypeCrossReference_1_0; }
		
		//QN
		public RuleCall getValueTypeLogicalValueTypeQNParserRuleCall_1_0_1() { return cValueTypeLogicalValueTypeQNParserRuleCall_1_0_1; }
		
		//unit=[LogicalUnit|QN]
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//[LogicalUnit|QN]
		public CrossReference getUnitLogicalUnitCrossReference_2_0() { return cUnitLogicalUnitCrossReference_2_0; }
		
		//QN
		public RuleCall getUnitLogicalUnitQNParserRuleCall_2_0_1() { return cUnitLogicalUnitQNParserRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//('{' '!' constraint=LogicalConstraint '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_5_1() { return cExclamationMarkKeyword_5_1; }
		
		//constraint=LogicalConstraint
		public Assignment getConstraintAssignment_5_2() { return cConstraintAssignment_5_2; }
		
		//LogicalConstraint
		public RuleCall getConstraintLogicalConstraintParserRuleCall_5_2_0() { return cConstraintLogicalConstraintParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class LogicalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalStringConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalRealRangeConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalIntegerRangeConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicalEnumerationConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** A Constraint limits the set of possible values for the ValueType of a MeasurementSystem or Measurement. */
		//LogicalConstraint:
		//    LogicalStringConstraint |
		//    LogicalRealRangeConstraint | //LogicalRealConstraint | //LogicalRealConstraint has a single inheritance of LogicalRealRangeConstraint - promote that to here
		//    LogicalIntegerRangeConstraint | //LogicalIntegerConstraint | //LogicalIntegerConstraint has single inheritance of LogicalIntegerRangeConstraint
		//    LogicalEnumerationConstraint
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalStringConstraint |
		//LogicalRealRangeConstraint | //LogicalRealConstraint | //LogicalRealConstraint has a single inheritance of LogicalRealRangeConstraint - promote that to here
		//LogicalIntegerRangeConstraint | //LogicalIntegerConstraint | //LogicalIntegerConstraint has single inheritance of LogicalIntegerRangeConstraint
		//LogicalEnumerationConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalStringConstraint
		public RuleCall getLogicalStringConstraintParserRuleCall_0() { return cLogicalStringConstraintParserRuleCall_0; }
		
		//LogicalRealRangeConstraint
		public RuleCall getLogicalRealRangeConstraintParserRuleCall_1() { return cLogicalRealRangeConstraintParserRuleCall_1; }
		
		////LogicalRealConstraint | //LogicalRealConstraint has a single inheritance of LogicalRealRangeConstraint - promote that to here
		//   LogicalIntegerRangeConstraint
		public RuleCall getLogicalIntegerRangeConstraintParserRuleCall_2() { return cLogicalIntegerRangeConstraintParserRuleCall_2; }
		
		////LogicalIntegerConstraint | //LogicalIntegerConstraint has single inheritance of LogicalIntegerRangeConstraint
		//   LogicalEnumerationConstraint
		public RuleCall getLogicalEnumerationConstraintParserRuleCall_3() { return cLogicalEnumerationConstraintParserRuleCall_3; }
	}
	public class LogicalIntegerRangeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalIntegerRangeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIrcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLowerBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowerBoundINTTerminalRuleCall_3_0 = (RuleCall)cLowerBoundAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUpperBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpperBoundINTTerminalRuleCall_5_0 = (RuleCall)cUpperBoundAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///** An IntegerConstraint specifies a defined set of meaningful values for an Integer or Natural. */
		////LogicalIntegerConstraint:
		////    LogicalIntegerRangeConstraint
		////;
		///** An IntegerRangeConstraint specifies a defined range of meaningful values for an Integer or Natural. The “upperBound” is greater than or equal to the “lowerBound”. The defined range is inclusive of the “upperBound” and “lowerBound”. */
		//LogicalIntegerRangeConstraint:
		//    'irc'  name=ID '[' lowerBound=INT ':' upperBound=INT ']' (description=STRING)?  ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'irc'  name=ID '[' lowerBound=INT ':' upperBound=INT ']' (description=STRING)?  ';'
		public Group getGroup() { return cGroup; }
		
		//'irc'
		public Keyword getIrcKeyword_0() { return cIrcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_3() { return cLowerBoundAssignment_3; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_3_0() { return cLowerBoundINTTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_5() { return cUpperBoundAssignment_5; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_5_0() { return cUpperBoundINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class LogicalRealRangeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalRealRangeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRrcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cLowerBoundInclusiveAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cLowerBoundInclusiveLeftSquareBracketKeyword_2_1_0 = (Keyword)cLowerBoundInclusiveAssignment_2_1.eContents().get(0);
		private final Assignment cLowerBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowerBoundFLOATTerminalRuleCall_3_0 = (RuleCall)cLowerBoundAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUpperBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpperBoundFLOATTerminalRuleCall_5_0 = (RuleCall)cUpperBoundAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Assignment cUpperBoundInclusiveAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final Keyword cUpperBoundInclusiveRightSquareBracketKeyword_6_1_0 = (Keyword)cUpperBoundInclusiveAssignment_6_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///** A RealConstraint specifies a defined set of meaningful values for a Real or NonNegativeReal. */
		////LogicalRealConstraint:
		////    LogicalRealRangeConstraint
		////;
		//// TODO: There is a way to default this to handle the include exclude bounds - is this it?
		///** A RealRangeConstraint specifies a defined range of meaningful values for a Real or NonNegativeReal. The “upperBound” is greater than or equal to the “lowerBound”. */
		//LogicalRealRangeConstraint:
		//    'rrc' name=ID ( '(' | lowerBoundInclusive?='[') lowerBound=FLOAT ':' upperBound=FLOAT (')'| upperBoundInclusive?=']') (description=STRING)?  ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rrc' name=ID ( '(' | lowerBoundInclusive?='[') lowerBound=FLOAT ':' upperBound=FLOAT (')'| upperBoundInclusive?=']') (description=STRING)?  ';'
		public Group getGroup() { return cGroup; }
		
		//'rrc'
		public Keyword getRrcKeyword_0() { return cRrcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//( '(' | lowerBoundInclusive?='[')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//lowerBoundInclusive?='['
		public Assignment getLowerBoundInclusiveAssignment_2_1() { return cLowerBoundInclusiveAssignment_2_1; }
		
		//'['
		public Keyword getLowerBoundInclusiveLeftSquareBracketKeyword_2_1_0() { return cLowerBoundInclusiveLeftSquareBracketKeyword_2_1_0; }
		
		//lowerBound=FLOAT
		public Assignment getLowerBoundAssignment_3() { return cLowerBoundAssignment_3; }
		
		//FLOAT
		public RuleCall getLowerBoundFLOATTerminalRuleCall_3_0() { return cLowerBoundFLOATTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//upperBound=FLOAT
		public Assignment getUpperBoundAssignment_5() { return cUpperBoundAssignment_5; }
		
		//FLOAT
		public RuleCall getUpperBoundFLOATTerminalRuleCall_5_0() { return cUpperBoundFLOATTerminalRuleCall_5_0; }
		
		//(')'| upperBoundInclusive?=']')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_0() { return cRightParenthesisKeyword_6_0; }
		
		//upperBoundInclusive?=']'
		public Assignment getUpperBoundInclusiveAssignment_6_1() { return cUpperBoundInclusiveAssignment_6_1; }
		
		//']'
		public Keyword getUpperBoundInclusiveRightSquareBracketKeyword_6_1_0() { return cUpperBoundInclusiveRightSquareBracketKeyword_6_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class LogicalStringConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalStringConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalRegularExpressionConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalFixedLengthStringConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A StringConstraint specifies a defined set of meaningful values for a String */
		//LogicalStringConstraint:
		//    LogicalRegularExpressionConstraint |
		//    LogicalFixedLengthStringConstraint
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalRegularExpressionConstraint |
		//LogicalFixedLengthStringConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalRegularExpressionConstraint
		public RuleCall getLogicalRegularExpressionConstraintParserRuleCall_0() { return cLogicalRegularExpressionConstraintParserRuleCall_0; }
		
		//LogicalFixedLengthStringConstraint
		public RuleCall getLogicalFixedLengthStringConstraintParserRuleCall_1() { return cLogicalFixedLengthStringConstraintParserRuleCall_1; }
	}
	public class LogicalRegularExpressionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalRegularExpressionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** A RegularExpressionConstraint specifies a defined set of meaningful values for a String in the form of a regular expression. */
		//LogicalRegularExpressionConstraint:
		//    'rec' name=ID '[' expression=STRING ']'(description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rec' name=ID '[' expression=STRING ']'(description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'rec'
		public Keyword getRecKeyword_0() { return cRecKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_3_0() { return cExpressionSTRINGTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class LogicalFixedLengthStringConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalFixedLengthStringConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlscKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthINTTerminalRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** A FixedLengthStringConstraint specifies a defined set of meaningful values for a String of a specific fixed length. The “length” attribute defines the fixed length, an integer value greater than 0. */
		//LogicalFixedLengthStringConstraint:
		//    'flsc' name=ID '[' length=INT ']' (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'flsc' name=ID '[' length=INT ']' (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'flsc'
		public Keyword getFlscKeyword_0() { return cFlscKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//length=INT
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_0() { return cLengthINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class LogicalEnumerationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalEnumerationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalEnumerationConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEcKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAllowedValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cAllowedValueLogicalEnumerationLabelCrossReference_4_1_0 = (CrossReference)cAllowedValueAssignment_4_1.eContents().get(0);
		private final RuleCall cAllowedValueLogicalEnumerationLabelQNParserRuleCall_4_1_0_1 = (RuleCall)cAllowedValueLogicalEnumerationLabelCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//// NOTE: While the spec technically allows zero labels, it makes no sense to have a constraint that doesn't
		//// actually constrain anything. It might be in dynamic cases that this list could end up being empty - but
		//// for now we assume it has to have at least 1 value
		///** An EnumerationConstraint identifies a subset of enumerated values (EnumerationLabel) considered valid for an Enumerated value type of a MeasurementAxis. */
		//LogicalEnumerationConstraint :
		//    {LogicalEnumerationConstraint} 'ec' name=ID (description=STRING)? ('[' (allowedValue+=[LogicalEnumerationLabel|QN])+ ']')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalEnumerationConstraint} 'ec' name=ID (description=STRING)? ('[' (allowedValue+=[LogicalEnumerationLabel|QN])+ ']')?
		public Group getGroup() { return cGroup; }
		
		//{LogicalEnumerationConstraint}
		public Action getLogicalEnumerationConstraintAction_0() { return cLogicalEnumerationConstraintAction_0; }
		
		//'ec'
		public Keyword getEcKeyword_1() { return cEcKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//('[' (allowedValue+=[LogicalEnumerationLabel|QN])+ ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//(allowedValue+=[LogicalEnumerationLabel|QN])+
		public Assignment getAllowedValueAssignment_4_1() { return cAllowedValueAssignment_4_1; }
		
		//[LogicalEnumerationLabel|QN]
		public CrossReference getAllowedValueLogicalEnumerationLabelCrossReference_4_1_0() { return cAllowedValueLogicalEnumerationLabelCrossReference_4_1_0; }
		
		//QN
		public RuleCall getAllowedValueLogicalEnumerationLabelQNParserRuleCall_4_1_0_1() { return cAllowedValueLogicalEnumerationLabelQNParserRuleCall_4_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class LogicalMeasurementConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementConstraint");
		private final Assignment cConstraintTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstraintTextSTRINGTerminalRuleCall_0 = (RuleCall)cConstraintTextAssignment.eContents().get(0);
		
		///** A MeasurementConstraint describes the constraints over the axes of a given MeasurementSystem or Measurement or over the value types of a MeasurementSystemAxis or MeasurementAxis. The constraints are described in the “constraintText” attribute. The specific format of “constraintText” is undefined. */
		//LogicalMeasurementConstraint:
		//     constraintText=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//constraintText=STRING
		public Assignment getConstraintTextAssignment() { return cConstraintTextAssignment; }
		
		//STRING
		public RuleCall getConstraintTextSTRINGTerminalRuleCall_0() { return cConstraintTextSTRINGTerminalRuleCall_0; }
	}
	public class LogicalMeasurementSystemConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementSystemConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMscKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceLogicalMeasurementSystemCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceLogicalMeasurementSystemQNParserRuleCall_4_0_1 = (RuleCall)cSourceLogicalMeasurementSystemCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEquationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEquationSTRINGTerminalRuleCall_6_0 = (RuleCall)cEquationAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEquationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEquationSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cEquationAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDestinationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cDestinationLogicalMeasurementSystemCrossReference_9_0 = (CrossReference)cDestinationAssignment_9.eContents().get(0);
		private final RuleCall cDestinationLogicalMeasurementSystemQNParserRuleCall_9_0_1 = (RuleCall)cDestinationLogicalMeasurementSystemCrossReference_9_0.eContents().get(1);
		private final Keyword cLossKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConversionLossDescriptionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConversionLossDescriptionSTRINGTerminalRuleCall_11_0 = (RuleCall)cConversionLossDescriptionAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///** A MeasurementSystemConversion is a relationship between two MeasurementSystems that describes how to transform measured quantities between those MeasurementSystems. The conversion is captured as a set of equations in the “equation” attribute. The specific format of “equation” is undefined. The loss introduced by the conversion equations is captured in the “conversionLossDescription” attribute. The specific format of “conversionLossDescription” is undefined. */
		//LogicalMeasurementSystemConversion:
		//    'msc' name=ID  (description=STRING)? '{'
		//        source=[LogicalMeasurementSystem|QN] '-('equation+=STRING (',' equation+=STRING)? ')>' destination=[LogicalMeasurementSystem|QN]
		//        'loss:' conversionLossDescription=STRING
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'msc' name=ID  (description=STRING)? '{'
		//    source=[LogicalMeasurementSystem|QN] '-('equation+=STRING (',' equation+=STRING)? ')>' destination=[LogicalMeasurementSystem|QN]
		//    'loss:' conversionLossDescription=STRING
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'msc'
		public Keyword getMscKeyword_0() { return cMscKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//source=[LogicalMeasurementSystem|QN]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//[LogicalMeasurementSystem|QN]
		public CrossReference getSourceLogicalMeasurementSystemCrossReference_4_0() { return cSourceLogicalMeasurementSystemCrossReference_4_0; }
		
		//QN
		public RuleCall getSourceLogicalMeasurementSystemQNParserRuleCall_4_0_1() { return cSourceLogicalMeasurementSystemQNParserRuleCall_4_0_1; }
		
		//'-('
		public Keyword getHyphenMinusLeftParenthesisKeyword_5() { return cHyphenMinusLeftParenthesisKeyword_5; }
		
		//equation+=STRING
		public Assignment getEquationAssignment_6() { return cEquationAssignment_6; }
		
		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_6_0() { return cEquationSTRINGTerminalRuleCall_6_0; }
		
		//(',' equation+=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//equation+=STRING
		public Assignment getEquationAssignment_7_1() { return cEquationAssignment_7_1; }
		
		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_7_1_0() { return cEquationSTRINGTerminalRuleCall_7_1_0; }
		
		//')>'
		public Keyword getRightParenthesisGreaterThanSignKeyword_8() { return cRightParenthesisGreaterThanSignKeyword_8; }
		
		//destination=[LogicalMeasurementSystem|QN]
		public Assignment getDestinationAssignment_9() { return cDestinationAssignment_9; }
		
		//[LogicalMeasurementSystem|QN]
		public CrossReference getDestinationLogicalMeasurementSystemCrossReference_9_0() { return cDestinationLogicalMeasurementSystemCrossReference_9_0; }
		
		//QN
		public RuleCall getDestinationLogicalMeasurementSystemQNParserRuleCall_9_0_1() { return cDestinationLogicalMeasurementSystemQNParserRuleCall_9_0_1; }
		
		//'loss:'
		public Keyword getLossKeyword_10() { return cLossKeyword_10; }
		
		//conversionLossDescription=STRING
		public Assignment getConversionLossDescriptionAssignment_11() { return cConversionLossDescriptionAssignment_11; }
		
		//STRING
		public RuleCall getConversionLossDescriptionSTRINGTerminalRuleCall_11_0() { return cConversionLossDescriptionSTRINGTerminalRuleCall_11_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_12() { return cRightCurlyBracketSemicolonKeyword_12; }
	}
	public class LogicalMeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesConceptualObservableCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesConceptualObservableQNParserRuleCall_4_0_1 = (RuleCall)cRealizesConceptualObservableCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributeLogicalMeasurementAttributeParserRuleCall_6_0 = (RuleCall)cAttributeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAxisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMeasurementAxisAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cMeasurementAxisLogicalMeasurementAxisCrossReference_7_2_0 = (CrossReference)cMeasurementAxisAssignment_7_2.eContents().get(0);
		private final RuleCall cMeasurementAxisLogicalMeasurementAxisQNParserRuleCall_7_2_0_1 = (RuleCall)cMeasurementAxisLogicalMeasurementAxisCrossReference_7_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cSysKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMeasurementSystemAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cMeasurementSystemLogicalAbstractMeasurementSystemCrossReference_9_0 = (CrossReference)cMeasurementSystemAssignment_9.eContents().get(0);
		private final RuleCall cMeasurementSystemLogicalAbstractMeasurementSystemQNParserRuleCall_9_0_1 = (RuleCall)cMeasurementSystemLogicalAbstractMeasurementSystemCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cExclamationMarkLeftSquareBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cConstraintAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cConstraintLogicalMeasurementConstraintParserRuleCall_10_1_0 = (RuleCall)cConstraintAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Keyword cRightCurlyBracketSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// TODO: XText doesn't do multiple inheritance. Address this via a ScopeProvider
		//// See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
		//// Use a FilteringScope
		///** An AbstractMeasurement is a Measurement, MeasurementAxis, or a ValueTypeUnit. */
		////LogicalAbstractMeasurement:
		////    LogicalMeasurement |  // Use LogicalComposableElement
		////    LogicalMeasurementAxis | // Use LogicalElement
		////    LogicalValueTypeUnit  //Use LogicalElement
		////;
		///** A Measurement realizes an Observable as a set of quantities that can be recorded for each axis of a MeasurementSystem. A Measurement contains the specific implementation details optionally including an override of the default ValueType and Unit for each axis as well as the constraints over that space for which the MeasurementSystem is valid. */
		//LogicalMeasurement:
		//    'meas' name=ID  (description=STRING)? '->' realizes=[ConceptualObservable|QN] '{'
		//        attribute+=LogicalMeasurementAttribute*
		//        ('axis:' '[' measurementAxis+=[LogicalMeasurementAxis|QN]+ ']')?
		//        'sys:' measurementSystem=[LogicalAbstractMeasurementSystem|QN]
		//        ('![' constraint+=LogicalMeasurementConstraint ']')?
		//        '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'meas' name=ID  (description=STRING)? '->' realizes=[ConceptualObservable|QN] '{'
		//    attribute+=LogicalMeasurementAttribute*
		//    ('axis:' '[' measurementAxis+=[LogicalMeasurementAxis|QN]+ ']')?
		//    'sys:' measurementSystem=[LogicalAbstractMeasurementSystem|QN]
		//    ('![' constraint+=LogicalMeasurementConstraint ']')?
		//    '};'
		public Group getGroup() { return cGroup; }
		
		//'meas'
		public Keyword getMeasKeyword_0() { return cMeasKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[ConceptualObservable|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[ConceptualObservable|QN]
		public CrossReference getRealizesConceptualObservableCrossReference_4_0() { return cRealizesConceptualObservableCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesConceptualObservableQNParserRuleCall_4_0_1() { return cRealizesConceptualObservableQNParserRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//attribute+=LogicalMeasurementAttribute*
		public Assignment getAttributeAssignment_6() { return cAttributeAssignment_6; }
		
		//LogicalMeasurementAttribute
		public RuleCall getAttributeLogicalMeasurementAttributeParserRuleCall_6_0() { return cAttributeLogicalMeasurementAttributeParserRuleCall_6_0; }
		
		//('axis:' '[' measurementAxis+=[LogicalMeasurementAxis|QN]+ ']')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'axis:'
		public Keyword getAxisKeyword_7_0() { return cAxisKeyword_7_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }
		
		//measurementAxis+=[LogicalMeasurementAxis|QN]+
		public Assignment getMeasurementAxisAssignment_7_2() { return cMeasurementAxisAssignment_7_2; }
		
		//[LogicalMeasurementAxis|QN]
		public CrossReference getMeasurementAxisLogicalMeasurementAxisCrossReference_7_2_0() { return cMeasurementAxisLogicalMeasurementAxisCrossReference_7_2_0; }
		
		//QN
		public RuleCall getMeasurementAxisLogicalMeasurementAxisQNParserRuleCall_7_2_0_1() { return cMeasurementAxisLogicalMeasurementAxisQNParserRuleCall_7_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }
		
		//'sys:'
		public Keyword getSysKeyword_8() { return cSysKeyword_8; }
		
		//measurementSystem=[LogicalAbstractMeasurementSystem|QN]
		public Assignment getMeasurementSystemAssignment_9() { return cMeasurementSystemAssignment_9; }
		
		//[LogicalAbstractMeasurementSystem|QN]
		public CrossReference getMeasurementSystemLogicalAbstractMeasurementSystemCrossReference_9_0() { return cMeasurementSystemLogicalAbstractMeasurementSystemCrossReference_9_0; }
		
		//QN
		public RuleCall getMeasurementSystemLogicalAbstractMeasurementSystemQNParserRuleCall_9_0_1() { return cMeasurementSystemLogicalAbstractMeasurementSystemQNParserRuleCall_9_0_1; }
		
		//('![' constraint+=LogicalMeasurementConstraint ']')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'!['
		public Keyword getExclamationMarkLeftSquareBracketKeyword_10_0() { return cExclamationMarkLeftSquareBracketKeyword_10_0; }
		
		//constraint+=LogicalMeasurementConstraint
		public Assignment getConstraintAssignment_10_1() { return cConstraintAssignment_10_1; }
		
		//LogicalMeasurementConstraint
		public RuleCall getConstraintLogicalMeasurementConstraintParserRuleCall_10_1_0() { return cConstraintLogicalMeasurementConstraintParserRuleCall_10_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10_2() { return cRightSquareBracketKeyword_10_2; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_11() { return cRightCurlyBracketSemicolonKeyword_11; }
	}
	public class LogicalMeasurementAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementAxis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRealizesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRealizesConceptualObservableCrossReference_3_1_0 = (CrossReference)cRealizesAssignment_3_1.eContents().get(0);
		private final RuleCall cRealizesConceptualObservableQNParserRuleCall_3_1_0_1 = (RuleCall)cRealizesConceptualObservableCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVtuKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValueTypeUnitAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cValueTypeUnitLogicalValueTypeUnitCrossReference_5_2_0 = (CrossReference)cValueTypeUnitAssignment_5_2.eContents().get(0);
		private final RuleCall cValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_5_2_0_1 = (RuleCall)cValueTypeUnitLogicalValueTypeUnitCrossReference_5_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cMsaxisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMeasurementSystemAxisAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_7_0 = (CrossReference)cMeasurementSystemAxisAssignment_7.eContents().get(0);
		private final RuleCall cMeasurementSystemAxisLogicalMeasurementSystemAxisQNParserRuleCall_7_0_1 = (RuleCall)cMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cExclamationMarkLeftSquareBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cConstraintAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cConstraintLogicalMeasurementConstraintParserRuleCall_8_1_0 = (RuleCall)cConstraintAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Keyword cRightCurlyBracketSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** A MeasurementAxis optionally establishes constraints for a MeasurementSystemAxis and may optionally override its default units and value types. */
		//LogicalMeasurementAxis:
		//    'maxis' name=ID  (description=STRING)? ('->' realizes=[ConceptualObservable|QN])? '{'
		//        ('vtu:' '[' valueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']')?
		//        'msaxis:' measurementSystemAxis=[LogicalMeasurementSystemAxis|QN]
		//        ('![' constraint+=LogicalMeasurementConstraint+ ']')?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'maxis' name=ID  (description=STRING)? ('->' realizes=[ConceptualObservable|QN])? '{'
		//    ('vtu:' '[' valueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']')?
		//    'msaxis:' measurementSystemAxis=[LogicalMeasurementSystemAxis|QN]
		//    ('![' constraint+=LogicalMeasurementConstraint+ ']')?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'maxis'
		public Keyword getMaxisKeyword_0() { return cMaxisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('->' realizes=[ConceptualObservable|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//realizes=[ConceptualObservable|QN]
		public Assignment getRealizesAssignment_3_1() { return cRealizesAssignment_3_1; }
		
		//[ConceptualObservable|QN]
		public CrossReference getRealizesConceptualObservableCrossReference_3_1_0() { return cRealizesConceptualObservableCrossReference_3_1_0; }
		
		//QN
		public RuleCall getRealizesConceptualObservableQNParserRuleCall_3_1_0_1() { return cRealizesConceptualObservableQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('vtu:' '[' valueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'vtu:'
		public Keyword getVtuKeyword_5_0() { return cVtuKeyword_5_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_1() { return cLeftSquareBracketKeyword_5_1; }
		
		//valueTypeUnit+=[LogicalValueTypeUnit|QN]+
		public Assignment getValueTypeUnitAssignment_5_2() { return cValueTypeUnitAssignment_5_2; }
		
		//[LogicalValueTypeUnit|QN]
		public CrossReference getValueTypeUnitLogicalValueTypeUnitCrossReference_5_2_0() { return cValueTypeUnitLogicalValueTypeUnitCrossReference_5_2_0; }
		
		//QN
		public RuleCall getValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_5_2_0_1() { return cValueTypeUnitLogicalValueTypeUnitQNParserRuleCall_5_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
		
		//'msaxis:'
		public Keyword getMsaxisKeyword_6() { return cMsaxisKeyword_6; }
		
		//measurementSystemAxis=[LogicalMeasurementSystemAxis|QN]
		public Assignment getMeasurementSystemAxisAssignment_7() { return cMeasurementSystemAxisAssignment_7; }
		
		//[LogicalMeasurementSystemAxis|QN]
		public CrossReference getMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_7_0() { return cMeasurementSystemAxisLogicalMeasurementSystemAxisCrossReference_7_0; }
		
		//QN
		public RuleCall getMeasurementSystemAxisLogicalMeasurementSystemAxisQNParserRuleCall_7_0_1() { return cMeasurementSystemAxisLogicalMeasurementSystemAxisQNParserRuleCall_7_0_1; }
		
		//('![' constraint+=LogicalMeasurementConstraint+ ']')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'!['
		public Keyword getExclamationMarkLeftSquareBracketKeyword_8_0() { return cExclamationMarkLeftSquareBracketKeyword_8_0; }
		
		//constraint+=LogicalMeasurementConstraint+
		public Assignment getConstraintAssignment_8_1() { return cConstraintAssignment_8_1; }
		
		//LogicalMeasurementConstraint
		public RuleCall getConstraintLogicalMeasurementConstraintParserRuleCall_8_1_0() { return cConstraintLogicalMeasurementConstraintParserRuleCall_8_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_2() { return cRightSquareBracketKeyword_8_2; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_9() { return cRightCurlyBracketSemicolonKeyword_9; }
	}
	public class LogicalMeasurementAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLogicalMeasurementCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLogicalMeasurementQNParserRuleCall_0_0_1 = (RuleCall)cTypeLogicalMeasurementCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///** A MeasurementAttribute is supplemental data associated with a Measurement.  */
		//LogicalMeasurementAttribute:
		//    type=[LogicalMeasurement|QN] rolename=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[LogicalMeasurement|QN] rolename=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=[LogicalMeasurement|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[LogicalMeasurement|QN]
		public CrossReference getTypeLogicalMeasurementCrossReference_0_0() { return cTypeLogicalMeasurementCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeLogicalMeasurementQNParserRuleCall_0_0_1() { return cTypeLogicalMeasurementQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LogicalMeasurementConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalMeasurementConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceLogicalMeasurementSystemCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceLogicalMeasurementSystemQNParserRuleCall_4_0_1 = (RuleCall)cSourceLogicalMeasurementSystemCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEquationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEquationSTRINGTerminalRuleCall_6_0 = (RuleCall)cEquationAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEquationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEquationSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cEquationAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDestinationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cDestinationLogicalMeasurementSystemCrossReference_9_0 = (CrossReference)cDestinationAssignment_9.eContents().get(0);
		private final RuleCall cDestinationLogicalMeasurementSystemQNParserRuleCall_9_0_1 = (RuleCall)cDestinationLogicalMeasurementSystemCrossReference_9_0.eContents().get(1);
		private final Keyword cLossKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConversionLossDescriptionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConversionLossDescriptionSTRINGTerminalRuleCall_11_0 = (RuleCall)cConversionLossDescriptionAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///** A MeasurementConversion is a relationship between two Measurements that describes how to transform measured quantities between those Measurements. The conversion is captured as a set of equations in the “equation” attribute. The specific format of “equation” is undefined. The loss introduced by the conversion equations is captured in the “conversionLossDescription” attribute. The specific format of “conversionLossDescription” is undefined. */
		//LogicalMeasurementConversion:
		//    'mc' name=ID  (description=STRING)? '{'
		//        source=[LogicalMeasurementSystem|QN] '-(' equation+=STRING (',' equation+=STRING)? ')>' destination=[LogicalMeasurementSystem|QN]
		//        'loss:' conversionLossDescription=STRING
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mc' name=ID  (description=STRING)? '{'
		//    source=[LogicalMeasurementSystem|QN] '-(' equation+=STRING (',' equation+=STRING)? ')>' destination=[LogicalMeasurementSystem|QN]
		//    'loss:' conversionLossDescription=STRING
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'mc'
		public Keyword getMcKeyword_0() { return cMcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//source=[LogicalMeasurementSystem|QN]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//[LogicalMeasurementSystem|QN]
		public CrossReference getSourceLogicalMeasurementSystemCrossReference_4_0() { return cSourceLogicalMeasurementSystemCrossReference_4_0; }
		
		//QN
		public RuleCall getSourceLogicalMeasurementSystemQNParserRuleCall_4_0_1() { return cSourceLogicalMeasurementSystemQNParserRuleCall_4_0_1; }
		
		//'-('
		public Keyword getHyphenMinusLeftParenthesisKeyword_5() { return cHyphenMinusLeftParenthesisKeyword_5; }
		
		//equation+=STRING
		public Assignment getEquationAssignment_6() { return cEquationAssignment_6; }
		
		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_6_0() { return cEquationSTRINGTerminalRuleCall_6_0; }
		
		//(',' equation+=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//equation+=STRING
		public Assignment getEquationAssignment_7_1() { return cEquationAssignment_7_1; }
		
		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_7_1_0() { return cEquationSTRINGTerminalRuleCall_7_1_0; }
		
		//')>'
		public Keyword getRightParenthesisGreaterThanSignKeyword_8() { return cRightParenthesisGreaterThanSignKeyword_8; }
		
		//destination=[LogicalMeasurementSystem|QN]
		public Assignment getDestinationAssignment_9() { return cDestinationAssignment_9; }
		
		//[LogicalMeasurementSystem|QN]
		public CrossReference getDestinationLogicalMeasurementSystemCrossReference_9_0() { return cDestinationLogicalMeasurementSystemCrossReference_9_0; }
		
		//QN
		public RuleCall getDestinationLogicalMeasurementSystemQNParserRuleCall_9_0_1() { return cDestinationLogicalMeasurementSystemQNParserRuleCall_9_0_1; }
		
		//'loss:'
		public Keyword getLossKeyword_10() { return cLossKeyword_10; }
		
		//conversionLossDescription=STRING
		public Assignment getConversionLossDescriptionAssignment_11() { return cConversionLossDescriptionAssignment_11; }
		
		//STRING
		public RuleCall getConversionLossDescriptionSTRINGTerminalRuleCall_11_0() { return cConversionLossDescriptionSTRINGTerminalRuleCall_11_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_12() { return cRightCurlyBracketSemicolonKeyword_12; }
	}
	public class LogicalComposableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalComposableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalMeasurementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A logical ComposableElement is a logical Element that is allowed to participate in a Composition relationship. In other words, these are the logical Elements that may be a characteristic of a logical Entity. */
		//LogicalComposableElement:
		//    LogicalEntity |
		//    LogicalMeasurement  // Also derived from AbstractMeasurement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalEntity |
		//LogicalMeasurement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalEntity
		public RuleCall getLogicalEntityParserRuleCall_0() { return cLogicalEntityParserRuleCall_0; }
		
		//LogicalMeasurement
		public RuleCall getLogicalMeasurementParserRuleCall_1() { return cLogicalMeasurementParserRuleCall_1; }
	}
	public class LogicalCharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalCharacteristic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalCompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalParticipantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** Either a LogicalComposition or a LogicalParticipant.
		// * A logical Characteristic contributes to the uniqueness of a logical Entity. The “rolename” attribute defines the name of the logical Characteristic within the scope of the logical Entity. The “lowerBound” and “upperBound” attributes define the multiplicity of the composed Characteristic. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
		//LogicalCharacteristic:
		//    LogicalComposition |
		//    LogicalParticipant
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalComposition |
		//LogicalParticipant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalComposition
		public RuleCall getLogicalCompositionParserRuleCall_0() { return cLogicalCompositionParserRuleCall_0; }
		
		//LogicalParticipant
		public RuleCall getLogicalParticipantParserRuleCall_1() { return cLogicalParticipantParserRuleCall_1; }
	}
	public class LogicalEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLentityKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cDescriptionAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cSpecializesLogicalEntityCrossReference_0_3_1_0 = (CrossReference)cSpecializesAssignment_0_3_1.eContents().get(0);
		private final RuleCall cSpecializesLogicalEntityQNParserRuleCall_0_3_1_0_1 = (RuleCall)cSpecializesLogicalEntityCrossReference_0_3_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cRealizesAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cRealizesConceptualEntityCrossReference_0_5_0 = (CrossReference)cRealizesAssignment_0_5.eContents().get(0);
		private final RuleCall cRealizesConceptualEntityQNParserRuleCall_0_5_0_1 = (RuleCall)cRealizesConceptualEntityCrossReference_0_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cCompositionAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cCompositionLogicalCompositionParserRuleCall_0_7_0 = (RuleCall)cCompositionAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cLogicalAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A logical Entity “realizes” a conceptual Entity in terms of Measurements and other logical Entities. Since a logical Entity is built from logical Measurements, it is independent of any specific platform data representation. A logical Entity's composition hierarchy is consistent with the composition hierarchy of the conceptual Entity that it realizes. The logical Entity’s composed Entities realize one to one the conceptual Entity’s composed Entities; the logical Entity’s composed Measurements realize many to one the conceptual Entity’s composed Observables.  */
		//LogicalEntity:
		//    'lentity' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
		//        composition+=LogicalComposition*
		//    '};'
		//    | LogicalAssociation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lentity' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
		//    composition+=LogicalComposition*
		//'};'
		//| LogicalAssociation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'lentity' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
		//    composition+=LogicalComposition*
		//'};'
		public Group getGroup_0() { return cGroup_0; }
		
		//'lentity'
		public Keyword getLentityKeyword_0_0() { return cLentityKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_0_2() { return cDescriptionAssignment_0_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_2_0() { return cDescriptionSTRINGTerminalRuleCall_0_2_0; }
		
		//(':' specializes=[LogicalEntity|QN])?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//':'
		public Keyword getColonKeyword_0_3_0() { return cColonKeyword_0_3_0; }
		
		//specializes=[LogicalEntity|QN]
		public Assignment getSpecializesAssignment_0_3_1() { return cSpecializesAssignment_0_3_1; }
		
		//[LogicalEntity|QN]
		public CrossReference getSpecializesLogicalEntityCrossReference_0_3_1_0() { return cSpecializesLogicalEntityCrossReference_0_3_1_0; }
		
		//QN
		public RuleCall getSpecializesLogicalEntityQNParserRuleCall_0_3_1_0_1() { return cSpecializesLogicalEntityQNParserRuleCall_0_3_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_4() { return cHyphenMinusGreaterThanSignKeyword_0_4; }
		
		//realizes=[ConceptualEntity|QN]
		public Assignment getRealizesAssignment_0_5() { return cRealizesAssignment_0_5; }
		
		//[ConceptualEntity|QN]
		public CrossReference getRealizesConceptualEntityCrossReference_0_5_0() { return cRealizesConceptualEntityCrossReference_0_5_0; }
		
		//QN
		public RuleCall getRealizesConceptualEntityQNParserRuleCall_0_5_0_1() { return cRealizesConceptualEntityQNParserRuleCall_0_5_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//composition+=LogicalComposition*
		public Assignment getCompositionAssignment_0_7() { return cCompositionAssignment_0_7; }
		
		//LogicalComposition
		public RuleCall getCompositionLogicalCompositionParserRuleCall_0_7_0() { return cCompositionLogicalCompositionParserRuleCall_0_7_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_0_8() { return cRightCurlyBracketSemicolonKeyword_0_8; }
		
		//LogicalAssociation
		public RuleCall getLogicalAssociationParserRuleCall_1() { return cLogicalAssociationParserRuleCall_1; }
	}
	public class LogicalCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLogicalComposableElementCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLogicalComposableElementQNParserRuleCall_0_0_1 = (RuleCall)cTypeLogicalComposableElementCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecializesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecializesLogicalCharacteristicCrossReference_4_1_0 = (CrossReference)cSpecializesAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecializesLogicalCharacteristicQNParserRuleCall_4_1_0_1 = (RuleCall)cSpecializesLogicalCharacteristicCrossReference_4_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRealizesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRealizesConceptualCompositionCrossReference_6_0 = (CrossReference)cRealizesAssignment_6.eContents().get(0);
		private final RuleCall cRealizesConceptualCompositionQNParserRuleCall_6_0_1 = (RuleCall)cRealizesConceptualCompositionCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A logical Composition is the mechanism that allows logical Entities to be constructed from other logical ComposableElements. The “type” of a Composition is the ComposableElement being used to construct the logical Entity. The “lowerBound” and “upperBound” define the multiplicity of the composed logical Entity. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
		//LogicalComposition:
		//    type=[LogicalComposableElement|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[LogicalCharacteristic|QN])?  '->' realizes=[ConceptualComposition|QN] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[LogicalComposableElement|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[LogicalCharacteristic|QN])?  '->' realizes=[ConceptualComposition|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//type=[LogicalComposableElement|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[LogicalComposableElement|QN]
		public CrossReference getTypeLogicalComposableElementCrossReference_0_0() { return cTypeLogicalComposableElementCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeLogicalComposableElementQNParserRuleCall_0_0_1() { return cTypeLogicalComposableElementQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//('[' lowerBound=INT ':' upperBound=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_2_1_0() { return cLowerBoundINTTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_3_0() { return cUpperBoundINTTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//(':' specializes=[LogicalCharacteristic|QN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//specializes=[LogicalCharacteristic|QN]
		public Assignment getSpecializesAssignment_4_1() { return cSpecializesAssignment_4_1; }
		
		//[LogicalCharacteristic|QN]
		public CrossReference getSpecializesLogicalCharacteristicCrossReference_4_1_0() { return cSpecializesLogicalCharacteristicCrossReference_4_1_0; }
		
		//QN
		public RuleCall getSpecializesLogicalCharacteristicQNParserRuleCall_4_1_0_1() { return cSpecializesLogicalCharacteristicQNParserRuleCall_4_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//realizes=[ConceptualComposition|QN]
		public Assignment getRealizesAssignment_6() { return cRealizesAssignment_6; }
		
		//[ConceptualComposition|QN]
		public CrossReference getRealizesConceptualCompositionCrossReference_6_0() { return cRealizesConceptualCompositionCrossReference_6_0; }
		
		//QN
		public RuleCall getRealizesConceptualCompositionQNParserRuleCall_6_0_1() { return cRealizesConceptualCompositionQNParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class LogicalAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLassocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSpecializesLogicalEntityCrossReference_3_1_0 = (CrossReference)cSpecializesAssignment_3_1.eContents().get(0);
		private final RuleCall cSpecializesLogicalEntityQNParserRuleCall_3_1_0_1 = (RuleCall)cSpecializesLogicalEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRealizesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRealizesConceptualEntityCrossReference_5_0 = (CrossReference)cRealizesAssignment_5.eContents().get(0);
		private final RuleCall cRealizesConceptualEntityQNParserRuleCall_5_0_1 = (RuleCall)cRealizesConceptualEntityCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCompositionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompositionLogicalCompositionParserRuleCall_7_0 = (RuleCall)cCompositionAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cParticipantsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cParticipantAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cParticipantLogicalParticipantParserRuleCall_8_2_0 = (RuleCall)cParticipantAssignment_8_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** A logical Association represents a relationship between two or more logical Entities. The logical Entities participating in the logical Association may be specified locally or in its generalized types. In addition, there may be one or more logical ComposableElements that characterize the relationship. Logical Associations are logical Entities that may also participate in other logical Associations. */
		//LogicalAssociation:
		//    'lassoc' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
		//        composition+=LogicalComposition*
		//        // While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
		//        // Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
		//        ('participants:' '[' participant+=LogicalParticipant+ ']')?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lassoc' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
		//    composition+=LogicalComposition*
		//    // While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
		//    // Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
		//    ('participants:' '[' participant+=LogicalParticipant+ ']')?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'lassoc'
		public Keyword getLassocKeyword_0() { return cLassocKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(':' specializes=[LogicalEntity|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//specializes=[LogicalEntity|QN]
		public Assignment getSpecializesAssignment_3_1() { return cSpecializesAssignment_3_1; }
		
		//[LogicalEntity|QN]
		public CrossReference getSpecializesLogicalEntityCrossReference_3_1_0() { return cSpecializesLogicalEntityCrossReference_3_1_0; }
		
		//QN
		public RuleCall getSpecializesLogicalEntityQNParserRuleCall_3_1_0_1() { return cSpecializesLogicalEntityQNParserRuleCall_3_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//realizes=[ConceptualEntity|QN]
		public Assignment getRealizesAssignment_5() { return cRealizesAssignment_5; }
		
		//[ConceptualEntity|QN]
		public CrossReference getRealizesConceptualEntityCrossReference_5_0() { return cRealizesConceptualEntityCrossReference_5_0; }
		
		//QN
		public RuleCall getRealizesConceptualEntityQNParserRuleCall_5_0_1() { return cRealizesConceptualEntityQNParserRuleCall_5_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//composition+=LogicalComposition*
		public Assignment getCompositionAssignment_7() { return cCompositionAssignment_7; }
		
		//LogicalComposition
		public RuleCall getCompositionLogicalCompositionParserRuleCall_7_0() { return cCompositionLogicalCompositionParserRuleCall_7_0; }
		
		//// While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
		//// Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
		//('participants:' '[' participant+=LogicalParticipant+ ']')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'participants:'
		public Keyword getParticipantsKeyword_8_0() { return cParticipantsKeyword_8_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//participant+=LogicalParticipant+
		public Assignment getParticipantAssignment_8_2() { return cParticipantAssignment_8_2; }
		
		//LogicalParticipant
		public RuleCall getParticipantLogicalParticipantParserRuleCall_8_2_0() { return cParticipantLogicalParticipantParserRuleCall_8_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_3() { return cRightSquareBracketKeyword_8_3; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_9() { return cRightCurlyBracketSemicolonKeyword_9; }
	}
	public class LogicalParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalParticipant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLogicalEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLogicalEntityQNParserRuleCall_0_0_1 = (RuleCall)cTypeLogicalEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecializesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecializesLogicalCharacteristicCrossReference_4_1_0 = (CrossReference)cSpecializesAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecializesLogicalCharacteristicQNParserRuleCall_4_1_0_1 = (RuleCall)cSpecializesLogicalCharacteristicCrossReference_4_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRealizesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRealizesConceptualParticipantCrossReference_6_0 = (CrossReference)cRealizesAssignment_6.eContents().get(0);
		private final RuleCall cRealizesConceptualParticipantQNParserRuleCall_6_0_1 = (RuleCall)cRealizesConceptualParticipantCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSourceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSourceLowerBoundAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSourceLowerBoundINTTerminalRuleCall_10_0 = (RuleCall)cSourceLowerBoundAssignment_10.eContents().get(0);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSourceUpperBoundAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cSourceUpperBoundINTTerminalRuleCall_12_0 = (RuleCall)cSourceUpperBoundAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cPathKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cPathAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cPathLogicalPathNodeParserRuleCall_14_1_0 = (RuleCall)cPathAssignment_14_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		///** A logical Participant is the mechanism that allows a logical Association to be constructed between two or more logical Entities. The “type” of a logical Participant is the logical Entity being used to construct the logical Association. The “sourceLowerBound” and “sourceUpperBound” attributes define the multiplicity of the logical Association relative to the Participant. A “sourceUpperBound” multiplicity of –1 represents an unbounded sequence. The “path” attribute of the Participant describes the chain of entity characteristics to traverse to reach the subject of the association beginning with the entity referenced by the “type” attribute. */
		//LogicalParticipant:
		//    type=[LogicalEntity|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[LogicalCharacteristic|QN])?  '->' realizes=[ConceptualParticipant|QN] '{'
		//        'source:' '[' sourceLowerBound=INT ':' sourceUpperBound=INT ']'
		//        ('path:' path=LogicalPathNode )?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[LogicalEntity|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[LogicalCharacteristic|QN])?  '->' realizes=[ConceptualParticipant|QN] '{'
		//    'source:' '[' sourceLowerBound=INT ':' sourceUpperBound=INT ']'
		//    ('path:' path=LogicalPathNode )?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//type=[LogicalEntity|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[LogicalEntity|QN]
		public CrossReference getTypeLogicalEntityCrossReference_0_0() { return cTypeLogicalEntityCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeLogicalEntityQNParserRuleCall_0_0_1() { return cTypeLogicalEntityQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//('[' lowerBound=INT ':' upperBound=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_2_1_0() { return cLowerBoundINTTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_3_0() { return cUpperBoundINTTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//(':' specializes=[LogicalCharacteristic|QN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//specializes=[LogicalCharacteristic|QN]
		public Assignment getSpecializesAssignment_4_1() { return cSpecializesAssignment_4_1; }
		
		//[LogicalCharacteristic|QN]
		public CrossReference getSpecializesLogicalCharacteristicCrossReference_4_1_0() { return cSpecializesLogicalCharacteristicCrossReference_4_1_0; }
		
		//QN
		public RuleCall getSpecializesLogicalCharacteristicQNParserRuleCall_4_1_0_1() { return cSpecializesLogicalCharacteristicQNParserRuleCall_4_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//realizes=[ConceptualParticipant|QN]
		public Assignment getRealizesAssignment_6() { return cRealizesAssignment_6; }
		
		//[ConceptualParticipant|QN]
		public CrossReference getRealizesConceptualParticipantCrossReference_6_0() { return cRealizesConceptualParticipantCrossReference_6_0; }
		
		//QN
		public RuleCall getRealizesConceptualParticipantQNParserRuleCall_6_0_1() { return cRealizesConceptualParticipantQNParserRuleCall_6_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//'source:'
		public Keyword getSourceKeyword_8() { return cSourceKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//sourceLowerBound=INT
		public Assignment getSourceLowerBoundAssignment_10() { return cSourceLowerBoundAssignment_10; }
		
		//INT
		public RuleCall getSourceLowerBoundINTTerminalRuleCall_10_0() { return cSourceLowerBoundINTTerminalRuleCall_10_0; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//sourceUpperBound=INT
		public Assignment getSourceUpperBoundAssignment_12() { return cSourceUpperBoundAssignment_12; }
		
		//INT
		public RuleCall getSourceUpperBoundINTTerminalRuleCall_12_0() { return cSourceUpperBoundINTTerminalRuleCall_12_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
		
		//('path:' path=LogicalPathNode )?
		public Group getGroup_14() { return cGroup_14; }
		
		//'path:'
		public Keyword getPathKeyword_14_0() { return cPathKeyword_14_0; }
		
		//path=LogicalPathNode
		public Assignment getPathAssignment_14_1() { return cPathAssignment_14_1; }
		
		//LogicalPathNode
		public RuleCall getPathLogicalPathNodeParserRuleCall_14_1_0() { return cPathLogicalPathNodeParserRuleCall_14_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_15() { return cRightCurlyBracketSemicolonKeyword_15; }
	}
	public class LogicalPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalPathNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalParticipantPathNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalCharacteristicPathNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A logical PathNode is a single element in a chain that collectively forms a path specification. */
		//LogicalPathNode:
		//    LogicalParticipantPathNode |
		//    LogicalCharacteristicPathNode
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalParticipantPathNode |
		//LogicalCharacteristicPathNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalParticipantPathNode
		public RuleCall getLogicalParticipantPathNodeParserRuleCall_0() { return cLogicalParticipantPathNodeParserRuleCall_0; }
		
		//LogicalCharacteristicPathNode
		public RuleCall getLogicalCharacteristicPathNodeParserRuleCall_1() { return cLogicalCharacteristicPathNodeParserRuleCall_1; }
	}
	public class LogicalParticipantPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalParticipantPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectedParticipantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProjectedParticipantLogicalParticipantCrossReference_1_0 = (CrossReference)cProjectedParticipantAssignment_1.eContents().get(0);
		private final RuleCall cProjectedParticipantLogicalParticipantQNParserRuleCall_1_0_1 = (RuleCall)cProjectedParticipantLogicalParticipantCrossReference_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeLogicalPathNodeParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		///** A logical ParticipantPathNode is a logical PathNode that selects a Participant that references an Entity. This provides a mechanism for reverse navigation from an Entity that participates in an Association back to the Association. */
		//LogicalParticipantPathNode:
		//    '/' projectedParticipant=[LogicalParticipant|QN]  ( node=LogicalPathNode)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'/' projectedParticipant=[LogicalParticipant|QN]  ( node=LogicalPathNode)
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//projectedParticipant=[LogicalParticipant|QN]
		public Assignment getProjectedParticipantAssignment_1() { return cProjectedParticipantAssignment_1; }
		
		//[LogicalParticipant|QN]
		public CrossReference getProjectedParticipantLogicalParticipantCrossReference_1_0() { return cProjectedParticipantLogicalParticipantCrossReference_1_0; }
		
		//QN
		public RuleCall getProjectedParticipantLogicalParticipantQNParserRuleCall_1_0_1() { return cProjectedParticipantLogicalParticipantQNParserRuleCall_1_0_1; }
		
		//( node=LogicalPathNode)
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//LogicalPathNode
		public RuleCall getNodeLogicalPathNodeParserRuleCall_2_0() { return cNodeLogicalPathNodeParserRuleCall_2_0; }
	}
	public class LogicalCharacteristicPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalCharacteristicPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectedCharacteristicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProjectedCharacteristicLogicalCharacteristicCrossReference_1_0 = (CrossReference)cProjectedCharacteristicAssignment_1.eContents().get(0);
		private final RuleCall cProjectedCharacteristicLogicalCharacteristicQNParserRuleCall_1_0_1 = (RuleCall)cProjectedCharacteristicLogicalCharacteristicCrossReference_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeLogicalPathNodeParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		///** A logical CharacteristicPathNode is a logical PathNode that selects a logical Characteristic which is directly contained in a logical Entity or Association. */
		//LogicalCharacteristicPathNode:
		//    '#' projectedCharacteristic=[LogicalCharacteristic|QN]  ( node=LogicalPathNode)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' projectedCharacteristic=[LogicalCharacteristic|QN]  ( node=LogicalPathNode)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//projectedCharacteristic=[LogicalCharacteristic|QN]
		public Assignment getProjectedCharacteristicAssignment_1() { return cProjectedCharacteristicAssignment_1; }
		
		//[LogicalCharacteristic|QN]
		public CrossReference getProjectedCharacteristicLogicalCharacteristicCrossReference_1_0() { return cProjectedCharacteristicLogicalCharacteristicCrossReference_1_0; }
		
		//QN
		public RuleCall getProjectedCharacteristicLogicalCharacteristicQNParserRuleCall_1_0_1() { return cProjectedCharacteristicLogicalCharacteristicQNParserRuleCall_1_0_1; }
		
		//( node=LogicalPathNode)
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//LogicalPathNode
		public RuleCall getNodeLogicalPathNodeParserRuleCall_2_0() { return cNodeLogicalPathNodeParserRuleCall_2_0; }
	}
	public class LogicalViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalView");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalCompositeQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A logical View is a logical Query or a logical CompositeQuery. */
		//LogicalView:
		//    LogicalQuery |
		//    LogicalCompositeQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalQuery |
		//LogicalCompositeQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalQuery
		public RuleCall getLogicalQueryParserRuleCall_0() { return cLogicalQueryParserRuleCall_0; }
		
		//LogicalCompositeQuery
		public RuleCall getLogicalCompositeQueryParserRuleCall_1() { return cLogicalCompositeQueryParserRuleCall_1; }
	}
	public class LogicalQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLqueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRealizesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRealizesConceptualQueryCrossReference_3_1_0 = (CrossReference)cRealizesAssignment_3_1.eContents().get(0);
		private final RuleCall cRealizesConceptualQueryQNParserRuleCall_3_1_0_1 = (RuleCall)cRealizesConceptualQueryCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSpecKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSpecificationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSpecificationSTRINGTerminalRuleCall_6_0 = (RuleCall)cSpecificationAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A logical Query is a specification that defines the content of logical View as a set of logical Characteristics projected from a selected set of related logical Entities. The “specification” attribute captures the specification of a Query as defined by the Query grammar. */
		//LogicalQuery:
		//    'lquery' name=ID  (description=STRING)? ('->' realizes=[ConceptualQuery|QN])? '{'
		//        'spec:' specification=STRING
		//        '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lquery' name=ID  (description=STRING)? ('->' realizes=[ConceptualQuery|QN])? '{'
		//    'spec:' specification=STRING
		//    '};'
		public Group getGroup() { return cGroup; }
		
		//'lquery'
		public Keyword getLqueryKeyword_0() { return cLqueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('->' realizes=[ConceptualQuery|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//realizes=[ConceptualQuery|QN]
		public Assignment getRealizesAssignment_3_1() { return cRealizesAssignment_3_1; }
		
		//[ConceptualQuery|QN]
		public CrossReference getRealizesConceptualQueryCrossReference_3_1_0() { return cRealizesConceptualQueryCrossReference_3_1_0; }
		
		//QN
		public RuleCall getRealizesConceptualQueryQNParserRuleCall_3_1_0_1() { return cRealizesConceptualQueryQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'spec:'
		public Keyword getSpecKeyword_5() { return cSpecKeyword_5; }
		
		//specification=STRING
		public Assignment getSpecificationAssignment_6() { return cSpecificationAssignment_6; }
		
		//STRING
		public RuleCall getSpecificationSTRINGTerminalRuleCall_6_0() { return cSpecificationSTRINGTerminalRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class LogicalCompositeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalCompositeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLcqueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRealizesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRealizesConceptualCompositeQueryCrossReference_3_1_0 = (CrossReference)cRealizesAssignment_3_1.eContents().get(0);
		private final RuleCall cRealizesConceptualCompositeQueryQNParserRuleCall_3_1_0_1 = (RuleCall)cRealizesConceptualCompositeQueryCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIsUnionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIsUnionIsUnionKeyword_5_0 = (Keyword)cIsUnionAssignment_5.eContents().get(0);
		private final Assignment cCompositionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCompositionLogicalQueryCompositionParserRuleCall_6_0 = (RuleCall)cCompositionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A logical CompositeQuery is a collection of two or more logical Views. The “isUnion” attribute specifies whether the composed Views are intended to be mutually exclusive or not. */
		//LogicalCompositeQuery:
		//    'lcquery' name=ID  (description=STRING)? ('->' realizes=[ConceptualCompositeQuery|QN])? '{'
		//        isUnion?='isUnion'
		//        composition+=LogicalQueryComposition
		//        '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lcquery' name=ID  (description=STRING)? ('->' realizes=[ConceptualCompositeQuery|QN])? '{'
		//    isUnion?='isUnion'
		//    composition+=LogicalQueryComposition
		//    '};'
		public Group getGroup() { return cGroup; }
		
		//'lcquery'
		public Keyword getLcqueryKeyword_0() { return cLcqueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('->' realizes=[ConceptualCompositeQuery|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//realizes=[ConceptualCompositeQuery|QN]
		public Assignment getRealizesAssignment_3_1() { return cRealizesAssignment_3_1; }
		
		//[ConceptualCompositeQuery|QN]
		public CrossReference getRealizesConceptualCompositeQueryCrossReference_3_1_0() { return cRealizesConceptualCompositeQueryCrossReference_3_1_0; }
		
		//QN
		public RuleCall getRealizesConceptualCompositeQueryQNParserRuleCall_3_1_0_1() { return cRealizesConceptualCompositeQueryQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//isUnion?='isUnion'
		public Assignment getIsUnionAssignment_5() { return cIsUnionAssignment_5; }
		
		//'isUnion'
		public Keyword getIsUnionIsUnionKeyword_5_0() { return cIsUnionIsUnionKeyword_5_0; }
		
		//composition+=LogicalQueryComposition
		public Assignment getCompositionAssignment_6() { return cCompositionAssignment_6; }
		
		//LogicalQueryComposition
		public RuleCall getCompositionLogicalQueryCompositionParserRuleCall_6_0() { return cCompositionLogicalQueryCompositionParserRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class LogicalQueryCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.LogicalQueryComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLogicalViewCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLogicalViewQNParserRuleCall_0_0_1 = (RuleCall)cTypeLogicalViewCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRealizesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRealizesConceptualQueryCompositionCrossReference_2_1_0 = (CrossReference)cRealizesAssignment_2_1.eContents().get(0);
		private final RuleCall cRealizesConceptualQueryCompositionQNParserRuleCall_2_1_0_1 = (RuleCall)cRealizesConceptualQueryCompositionCrossReference_2_1_0.eContents().get(1);
		
		///** A logical QueryComposition is the mechanism that allows a logical CompositeQuery to be constructed from logical Queries and other logical CompositeQueries. The “rolename” attribute defines the name of the composed logical View within the scope of the composing logical CompositeQuery. The “type” of a logical QueryComposition is the logical View being used to construct the logical CompositeQuery. */
		//LogicalQueryComposition:
		//    type=[LogicalView|QN] rolename=ID ( '->' realizes=[ConceptualQueryComposition|QN])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[LogicalView|QN] rolename=ID ( '->' realizes=[ConceptualQueryComposition|QN])?
		public Group getGroup() { return cGroup; }
		
		//type=[LogicalView|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[LogicalView|QN]
		public CrossReference getTypeLogicalViewCrossReference_0_0() { return cTypeLogicalViewCrossReference_0_0; }
		
		//QN
		public RuleCall getTypeLogicalViewQNParserRuleCall_0_0_1() { return cTypeLogicalViewQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//( '->' realizes=[ConceptualQueryComposition|QN])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//realizes=[ConceptualQueryComposition|QN]
		public Assignment getRealizesAssignment_2_1() { return cRealizesAssignment_2_1; }
		
		//[ConceptualQueryComposition|QN]
		public CrossReference getRealizesConceptualQueryCompositionCrossReference_2_1_0() { return cRealizesConceptualQueryCompositionCrossReference_2_1_0; }
		
		//QN
		public RuleCall getRealizesConceptualQueryCompositionQNParserRuleCall_2_1_0_1() { return cRealizesConceptualQueryCompositionQNParserRuleCall_2_1_0_1; }
	}
	public class PlatformElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformComposableElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* * * * * * * Platform Level Rules * * * * * *  */
		///** A platform Element is the root type for defining the platform elements of a Data Model. */
		//PlatformElement:
		//    PlatformComposableElement |
		//    PlatformView
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformComposableElement |
		//PlatformView
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformComposableElement
		public RuleCall getPlatformComposableElementParserRuleCall_0() { return cPlatformComposableElementParserRuleCall_0; }
		
		//PlatformView
		public RuleCall getPlatformViewParserRuleCall_1() { return cPlatformViewParserRuleCall_1; }
	}
	public class PlatformComposableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformComposableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A platform ComposableElement is a platform Element that is allowed to participate in a Composition relationship. In other words, these are the platform Elements that may be a characteristic of a platform Entity. */
		//PlatformComposableElement:
		//    PlatformEntity |
		//    PlatformDataType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformEntity |
		//PlatformDataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformEntity
		public RuleCall getPlatformEntityParserRuleCall_0() { return cPlatformEntityParserRuleCall_0; }
		
		//PlatformDataType
		public RuleCall getPlatformDataTypeParserRuleCall_1() { return cPlatformDataTypeParserRuleCall_1; }
	}
	public class PlatformDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformStructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A PlatformDataType is a platform realization of a logical AbstractMeasurement and is either a Primitive or a Struct. */
		//PlatformDataType:
		//    PlatformPrimitive |
		//    PlatformStruct
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformPrimitive |
		//PlatformStruct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformPrimitive
		public RuleCall getPlatformPrimitiveParserRuleCall_0() { return cPlatformPrimitiveParserRuleCall_0; }
		
		//PlatformStruct
		public RuleCall getPlatformStructParserRuleCall_1() { return cPlatformStructParserRuleCall_1; }
	}
	public class PlatformPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformPrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformSequenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlatformCharParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlatformNumberParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPlatformOctetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPlatformEnumerationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPlatformStringTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPlatformArrayParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		///** A platform Primitive realizes a logical AbstractMeasurement in terms of a simple data type. */
		//PlatformPrimitive:
		//    PlatformSequence |
		//    PlatformBoolean |
		//    PlatformChar | //PlatformCharType | // skip single inheritance
		//    PlatformNumber |
		//    PlatformOctet |
		//    PlatformEnumeration |
		//    PlatformStringType |
		//    PlatformArray
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformSequence |
		//PlatformBoolean |
		//PlatformChar | //PlatformCharType | // skip single inheritance
		//PlatformNumber |
		//PlatformOctet |
		//PlatformEnumeration |
		//PlatformStringType |
		//PlatformArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformSequence
		public RuleCall getPlatformSequenceParserRuleCall_0() { return cPlatformSequenceParserRuleCall_0; }
		
		//PlatformBoolean
		public RuleCall getPlatformBooleanParserRuleCall_1() { return cPlatformBooleanParserRuleCall_1; }
		
		//PlatformChar
		public RuleCall getPlatformCharParserRuleCall_2() { return cPlatformCharParserRuleCall_2; }
		
		////PlatformCharType | // skip single inheritance
		//   PlatformNumber
		public RuleCall getPlatformNumberParserRuleCall_3() { return cPlatformNumberParserRuleCall_3; }
		
		//PlatformOctet
		public RuleCall getPlatformOctetParserRuleCall_4() { return cPlatformOctetParserRuleCall_4; }
		
		//PlatformEnumeration
		public RuleCall getPlatformEnumerationParserRuleCall_5() { return cPlatformEnumerationParserRuleCall_5; }
		
		//PlatformStringType
		public RuleCall getPlatformStringTypeParserRuleCall_6() { return cPlatformStringTypeParserRuleCall_6; }
		
		//PlatformArray
		public RuleCall getPlatformArrayParserRuleCall_7() { return cPlatformArrayParserRuleCall_7; }
	}
	public class PlatformBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A Boolean is a data type that represents the values TRUE and FALSE. */
		//PlatformBoolean:            'bool'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'bool'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'bool'
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformOctetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformOctet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOctetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** An Octet is an 8-bit quantity that is guaranteed not to undergo any conversion during transfer between systems. */
		//PlatformOctet:                'octet'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'octet'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'octet'
		public Keyword getOctetKeyword_0() { return cOctetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformChar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Skip single inheritance - XText doesn't float attributes up when there is single inheritance.
		/////** A CharType is a Char. */
		////PlatformCharType:
		////    PlatformChar
		//////    | PlatformWChar // NOTE: WChar was removed from the spec. Not clear is we want it
		////;
		///** A Char is a data type that represents characters from any single byte character set. */
		//PlatformChar:                'char'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'char'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'char'
		public Keyword getCharKeyword_0() { return cCharKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformStringType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformBoundedStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlatformCharArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////PlatformWChar:                'wchar'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		///** A StringType is a BoundedString, an unbounded String, or a CharArray. */
		//PlatformStringType:
		//    PlatformString |
		//    PlatformBoundedString |
		//    PlatformCharArray
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformString |
		//PlatformBoundedString |
		//PlatformCharArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformString
		public RuleCall getPlatformStringParserRuleCall_0() { return cPlatformStringParserRuleCall_0; }
		
		//PlatformBoundedString
		public RuleCall getPlatformBoundedStringParserRuleCall_1() { return cPlatformBoundedStringParserRuleCall_1; }
		
		//PlatformCharArray
		public RuleCall getPlatformCharArrayParserRuleCall_2() { return cPlatformCharArrayParserRuleCall_2; }
	}
	public class PlatformStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A String is a data type that represents a variable length sequence of Char (all 8-bit quantities except NULL). The length is a non-negative integer, and is available at run-time. */
		//PlatformString:                'string'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'string'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'string'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformBoundedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformBoundedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxLengthINTTerminalRuleCall_1_0 = (RuleCall)cMaxLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRealizesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRealizesLogicalElementCrossReference_6_0 = (CrossReference)cRealizesAssignment_6.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_6_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A BoundedString is a data type that represents a variable length sequence of Char (all 8-bit quantities except NULL). The length is a non-negative integer, and is available at run-time. The “maxLength” attribute defines the maximum length of the BoundedString, an integer value greater than 0. */
		//PlatformBoundedString:        'string[' maxLength=INT ']'      name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'string[' maxLength=INT ']'  	name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'string['
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//maxLength=INT
		public Assignment getMaxLengthAssignment_1() { return cMaxLengthAssignment_1; }
		
		//INT
		public RuleCall getMaxLengthINTTerminalRuleCall_1_0() { return cMaxLengthINTTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_6() { return cRealizesAssignment_6; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_6_0() { return cRealizesLogicalElementCrossReference_6_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_6_0_1() { return cRealizesLogicalElementQNParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class PlatformCharArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformCharArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRealizesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRealizesLogicalElementCrossReference_6_0 = (CrossReference)cRealizesAssignment_6.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_6_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A CharArray is a data type that represents a fixed length sequence of Char (all 8-bit quantities except NULL). The length is a positive integer, and is available at run-time. The “length” attribute defines the length of the CharArray, an integer value greater than 0. */
		//PlatformCharArray:            'char['   length=INT ']'          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'char['   length=INT ']'  		name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'char['
		public Keyword getCharKeyword_0() { return cCharKeyword_0; }
		
		//length=INT
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_0() { return cLengthINTTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_6() { return cRealizesAssignment_6; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_6_0() { return cRealizesLogicalElementCrossReference_6_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_6_0_1() { return cRealizesLogicalElementQNParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class PlatformEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** An Enumeration is a data type that represents an ordered list of identifiers. */
		//PlatformEnumeration:        'enum'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformRealParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A Number is an abstract meta-class from which all meta-classes representing numeric values derive. */
		//PlatformNumber:
		//    PlatformReal |
		//    PlatformInteger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformReal |
		//PlatformInteger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformReal
		public RuleCall getPlatformRealParserRuleCall_0() { return cPlatformRealParserRuleCall_0; }
		
		//PlatformInteger
		public RuleCall getPlatformIntegerParserRuleCall_1() { return cPlatformIntegerParserRuleCall_1; }
	}
	public class PlatformIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformInteger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformLongParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformShortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlatformUnsignedIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlatformLongLongParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** An Integer is an abstract meta-class from which all meta-classes representing whole numbers derive. */
		//PlatformInteger:
		//    PlatformLong |
		//    PlatformShort |
		//    PlatformUnsignedInteger |
		//    PlatformLongLong
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformLong |
		//PlatformShort |
		//PlatformUnsignedInteger |
		//PlatformLongLong
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformLong
		public RuleCall getPlatformLongParserRuleCall_0() { return cPlatformLongParserRuleCall_0; }
		
		//PlatformShort
		public RuleCall getPlatformShortParserRuleCall_1() { return cPlatformShortParserRuleCall_1; }
		
		//PlatformUnsignedInteger
		public RuleCall getPlatformUnsignedIntegerParserRuleCall_2() { return cPlatformUnsignedIntegerParserRuleCall_2; }
		
		//PlatformLongLong
		public RuleCall getPlatformLongLongParserRuleCall_3() { return cPlatformLongLongParserRuleCall_3; }
	}
	public class PlatformShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformShort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A Short is an integer data type that represents integer values in the range –2^15 to (2^15 – 1). */
		//PlatformShort:                'short'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'short'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'short'
		public Keyword getShortKeyword_0() { return cShortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A Long is an integer data type that represents integer values in the range –2^31 to (2^31 – 1). */
		//PlatformLong:                'long'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'long'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'long'
		public Keyword getLongKeyword_0() { return cLongKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformLongLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformLongLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLlongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A LongLong is an integer data type that represents integer values in the range –2^63 to (2^63 – 1). */
		//PlatformLongLong:            'llong'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'llong'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'llong'
		public Keyword getLlongKeyword_0() { return cLlongKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformReal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformFixedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlatformDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlatformLongDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** A Real is an abstract meta-class from which all meta-classes representing real numbers derive. */
		//PlatformReal:
		//    PlatformFixed |
		//    PlatformFloat |
		//    PlatformDouble |
		//    PlatformLongDouble
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformFixed |
		//PlatformFloat |
		//PlatformDouble |
		//PlatformLongDouble
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformFixed
		public RuleCall getPlatformFixedParserRuleCall_0() { return cPlatformFixedParserRuleCall_0; }
		
		//PlatformFloat
		public RuleCall getPlatformFloatParserRuleCall_1() { return cPlatformFloatParserRuleCall_1; }
		
		//PlatformDouble
		public RuleCall getPlatformDoubleParserRuleCall_2() { return cPlatformDoubleParserRuleCall_2; }
		
		//PlatformLongDouble
		public RuleCall getPlatformLongDoubleParserRuleCall_3() { return cPlatformLongDoubleParserRuleCall_3; }
	}
	public class PlatformDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoubleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A Double is a real data type that represents an IEEE double precision floating-point number.  */
		//PlatformDouble:                'double'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'double'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'double'
		public Keyword getDoubleKeyword_0() { return cDoubleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformLongDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformLongDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdoubleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A LongDouble is a real data type that represents an IEEE extended double precision floating- point number (having a signed fraction of at least 64 bits and an exponent of at least 15 bits) */
		//PlatformLongDouble:            'ldouble'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ldouble'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'ldouble'
		public Keyword getLdoubleKeyword_0() { return cLdoubleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A Float is a real data type that represents an IEEE single precision floating-point number. */
		//PlatformFloat:                'float'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'float'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'float'
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformFixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformFixed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDigitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDigitsINTTerminalRuleCall_1_0 = (RuleCall)cDigitsAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScaleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScaleINTTerminalRuleCall_3_0 = (RuleCall)cScaleAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRealizesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cRealizesLogicalElementCrossReference_8_0 = (CrossReference)cRealizesAssignment_8.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_8_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_8_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** A Fixed is a real data type that represents a fixed-point decimal number of up to 31 significant digits. The “digits” attribute defines the total number of digits, a non-negative integer value less than or equal to 31. The “scale” attribute defines the position of the decimal point in the number, and cannot be greater than “digits”. */
		//PlatformFixed:                'fixed[' digits=INT '.' scale=INT ']'
		//                                                            name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'fixed[' digits=INT '.' scale=INT ']'
		//                                            name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'fixed['
		public Keyword getFixedKeyword_0() { return cFixedKeyword_0; }
		
		//digits=INT
		public Assignment getDigitsAssignment_1() { return cDigitsAssignment_1; }
		
		//INT
		public RuleCall getDigitsINTTerminalRuleCall_1_0() { return cDigitsINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//scale=INT
		public Assignment getScaleAssignment_3() { return cScaleAssignment_3; }
		
		//INT
		public RuleCall getScaleINTTerminalRuleCall_3_0() { return cScaleINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_0() { return cDescriptionSTRINGTerminalRuleCall_6_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_8() { return cRealizesAssignment_8; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_8_0() { return cRealizesLogicalElementCrossReference_8_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_8_0_1() { return cRealizesLogicalElementQNParserRuleCall_8_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class PlatformUnsignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformUnsignedInteger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformUShortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformULongParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlatformULongLongParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///** An UnsignedInteger is an abstract meta-class from which all meta-classes representing unsigned whole numbers derive. */
		//PlatformUnsignedInteger:
		//    PlatformUShort |
		//    PlatformULong |
		//    PlatformULongLong
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformUShort |
		//PlatformULong |
		//PlatformULongLong
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformUShort
		public RuleCall getPlatformUShortParserRuleCall_0() { return cPlatformUShortParserRuleCall_0; }
		
		//PlatformULong
		public RuleCall getPlatformULongParserRuleCall_1() { return cPlatformULongParserRuleCall_1; }
		
		//PlatformULongLong
		public RuleCall getPlatformULongLongParserRuleCall_2() { return cPlatformULongLongParserRuleCall_2; }
	}
	public class PlatformUShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformUShort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUshortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A UShort is an integer data type that represents integer values in the range 0 to (2^16 – 1).  */
		//PlatformUShort:                'ushort'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ushort'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'ushort'
		public Keyword getUshortKeyword_0() { return cUshortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformULongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformULong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUlongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A ULong is an integer data type that represents integer values in the range 0 to (2^32 – 1). */
		//PlatformULong:                'ulong'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ulong'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'ulong'
		public Keyword getUlongKeyword_0() { return cUlongKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformULongLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformULongLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUllongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///** A ULongLong is an integer data type that represents integer values in the range 0 to (2^64 – 1). */
		//PlatformULongLong:            'ullong'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ullong'  						name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'ullong'
		public Keyword getUllongKeyword_0() { return cUllongKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlatformSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMaxSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMaxSizeINTTerminalRuleCall_1_1_0 = (RuleCall)cMaxSizeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRealizesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRealizesLogicalElementCrossReference_5_0 = (CrossReference)cRealizesAssignment_5.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_5_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** A Sequence is used to represent a sequence of Octets. This can be used to realize a StandardMeasurementSystem. */
		//PlatformSequence:            'seq' ('[' maxSize=INT ']')?      name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'seq' ('[' maxSize=INT ']')?  	name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'seq'
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }
		
		//('[' maxSize=INT ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//maxSize=INT
		public Assignment getMaxSizeAssignment_1_1() { return cMaxSizeAssignment_1_1; }
		
		//INT
		public RuleCall getMaxSizeINTTerminalRuleCall_1_1_0() { return cMaxSizeINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_5() { return cRealizesAssignment_5; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_5_0() { return cRealizesLogicalElementCrossReference_5_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_5_0_1() { return cRealizesLogicalElementQNParserRuleCall_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class PlatformArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRealizesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRealizesLogicalElementCrossReference_5_0 = (CrossReference)cRealizesAssignment_5.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_5_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///** An Array is used to represent an array of Octets. This can be used to realize a StandardMeasurementSystem. */
		//PlatformArray:                'arr' ('[' size=INT ']')?          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'arr' ('[' size=INT ']')?  		name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
		public Group getGroup() { return cGroup; }
		
		//'arr'
		public Keyword getArrKeyword_0() { return cArrKeyword_0; }
		
		//('[' size=INT ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_1_0() { return cSizeINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_5() { return cRealizesAssignment_5; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_5_0() { return cRealizesLogicalElementCrossReference_5_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_5_0_1() { return cRealizesLogicalElementQNParserRuleCall_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class PlatformStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRealizesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRealizesLogicalElementCrossReference_4_0 = (CrossReference)cRealizesAssignment_4.eContents().get(0);
		private final RuleCall cRealizesLogicalElementQNParserRuleCall_4_0_1 = (RuleCall)cRealizesLogicalElementCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMemberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMemberPlatformStructMemberParserRuleCall_6_0 = (RuleCall)cMemberAssignment_6.eContents().get(0);
		private final Assignment cMemberAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMemberPlatformStructMemberParserRuleCall_7_0 = (RuleCall)cMemberAssignment_7.eContents().get(0);
		private final Assignment cMemberAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMemberPlatformStructMemberParserRuleCall_8_0 = (RuleCall)cMemberAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** A platform Struct is a structured realization of a logical AbstractMeasurement. It is composed of PlatformDataTypes (i.e., Primitives and other Structs composed of Primitives). A platform Struct’s composition hierarchy is consistent with the composition hierarchy of the logical AbstractMeasurement that it realizes. */
		//PlatformStruct:
		//    'struct' name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] '{'
		//        member+=PlatformStructMember
		//        member+=PlatformStructMember
		//        (member+=PlatformStructMember)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] '{'
		//    member+=PlatformStructMember
		//    member+=PlatformStructMember
		//    (member+=PlatformStructMember)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public Assignment getRealizesAssignment_4() { return cRealizesAssignment_4; }
		
		//[/*LogicalAbstractMeasurement*/LogicalElement|QN]
		public CrossReference getRealizesLogicalElementCrossReference_4_0() { return cRealizesLogicalElementCrossReference_4_0; }
		
		//QN
		public RuleCall getRealizesLogicalElementQNParserRuleCall_4_0_1() { return cRealizesLogicalElementQNParserRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//member+=PlatformStructMember
		public Assignment getMemberAssignment_6() { return cMemberAssignment_6; }
		
		//PlatformStructMember
		public RuleCall getMemberPlatformStructMemberParserRuleCall_6_0() { return cMemberPlatformStructMemberParserRuleCall_6_0; }
		
		//member+=PlatformStructMember
		public Assignment getMemberAssignment_7() { return cMemberAssignment_7; }
		
		//PlatformStructMember
		public RuleCall getMemberPlatformStructMemberParserRuleCall_7_0() { return cMemberPlatformStructMemberParserRuleCall_7_0; }
		
		//(member+=PlatformStructMember)?
		public Assignment getMemberAssignment_8() { return cMemberAssignment_8; }
		
		//PlatformStructMember
		public RuleCall getMemberPlatformStructMemberParserRuleCall_8_0() { return cMemberPlatformStructMemberParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class PlatformStructMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformStructMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypePlatformDataTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypePlatformDataTypeQNParserRuleCall_0_0_1 = (RuleCall)cTypePlatformDataTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrecisionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrecisionFLOATTerminalRuleCall_3_0 = (RuleCall)cPrecisionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRealizesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRealizesLogicalMeasurementAttributeCrossReference_5_1_0 = (CrossReference)cRealizesAssignment_5_1.eContents().get(0);
		private final RuleCall cRealizesLogicalMeasurementAttributeQNParserRuleCall_5_1_0_1 = (RuleCall)cRealizesLogicalMeasurementAttributeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		///** A StructMember is the mechanism that allows Structs to be constructed from other PlatformDataTypes. The “type” of a StructMember is the PlatformDataType being used to construct the Struct. If “type” is a Primitive, the “precision” attribute specifies a measure of the detail in which a quantity is captured. */
		//PlatformStructMember:
		//    type=[PlatformDataType|QN] rolename=ID '(' precision=FLOAT ')' ('->' realizes=[LogicalMeasurementAttribute|QN] ';')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[PlatformDataType|QN] rolename=ID '(' precision=FLOAT ')' ('->' realizes=[LogicalMeasurementAttribute|QN] ';')?
		public Group getGroup() { return cGroup; }
		
		//type=[PlatformDataType|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[PlatformDataType|QN]
		public CrossReference getTypePlatformDataTypeCrossReference_0_0() { return cTypePlatformDataTypeCrossReference_0_0; }
		
		//QN
		public RuleCall getTypePlatformDataTypeQNParserRuleCall_0_0_1() { return cTypePlatformDataTypeQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//precision=FLOAT
		public Assignment getPrecisionAssignment_3() { return cPrecisionAssignment_3; }
		
		//FLOAT
		public RuleCall getPrecisionFLOATTerminalRuleCall_3_0() { return cPrecisionFLOATTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('->' realizes=[LogicalMeasurementAttribute|QN] ';')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }
		
		//realizes=[LogicalMeasurementAttribute|QN]
		public Assignment getRealizesAssignment_5_1() { return cRealizesAssignment_5_1; }
		
		//[LogicalMeasurementAttribute|QN]
		public CrossReference getRealizesLogicalMeasurementAttributeCrossReference_5_1_0() { return cRealizesLogicalMeasurementAttributeCrossReference_5_1_0; }
		
		//QN
		public RuleCall getRealizesLogicalMeasurementAttributeQNParserRuleCall_5_1_0_1() { return cRealizesLogicalMeasurementAttributeQNParserRuleCall_5_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }
	}
	public class PlatformCharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformCharacteristic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformCompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformParticipantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A platform Characteristic contributes to the uniqueness of a platform Entity. The “rolename” attribute defines the name of the platform Characteristic within the scope of the platform Entity. The “lowerBound” and “upperBound” attributes define the multiplicity of the composed Characteristic. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
		//PlatformCharacteristic:
		//    PlatformComposition |
		//    PlatformParticipant
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformComposition |
		//PlatformParticipant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformComposition
		public RuleCall getPlatformCompositionParserRuleCall_0() { return cPlatformCompositionParserRuleCall_0; }
		
		//PlatformParticipant
		public RuleCall getPlatformParticipantParserRuleCall_1() { return cPlatformParticipantParserRuleCall_1; }
	}
	public class PlatformEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPentityKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cDescriptionAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cSpecializesPlatformEntityCrossReference_0_3_1_0 = (CrossReference)cSpecializesAssignment_0_3_1.eContents().get(0);
		private final RuleCall cSpecializesPlatformEntityQNParserRuleCall_0_3_1_0_1 = (RuleCall)cSpecializesPlatformEntityCrossReference_0_3_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cRealizesAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cRealizesLogicalEntityCrossReference_0_5_0 = (CrossReference)cRealizesAssignment_0_5.eContents().get(0);
		private final RuleCall cRealizesLogicalEntityQNParserRuleCall_0_5_0_1 = (RuleCall)cRealizesLogicalEntityCrossReference_0_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cCompositionAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cCompositionPlatformCompositionParserRuleCall_0_7_0 = (RuleCall)cCompositionAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cPlatformAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A platform Entity “realizes” a logical Entity in terms of PhysicalDataTypes and other platform Entities composed of PhysicalDataTypes. A platform Entity’s composition hierarchy is consistent with the composition hierarchy of the logical Entity that it realizes. The platform Entity’s composed Entities realize one to one the logical Entity’s composed Entities; the platform Entity’s composed PhysicalDataTypes realize many to one the logical Entity’s composed Measurements. */
		//PlatformEntity:
		//    'pentity' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
		//        composition+=PlatformComposition*
		//    '};'
		//    | PlatformAssociation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pentity' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
		//    composition+=PlatformComposition*
		//'};'
		//| PlatformAssociation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pentity' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
		//    composition+=PlatformComposition*
		//'};'
		public Group getGroup_0() { return cGroup_0; }
		
		//'pentity'
		public Keyword getPentityKeyword_0_0() { return cPentityKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_0_2() { return cDescriptionAssignment_0_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_2_0() { return cDescriptionSTRINGTerminalRuleCall_0_2_0; }
		
		//(':' specializes=[PlatformEntity|QN])?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//':'
		public Keyword getColonKeyword_0_3_0() { return cColonKeyword_0_3_0; }
		
		//specializes=[PlatformEntity|QN]
		public Assignment getSpecializesAssignment_0_3_1() { return cSpecializesAssignment_0_3_1; }
		
		//[PlatformEntity|QN]
		public CrossReference getSpecializesPlatformEntityCrossReference_0_3_1_0() { return cSpecializesPlatformEntityCrossReference_0_3_1_0; }
		
		//QN
		public RuleCall getSpecializesPlatformEntityQNParserRuleCall_0_3_1_0_1() { return cSpecializesPlatformEntityQNParserRuleCall_0_3_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_4() { return cHyphenMinusGreaterThanSignKeyword_0_4; }
		
		//realizes=[LogicalEntity|QN]
		public Assignment getRealizesAssignment_0_5() { return cRealizesAssignment_0_5; }
		
		//[LogicalEntity|QN]
		public CrossReference getRealizesLogicalEntityCrossReference_0_5_0() { return cRealizesLogicalEntityCrossReference_0_5_0; }
		
		//QN
		public RuleCall getRealizesLogicalEntityQNParserRuleCall_0_5_0_1() { return cRealizesLogicalEntityQNParserRuleCall_0_5_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//composition+=PlatformComposition*
		public Assignment getCompositionAssignment_0_7() { return cCompositionAssignment_0_7; }
		
		//PlatformComposition
		public RuleCall getCompositionPlatformCompositionParserRuleCall_0_7_0() { return cCompositionPlatformCompositionParserRuleCall_0_7_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_0_8() { return cRightCurlyBracketSemicolonKeyword_0_8; }
		
		//PlatformAssociation
		public RuleCall getPlatformAssociationParserRuleCall_1() { return cPlatformAssociationParserRuleCall_1; }
	}
	public class PlatformCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypePlatformComposableElementCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypePlatformComposableElementQNParserRuleCall_0_0_1 = (RuleCall)cTypePlatformComposableElementCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecializesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecializesPlatformCharacteristicCrossReference_4_1_0 = (CrossReference)cSpecializesAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecializesPlatformCharacteristicQNParserRuleCall_4_1_0_1 = (RuleCall)cSpecializesPlatformCharacteristicCrossReference_4_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRealizesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRealizesLogicalCompositionCrossReference_6_0 = (CrossReference)cRealizesAssignment_6.eContents().get(0);
		private final RuleCall cRealizesLogicalCompositionQNParserRuleCall_6_0_1 = (RuleCall)cRealizesLogicalCompositionCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cPrecKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cPrecisionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cPrecisionFLOATTerminalRuleCall_7_2_0 = (RuleCall)cPrecisionAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///** A platform Composition is the mechanism that allows platform Entities to be constructed from other platform ComposableElements. The “type” of a Composition is the ComposableElement being used to construct the platform Entity. The “lowerBound” and “upperBound” define the multiplicity of the composed platform Entity. An “upperBound” multiplicity of –1 represents an unbounded sequence. If “type” is a Primitive, the “precision” attribute specifies a measure of the detail in which a quantity is captured.  */
		//PlatformComposition:
		//    type=[PlatformComposableElement|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[PlatformCharacteristic|QN])?  '->' realizes=[LogicalComposition|QN]
		//        ('{'
		//            'prec:' precision=FLOAT
		//        '}')? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[PlatformComposableElement|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[PlatformCharacteristic|QN])?  '->' realizes=[LogicalComposition|QN]
		//    ('{'
		//        'prec:' precision=FLOAT
		//    '}')? ';'
		public Group getGroup() { return cGroup; }
		
		//type=[PlatformComposableElement|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[PlatformComposableElement|QN]
		public CrossReference getTypePlatformComposableElementCrossReference_0_0() { return cTypePlatformComposableElementCrossReference_0_0; }
		
		//QN
		public RuleCall getTypePlatformComposableElementQNParserRuleCall_0_0_1() { return cTypePlatformComposableElementQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//('[' lowerBound=INT ':' upperBound=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_2_1_0() { return cLowerBoundINTTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_3_0() { return cUpperBoundINTTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//(':' specializes=[PlatformCharacteristic|QN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//specializes=[PlatformCharacteristic|QN]
		public Assignment getSpecializesAssignment_4_1() { return cSpecializesAssignment_4_1; }
		
		//[PlatformCharacteristic|QN]
		public CrossReference getSpecializesPlatformCharacteristicCrossReference_4_1_0() { return cSpecializesPlatformCharacteristicCrossReference_4_1_0; }
		
		//QN
		public RuleCall getSpecializesPlatformCharacteristicQNParserRuleCall_4_1_0_1() { return cSpecializesPlatformCharacteristicQNParserRuleCall_4_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//realizes=[LogicalComposition|QN]
		public Assignment getRealizesAssignment_6() { return cRealizesAssignment_6; }
		
		//[LogicalComposition|QN]
		public CrossReference getRealizesLogicalCompositionCrossReference_6_0() { return cRealizesLogicalCompositionCrossReference_6_0; }
		
		//QN
		public RuleCall getRealizesLogicalCompositionQNParserRuleCall_6_0_1() { return cRealizesLogicalCompositionQNParserRuleCall_6_0_1; }
		
		//('{'
		//    'prec:' precision=FLOAT
		//'}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//'prec:'
		public Keyword getPrecKeyword_7_1() { return cPrecKeyword_7_1; }
		
		//precision=FLOAT
		public Assignment getPrecisionAssignment_7_2() { return cPrecisionAssignment_7_2; }
		
		//FLOAT
		public RuleCall getPrecisionFLOATTerminalRuleCall_7_2_0() { return cPrecisionFLOATTerminalRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class PlatformAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPassocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSpecializesPlatformEntityCrossReference_3_1_0 = (CrossReference)cSpecializesAssignment_3_1.eContents().get(0);
		private final RuleCall cSpecializesPlatformEntityQNParserRuleCall_3_1_0_1 = (RuleCall)cSpecializesPlatformEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRealizesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRealizesLogicalEntityCrossReference_5_0 = (CrossReference)cRealizesAssignment_5.eContents().get(0);
		private final RuleCall cRealizesLogicalEntityQNParserRuleCall_5_0_1 = (RuleCall)cRealizesLogicalEntityCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCompositionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompositionPlatformCompositionParserRuleCall_7_0 = (RuleCall)cCompositionAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cParticipantsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cParticipantAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cParticipantPlatformParticipantParserRuleCall_8_2_0 = (RuleCall)cParticipantAssignment_8_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** A platform Association represents a relationship between two or more platform Entities. The platform Entities participating in the platform Association may be specified locally or in its generalized types. In addition, there may be one or more platform ComposableElements that characterize the relationship. Platform Associations are platform Entities that may also participate in other platform Associations. */
		//PlatformAssociation:
		//    'passoc' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
		//        composition+=PlatformComposition*
		//        // While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
		//        // Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
		//        ('participants:' '[' participant+=PlatformParticipant+ ']')?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'passoc' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
		//    composition+=PlatformComposition*
		//    // While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
		//    // Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
		//    ('participants:' '[' participant+=PlatformParticipant+ ']')?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'passoc'
		public Keyword getPassocKeyword_0() { return cPassocKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(':' specializes=[PlatformEntity|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//specializes=[PlatformEntity|QN]
		public Assignment getSpecializesAssignment_3_1() { return cSpecializesAssignment_3_1; }
		
		//[PlatformEntity|QN]
		public CrossReference getSpecializesPlatformEntityCrossReference_3_1_0() { return cSpecializesPlatformEntityCrossReference_3_1_0; }
		
		//QN
		public RuleCall getSpecializesPlatformEntityQNParserRuleCall_3_1_0_1() { return cSpecializesPlatformEntityQNParserRuleCall_3_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//realizes=[LogicalEntity|QN]
		public Assignment getRealizesAssignment_5() { return cRealizesAssignment_5; }
		
		//[LogicalEntity|QN]
		public CrossReference getRealizesLogicalEntityCrossReference_5_0() { return cRealizesLogicalEntityCrossReference_5_0; }
		
		//QN
		public RuleCall getRealizesLogicalEntityQNParserRuleCall_5_0_1() { return cRealizesLogicalEntityQNParserRuleCall_5_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//composition+=PlatformComposition*
		public Assignment getCompositionAssignment_7() { return cCompositionAssignment_7; }
		
		//PlatformComposition
		public RuleCall getCompositionPlatformCompositionParserRuleCall_7_0() { return cCompositionPlatformCompositionParserRuleCall_7_0; }
		
		//// While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
		//// Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
		//('participants:' '[' participant+=PlatformParticipant+ ']')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'participants:'
		public Keyword getParticipantsKeyword_8_0() { return cParticipantsKeyword_8_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//participant+=PlatformParticipant+
		public Assignment getParticipantAssignment_8_2() { return cParticipantAssignment_8_2; }
		
		//PlatformParticipant
		public RuleCall getParticipantPlatformParticipantParserRuleCall_8_2_0() { return cParticipantPlatformParticipantParserRuleCall_8_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_3() { return cRightSquareBracketKeyword_8_3; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_9() { return cRightCurlyBracketSemicolonKeyword_9; }
	}
	public class PlatformParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformParticipant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypePlatformEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypePlatformEntityQNParserRuleCall_0_0_1 = (RuleCall)cTypePlatformEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpecializesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSpecializesPlatformCharacteristicCrossReference_4_1_0 = (CrossReference)cSpecializesAssignment_4_1.eContents().get(0);
		private final RuleCall cSpecializesPlatformCharacteristicQNParserRuleCall_4_1_0_1 = (RuleCall)cSpecializesPlatformCharacteristicCrossReference_4_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRealizesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRealizesLogicalParticipantCrossReference_6_0 = (CrossReference)cRealizesAssignment_6.eContents().get(0);
		private final RuleCall cRealizesLogicalParticipantQNParserRuleCall_6_0_1 = (RuleCall)cRealizesLogicalParticipantCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSourceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSourceLowerBoundAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSourceLowerBoundINTTerminalRuleCall_10_0 = (RuleCall)cSourceLowerBoundAssignment_10.eContents().get(0);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSourceUpperBoundAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cSourceUpperBoundINTTerminalRuleCall_12_0 = (RuleCall)cSourceUpperBoundAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cPathKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cPathAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cPathPlatformPathNodeParserRuleCall_14_1_0 = (RuleCall)cPathAssignment_14_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		///** A platform Participant is the mechanism that allows a platform Association to be constructed between two or more platform Entities. The “type” of a platform Participant is the platform Entity being used to construct the platform Association. The “sourceLowerBound” and “sourceUpperBound” attributes define the multiplicity of the platform Association relative to the Participant. A “sourceUpperBound” multiplicity of –1 represents an unbounded sequence. The “path” attribute of the Participant describes the chain of entity characteristics to traverse to reach the subject of the association beginning with the entity referenced by the “type” attribute.  */
		//PlatformParticipant:
		//    type=[PlatformEntity|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[PlatformCharacteristic|QN])?  '->' realizes=[LogicalParticipant|QN] '{'
		//        'source:' '[' sourceLowerBound=INT ':' sourceUpperBound=INT ']'
		//        ('path:' path=PlatformPathNode )?
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[PlatformEntity|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[PlatformCharacteristic|QN])?  '->' realizes=[LogicalParticipant|QN] '{'
		//    'source:' '[' sourceLowerBound=INT ':' sourceUpperBound=INT ']'
		//    ('path:' path=PlatformPathNode )?
		//'};'
		public Group getGroup() { return cGroup; }
		
		//type=[PlatformEntity|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[PlatformEntity|QN]
		public CrossReference getTypePlatformEntityCrossReference_0_0() { return cTypePlatformEntityCrossReference_0_0; }
		
		//QN
		public RuleCall getTypePlatformEntityQNParserRuleCall_0_0_1() { return cTypePlatformEntityQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//('[' lowerBound=INT ':' upperBound=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_2_1_0() { return cLowerBoundINTTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_3_0() { return cUpperBoundINTTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//(':' specializes=[PlatformCharacteristic|QN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//specializes=[PlatformCharacteristic|QN]
		public Assignment getSpecializesAssignment_4_1() { return cSpecializesAssignment_4_1; }
		
		//[PlatformCharacteristic|QN]
		public CrossReference getSpecializesPlatformCharacteristicCrossReference_4_1_0() { return cSpecializesPlatformCharacteristicCrossReference_4_1_0; }
		
		//QN
		public RuleCall getSpecializesPlatformCharacteristicQNParserRuleCall_4_1_0_1() { return cSpecializesPlatformCharacteristicQNParserRuleCall_4_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//realizes=[LogicalParticipant|QN]
		public Assignment getRealizesAssignment_6() { return cRealizesAssignment_6; }
		
		//[LogicalParticipant|QN]
		public CrossReference getRealizesLogicalParticipantCrossReference_6_0() { return cRealizesLogicalParticipantCrossReference_6_0; }
		
		//QN
		public RuleCall getRealizesLogicalParticipantQNParserRuleCall_6_0_1() { return cRealizesLogicalParticipantQNParserRuleCall_6_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//'source:'
		public Keyword getSourceKeyword_8() { return cSourceKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//sourceLowerBound=INT
		public Assignment getSourceLowerBoundAssignment_10() { return cSourceLowerBoundAssignment_10; }
		
		//INT
		public RuleCall getSourceLowerBoundINTTerminalRuleCall_10_0() { return cSourceLowerBoundINTTerminalRuleCall_10_0; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//sourceUpperBound=INT
		public Assignment getSourceUpperBoundAssignment_12() { return cSourceUpperBoundAssignment_12; }
		
		//INT
		public RuleCall getSourceUpperBoundINTTerminalRuleCall_12_0() { return cSourceUpperBoundINTTerminalRuleCall_12_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
		
		//('path:' path=PlatformPathNode )?
		public Group getGroup_14() { return cGroup_14; }
		
		//'path:'
		public Keyword getPathKeyword_14_0() { return cPathKeyword_14_0; }
		
		//path=PlatformPathNode
		public Assignment getPathAssignment_14_1() { return cPathAssignment_14_1; }
		
		//PlatformPathNode
		public RuleCall getPathPlatformPathNodeParserRuleCall_14_1_0() { return cPathPlatformPathNodeParserRuleCall_14_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_15() { return cRightCurlyBracketSemicolonKeyword_15; }
	}
	public class PlatformPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformPathNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformParticipantPathNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformCharacteristicPathNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A platform PathNode is a single element in a chain that collectively forms a path specification. */
		//PlatformPathNode:
		//    PlatformParticipantPathNode |
		//    PlatformCharacteristicPathNode
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformParticipantPathNode |
		//PlatformCharacteristicPathNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformParticipantPathNode
		public RuleCall getPlatformParticipantPathNodeParserRuleCall_0() { return cPlatformParticipantPathNodeParserRuleCall_0; }
		
		//PlatformCharacteristicPathNode
		public RuleCall getPlatformCharacteristicPathNodeParserRuleCall_1() { return cPlatformCharacteristicPathNodeParserRuleCall_1; }
	}
	public class PlatformParticipantPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformParticipantPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectedParticipantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProjectedParticipantPlatformParticipantCrossReference_1_0 = (CrossReference)cProjectedParticipantAssignment_1.eContents().get(0);
		private final RuleCall cProjectedParticipantPlatformParticipantQNParserRuleCall_1_0_1 = (RuleCall)cProjectedParticipantPlatformParticipantCrossReference_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodePlatformPathNodeParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		///** A platform ParticipantPathNode is a platform PathNode that selects a Participant that references an Entity. This provides a mechanism for reverse navigation from an Entity that participates in an Association back to the Association. */
		//PlatformParticipantPathNode:
		//    '/' projectedParticipant=[PlatformParticipant|QN]  ( node=PlatformPathNode)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'/' projectedParticipant=[PlatformParticipant|QN]  ( node=PlatformPathNode)
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//projectedParticipant=[PlatformParticipant|QN]
		public Assignment getProjectedParticipantAssignment_1() { return cProjectedParticipantAssignment_1; }
		
		//[PlatformParticipant|QN]
		public CrossReference getProjectedParticipantPlatformParticipantCrossReference_1_0() { return cProjectedParticipantPlatformParticipantCrossReference_1_0; }
		
		//QN
		public RuleCall getProjectedParticipantPlatformParticipantQNParserRuleCall_1_0_1() { return cProjectedParticipantPlatformParticipantQNParserRuleCall_1_0_1; }
		
		//( node=PlatformPathNode)
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//PlatformPathNode
		public RuleCall getNodePlatformPathNodeParserRuleCall_2_0() { return cNodePlatformPathNodeParserRuleCall_2_0; }
	}
	public class PlatformCharacteristicPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformCharacteristicPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectedCharacteristicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProjectedCharacteristicPlatformCharacteristicCrossReference_1_0 = (CrossReference)cProjectedCharacteristicAssignment_1.eContents().get(0);
		private final RuleCall cProjectedCharacteristicPlatformCharacteristicQNParserRuleCall_1_0_1 = (RuleCall)cProjectedCharacteristicPlatformCharacteristicCrossReference_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodePlatformPathNodeParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		///** A platform CharacteristicPathNode is a platform PathNode that selects a platform Characteristic which is directly contained in a platform Entity or Association. */
		//PlatformCharacteristicPathNode:
		//    '#' projectedCharacteristic=[PlatformCharacteristic|QN]  ( node=PlatformPathNode)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' projectedCharacteristic=[PlatformCharacteristic|QN]  ( node=PlatformPathNode)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//projectedCharacteristic=[PlatformCharacteristic|QN]
		public Assignment getProjectedCharacteristicAssignment_1() { return cProjectedCharacteristicAssignment_1; }
		
		//[PlatformCharacteristic|QN]
		public CrossReference getProjectedCharacteristicPlatformCharacteristicCrossReference_1_0() { return cProjectedCharacteristicPlatformCharacteristicCrossReference_1_0; }
		
		//QN
		public RuleCall getProjectedCharacteristicPlatformCharacteristicQNParserRuleCall_1_0_1() { return cProjectedCharacteristicPlatformCharacteristicQNParserRuleCall_1_0_1; }
		
		//( node=PlatformPathNode)
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//PlatformPathNode
		public RuleCall getNodePlatformPathNodeParserRuleCall_2_0() { return cNodePlatformPathNodeParserRuleCall_2_0; }
	}
	public class PlatformViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformView");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlatformQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlatformCompositeQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** A platform View is a platform Query or a platform CompositeQuery. */
		//PlatformView:
		//    PlatformQuery |
		//    PlatformCompositeQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlatformQuery |
		//PlatformCompositeQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlatformQuery
		public RuleCall getPlatformQueryParserRuleCall_0() { return cPlatformQueryParserRuleCall_0; }
		
		//PlatformCompositeQuery
		public RuleCall getPlatformCompositeQueryParserRuleCall_1() { return cPlatformCompositeQueryParserRuleCall_1; }
	}
	public class PlatformQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPqueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRealizesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRealizesLogicalQueryCrossReference_3_1_0 = (CrossReference)cRealizesAssignment_3_1.eContents().get(0);
		private final RuleCall cRealizesLogicalQueryQNParserRuleCall_3_1_0_1 = (RuleCall)cRealizesLogicalQueryCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSpecKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSpecificationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSpecificationSTRINGTerminalRuleCall_6_0 = (RuleCall)cSpecificationAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A platform Query is a specification that defines the content of platform View as a set of platform Characteristics projected from a selected set of related platform Entities. The “specification” attribute captures the specification of a Query as defined by the Query grammar. */
		//PlatformQuery:
		//    'pquery' name=ID  (description=STRING)? ('->' realizes=[LogicalQuery|QN])? '{'
		//        'spec:' specification=STRING
		//        '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pquery' name=ID  (description=STRING)? ('->' realizes=[LogicalQuery|QN])? '{'
		//    'spec:' specification=STRING
		//    '};'
		public Group getGroup() { return cGroup; }
		
		//'pquery'
		public Keyword getPqueryKeyword_0() { return cPqueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('->' realizes=[LogicalQuery|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//realizes=[LogicalQuery|QN]
		public Assignment getRealizesAssignment_3_1() { return cRealizesAssignment_3_1; }
		
		//[LogicalQuery|QN]
		public CrossReference getRealizesLogicalQueryCrossReference_3_1_0() { return cRealizesLogicalQueryCrossReference_3_1_0; }
		
		//QN
		public RuleCall getRealizesLogicalQueryQNParserRuleCall_3_1_0_1() { return cRealizesLogicalQueryQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'spec:'
		public Keyword getSpecKeyword_5() { return cSpecKeyword_5; }
		
		//specification=STRING
		public Assignment getSpecificationAssignment_6() { return cSpecificationAssignment_6; }
		
		//STRING
		public RuleCall getSpecificationSTRINGTerminalRuleCall_6_0() { return cSpecificationSTRINGTerminalRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class PlatformCompositeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformCompositeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPcqueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRealizesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRealizesLogicalQueryCrossReference_3_1_0 = (CrossReference)cRealizesAssignment_3_1.eContents().get(0);
		private final RuleCall cRealizesLogicalQueryQNParserRuleCall_3_1_0_1 = (RuleCall)cRealizesLogicalQueryCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIsUnionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIsUnionIsUnionKeyword_5_0 = (Keyword)cIsUnionAssignment_5.eContents().get(0);
		private final Assignment cCompositionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCompositionPlatformQueryCompositionParserRuleCall_6_0 = (RuleCall)cCompositionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///** A platform CompositeQuery is a collection of two or more platform Views. The “isUnion” attribute specifies whether the composed Views are intended to be mutually exclusive or not. */
		//PlatformCompositeQuery:
		//    'pcquery' name=ID  (description=STRING)? ('->' realizes=[LogicalQuery|QN])? '{'
		//        isUnion?='isUnion'
		//        composition+=PlatformQueryComposition
		//        '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pcquery' name=ID  (description=STRING)? ('->' realizes=[LogicalQuery|QN])? '{'
		//    isUnion?='isUnion'
		//    composition+=PlatformQueryComposition
		//    '};'
		public Group getGroup() { return cGroup; }
		
		//'pcquery'
		public Keyword getPcqueryKeyword_0() { return cPcqueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('->' realizes=[LogicalQuery|QN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//realizes=[LogicalQuery|QN]
		public Assignment getRealizesAssignment_3_1() { return cRealizesAssignment_3_1; }
		
		//[LogicalQuery|QN]
		public CrossReference getRealizesLogicalQueryCrossReference_3_1_0() { return cRealizesLogicalQueryCrossReference_3_1_0; }
		
		//QN
		public RuleCall getRealizesLogicalQueryQNParserRuleCall_3_1_0_1() { return cRealizesLogicalQueryQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//isUnion?='isUnion'
		public Assignment getIsUnionAssignment_5() { return cIsUnionAssignment_5; }
		
		//'isUnion'
		public Keyword getIsUnionIsUnionKeyword_5_0() { return cIsUnionIsUnionKeyword_5_0; }
		
		//composition+=PlatformQueryComposition
		public Assignment getCompositionAssignment_6() { return cCompositionAssignment_6; }
		
		//PlatformQueryComposition
		public RuleCall getCompositionPlatformQueryCompositionParserRuleCall_6_0() { return cCompositionPlatformQueryCompositionParserRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class PlatformQueryCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.PlatformQueryComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypePlatformViewCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypePlatformViewQNParserRuleCall_0_0_1 = (RuleCall)cTypePlatformViewCrossReference_0_0.eContents().get(1);
		private final Assignment cRolenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolenameIDTerminalRuleCall_1_0 = (RuleCall)cRolenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRealizesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRealizesLogicalQueryCompositionCrossReference_2_1_0 = (CrossReference)cRealizesAssignment_2_1.eContents().get(0);
		private final RuleCall cRealizesLogicalQueryCompositionQNParserRuleCall_2_1_0_1 = (RuleCall)cRealizesLogicalQueryCompositionCrossReference_2_1_0.eContents().get(1);
		
		///** A platform QueryComposition is the mechanism that allows a platform CompositeQuery to be constructed from platform Queries and other platform CompositeQueries. The “rolename” attribute defines the name of the composed platform View within the scope of the composing platform CompositeQuery. The “type” of a platform QueryComposition is the platform View being used to construct the platform CompositeQuery. */
		//PlatformQueryComposition:
		//    type=[PlatformView|QN] rolename=ID ( '->' realizes=[LogicalQueryComposition|QN])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[PlatformView|QN] rolename=ID ( '->' realizes=[LogicalQueryComposition|QN])?
		public Group getGroup() { return cGroup; }
		
		//type=[PlatformView|QN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[PlatformView|QN]
		public CrossReference getTypePlatformViewCrossReference_0_0() { return cTypePlatformViewCrossReference_0_0; }
		
		//QN
		public RuleCall getTypePlatformViewQNParserRuleCall_0_0_1() { return cTypePlatformViewQNParserRuleCall_0_0_1; }
		
		//rolename=ID
		public Assignment getRolenameAssignment_1() { return cRolenameAssignment_1; }
		
		//ID
		public RuleCall getRolenameIDTerminalRuleCall_1_0() { return cRolenameIDTerminalRuleCall_1_0; }
		
		//( '->' realizes=[LogicalQueryComposition|QN])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//realizes=[LogicalQueryComposition|QN]
		public Assignment getRealizesAssignment_2_1() { return cRealizesAssignment_2_1; }
		
		//[LogicalQueryComposition|QN]
		public CrossReference getRealizesLogicalQueryCompositionCrossReference_2_1_0() { return cRealizesLogicalQueryCompositionCrossReference_2_1_0; }
		
		//QN
		public RuleCall getRealizesLogicalQueryCompositionQNParserRuleCall_2_1_0_1() { return cRealizesLogicalQueryCompositionQNParserRuleCall_2_1_0_1; }
	}
	
	
	private final DataModelElements pDataModel;
	private final TerminalRule tDEC;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	private final QNElements pQN;
	private final IncludeElements pInclude;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final UddlElementElements pUddlElement;
	private final ConceptualDataModelElements pConceptualDataModel;
	private final LogicalDataModelElements pLogicalDataModel;
	private final PlatformDataModelElements pPlatformDataModel;
	private final ConceptualElementElements pConceptualElement;
	private final ConceptualComposableElementElements pConceptualComposableElement;
	private final ConceptualBasisEntityElements pConceptualBasisEntity;
	private final ConceptualDomainElements pConceptualDomain;
	private final ConceptualObservableElements pConceptualObservable;
	private final ConceptualCharacteristicElements pConceptualCharacteristic;
	private final ConceptualEntityElements pConceptualEntity;
	private final ConceptualCompositionElements pConceptualComposition;
	private final ConceptualAssociationElements pConceptualAssociation;
	private final ConceptualParticipantElements pConceptualParticipant;
	private final ConceptualPathNodeElements pConceptualPathNode;
	private final ConceptualParticipantPathNodeElements pConceptualParticipantPathNode;
	private final ConceptualCharacteristicPathNodeElements pConceptualCharacteristicPathNode;
	private final ConceptualViewElements pConceptualView;
	private final ConceptualQueryElements pConceptualQuery;
	private final ConceptualCompositeQueryElements pConceptualCompositeQuery;
	private final ConceptualQueryCompositionElements pConceptualQueryComposition;
	private final LogicalElementElements pLogicalElement;
	private final LogicalUnitElements pLogicalUnit;
	private final LogicalConversionElements pLogicalConversion;
	private final LogicalAffineConversionElements pLogicalAffineConversion;
	private final LogicalValueTypeElements pLogicalValueType;
	private final LogicalStringElements pLogicalString;
	private final LogicalCharacterElements pLogicalCharacter;
	private final LogicalBooleanElements pLogicalBoolean;
	private final LogicalNumericElements pLogicalNumeric;
	private final LogicalIntegerElements pLogicalInteger;
	private final LogicalNaturalElements pLogicalNatural;
	private final LogicalRealElements pLogicalReal;
	private final LogicalNonNegativeRealElements pLogicalNonNegativeReal;
	private final LogicalEnumeratedElements pLogicalEnumerated;
	private final TaxonomyElements pTaxonomy;
	private final LogicalEnumeratedBaseElements pLogicalEnumeratedBase;
	private final LogicalEnumeratedSetElements pLogicalEnumeratedSet;
	private final LogicalEnumerationLabelElements pLogicalEnumerationLabel;
	private final LogicalCoordinateSystemElements pLogicalCoordinateSystem;
	private final LogicalCoordinateSystemAxisElements pLogicalCoordinateSystemAxis;
	private final LogicalAbstractMeasurementSystemElements pLogicalAbstractMeasurementSystem;
	private final LogicalStandardMeasurementSystemElements pLogicalStandardMeasurementSystem;
	private final LogicalLandmarkElements pLogicalLandmark;
	private final LogicalMeasurementSystemElements pLogicalMeasurementSystem;
	private final LogicalMeasurementSystemAxisElements pLogicalMeasurementSystemAxis;
	private final LogicalReferencePointElements pLogicalReferencePoint;
	private final LogicalReferencePointPartElements pLogicalReferencePointPart;
	private final LogicalValueTypeUnitElements pLogicalValueTypeUnit;
	private final LogicalConstraintElements pLogicalConstraint;
	private final LogicalIntegerRangeConstraintElements pLogicalIntegerRangeConstraint;
	private final LogicalRealRangeConstraintElements pLogicalRealRangeConstraint;
	private final LogicalStringConstraintElements pLogicalStringConstraint;
	private final LogicalRegularExpressionConstraintElements pLogicalRegularExpressionConstraint;
	private final LogicalFixedLengthStringConstraintElements pLogicalFixedLengthStringConstraint;
	private final LogicalEnumerationConstraintElements pLogicalEnumerationConstraint;
	private final LogicalMeasurementConstraintElements pLogicalMeasurementConstraint;
	private final LogicalMeasurementSystemConversionElements pLogicalMeasurementSystemConversion;
	private final LogicalMeasurementElements pLogicalMeasurement;
	private final LogicalMeasurementAxisElements pLogicalMeasurementAxis;
	private final LogicalMeasurementAttributeElements pLogicalMeasurementAttribute;
	private final LogicalMeasurementConversionElements pLogicalMeasurementConversion;
	private final LogicalComposableElementElements pLogicalComposableElement;
	private final LogicalCharacteristicElements pLogicalCharacteristic;
	private final LogicalEntityElements pLogicalEntity;
	private final LogicalCompositionElements pLogicalComposition;
	private final LogicalAssociationElements pLogicalAssociation;
	private final LogicalParticipantElements pLogicalParticipant;
	private final LogicalPathNodeElements pLogicalPathNode;
	private final LogicalParticipantPathNodeElements pLogicalParticipantPathNode;
	private final LogicalCharacteristicPathNodeElements pLogicalCharacteristicPathNode;
	private final LogicalViewElements pLogicalView;
	private final LogicalQueryElements pLogicalQuery;
	private final LogicalCompositeQueryElements pLogicalCompositeQuery;
	private final LogicalQueryCompositionElements pLogicalQueryComposition;
	private final PlatformElementElements pPlatformElement;
	private final PlatformComposableElementElements pPlatformComposableElement;
	private final PlatformDataTypeElements pPlatformDataType;
	private final PlatformPrimitiveElements pPlatformPrimitive;
	private final PlatformBooleanElements pPlatformBoolean;
	private final PlatformOctetElements pPlatformOctet;
	private final PlatformCharElements pPlatformChar;
	private final PlatformStringTypeElements pPlatformStringType;
	private final PlatformStringElements pPlatformString;
	private final PlatformBoundedStringElements pPlatformBoundedString;
	private final PlatformCharArrayElements pPlatformCharArray;
	private final PlatformEnumerationElements pPlatformEnumeration;
	private final PlatformNumberElements pPlatformNumber;
	private final PlatformIntegerElements pPlatformInteger;
	private final PlatformShortElements pPlatformShort;
	private final PlatformLongElements pPlatformLong;
	private final PlatformLongLongElements pPlatformLongLong;
	private final PlatformRealElements pPlatformReal;
	private final PlatformDoubleElements pPlatformDouble;
	private final PlatformLongDoubleElements pPlatformLongDouble;
	private final PlatformFloatElements pPlatformFloat;
	private final PlatformFixedElements pPlatformFixed;
	private final PlatformUnsignedIntegerElements pPlatformUnsignedInteger;
	private final PlatformUShortElements pPlatformUShort;
	private final PlatformULongElements pPlatformULong;
	private final PlatformULongLongElements pPlatformULongLong;
	private final PlatformSequenceElements pPlatformSequence;
	private final PlatformArrayElements pPlatformArray;
	private final PlatformStructElements pPlatformStruct;
	private final PlatformStructMemberElements pPlatformStructMember;
	private final PlatformCharacteristicElements pPlatformCharacteristic;
	private final PlatformEntityElements pPlatformEntity;
	private final PlatformCompositionElements pPlatformComposition;
	private final PlatformAssociationElements pPlatformAssociation;
	private final PlatformParticipantElements pPlatformParticipant;
	private final PlatformPathNodeElements pPlatformPathNode;
	private final PlatformParticipantPathNodeElements pPlatformParticipantPathNode;
	private final PlatformCharacteristicPathNodeElements pPlatformCharacteristicPathNode;
	private final PlatformViewElements pPlatformView;
	private final PlatformQueryElements pPlatformQuery;
	private final PlatformCompositeQueryElements pPlatformCompositeQuery;
	private final PlatformQueryCompositionElements pPlatformQueryComposition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UddlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.tDEC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.DEC");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.epistimis.uddl.Uddl.FLOAT");
		this.pQN = new QNElements();
		this.pInclude = new IncludeElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pUddlElement = new UddlElementElements();
		this.pConceptualDataModel = new ConceptualDataModelElements();
		this.pLogicalDataModel = new LogicalDataModelElements();
		this.pPlatformDataModel = new PlatformDataModelElements();
		this.pConceptualElement = new ConceptualElementElements();
		this.pConceptualComposableElement = new ConceptualComposableElementElements();
		this.pConceptualBasisEntity = new ConceptualBasisEntityElements();
		this.pConceptualDomain = new ConceptualDomainElements();
		this.pConceptualObservable = new ConceptualObservableElements();
		this.pConceptualCharacteristic = new ConceptualCharacteristicElements();
		this.pConceptualEntity = new ConceptualEntityElements();
		this.pConceptualComposition = new ConceptualCompositionElements();
		this.pConceptualAssociation = new ConceptualAssociationElements();
		this.pConceptualParticipant = new ConceptualParticipantElements();
		this.pConceptualPathNode = new ConceptualPathNodeElements();
		this.pConceptualParticipantPathNode = new ConceptualParticipantPathNodeElements();
		this.pConceptualCharacteristicPathNode = new ConceptualCharacteristicPathNodeElements();
		this.pConceptualView = new ConceptualViewElements();
		this.pConceptualQuery = new ConceptualQueryElements();
		this.pConceptualCompositeQuery = new ConceptualCompositeQueryElements();
		this.pConceptualQueryComposition = new ConceptualQueryCompositionElements();
		this.pLogicalElement = new LogicalElementElements();
		this.pLogicalUnit = new LogicalUnitElements();
		this.pLogicalConversion = new LogicalConversionElements();
		this.pLogicalAffineConversion = new LogicalAffineConversionElements();
		this.pLogicalValueType = new LogicalValueTypeElements();
		this.pLogicalString = new LogicalStringElements();
		this.pLogicalCharacter = new LogicalCharacterElements();
		this.pLogicalBoolean = new LogicalBooleanElements();
		this.pLogicalNumeric = new LogicalNumericElements();
		this.pLogicalInteger = new LogicalIntegerElements();
		this.pLogicalNatural = new LogicalNaturalElements();
		this.pLogicalReal = new LogicalRealElements();
		this.pLogicalNonNegativeReal = new LogicalNonNegativeRealElements();
		this.pLogicalEnumerated = new LogicalEnumeratedElements();
		this.pTaxonomy = new TaxonomyElements();
		this.pLogicalEnumeratedBase = new LogicalEnumeratedBaseElements();
		this.pLogicalEnumeratedSet = new LogicalEnumeratedSetElements();
		this.pLogicalEnumerationLabel = new LogicalEnumerationLabelElements();
		this.pLogicalCoordinateSystem = new LogicalCoordinateSystemElements();
		this.pLogicalCoordinateSystemAxis = new LogicalCoordinateSystemAxisElements();
		this.pLogicalAbstractMeasurementSystem = new LogicalAbstractMeasurementSystemElements();
		this.pLogicalStandardMeasurementSystem = new LogicalStandardMeasurementSystemElements();
		this.pLogicalLandmark = new LogicalLandmarkElements();
		this.pLogicalMeasurementSystem = new LogicalMeasurementSystemElements();
		this.pLogicalMeasurementSystemAxis = new LogicalMeasurementSystemAxisElements();
		this.pLogicalReferencePoint = new LogicalReferencePointElements();
		this.pLogicalReferencePointPart = new LogicalReferencePointPartElements();
		this.pLogicalValueTypeUnit = new LogicalValueTypeUnitElements();
		this.pLogicalConstraint = new LogicalConstraintElements();
		this.pLogicalIntegerRangeConstraint = new LogicalIntegerRangeConstraintElements();
		this.pLogicalRealRangeConstraint = new LogicalRealRangeConstraintElements();
		this.pLogicalStringConstraint = new LogicalStringConstraintElements();
		this.pLogicalRegularExpressionConstraint = new LogicalRegularExpressionConstraintElements();
		this.pLogicalFixedLengthStringConstraint = new LogicalFixedLengthStringConstraintElements();
		this.pLogicalEnumerationConstraint = new LogicalEnumerationConstraintElements();
		this.pLogicalMeasurementConstraint = new LogicalMeasurementConstraintElements();
		this.pLogicalMeasurementSystemConversion = new LogicalMeasurementSystemConversionElements();
		this.pLogicalMeasurement = new LogicalMeasurementElements();
		this.pLogicalMeasurementAxis = new LogicalMeasurementAxisElements();
		this.pLogicalMeasurementAttribute = new LogicalMeasurementAttributeElements();
		this.pLogicalMeasurementConversion = new LogicalMeasurementConversionElements();
		this.pLogicalComposableElement = new LogicalComposableElementElements();
		this.pLogicalCharacteristic = new LogicalCharacteristicElements();
		this.pLogicalEntity = new LogicalEntityElements();
		this.pLogicalComposition = new LogicalCompositionElements();
		this.pLogicalAssociation = new LogicalAssociationElements();
		this.pLogicalParticipant = new LogicalParticipantElements();
		this.pLogicalPathNode = new LogicalPathNodeElements();
		this.pLogicalParticipantPathNode = new LogicalParticipantPathNodeElements();
		this.pLogicalCharacteristicPathNode = new LogicalCharacteristicPathNodeElements();
		this.pLogicalView = new LogicalViewElements();
		this.pLogicalQuery = new LogicalQueryElements();
		this.pLogicalCompositeQuery = new LogicalCompositeQueryElements();
		this.pLogicalQueryComposition = new LogicalQueryCompositionElements();
		this.pPlatformElement = new PlatformElementElements();
		this.pPlatformComposableElement = new PlatformComposableElementElements();
		this.pPlatformDataType = new PlatformDataTypeElements();
		this.pPlatformPrimitive = new PlatformPrimitiveElements();
		this.pPlatformBoolean = new PlatformBooleanElements();
		this.pPlatformOctet = new PlatformOctetElements();
		this.pPlatformChar = new PlatformCharElements();
		this.pPlatformStringType = new PlatformStringTypeElements();
		this.pPlatformString = new PlatformStringElements();
		this.pPlatformBoundedString = new PlatformBoundedStringElements();
		this.pPlatformCharArray = new PlatformCharArrayElements();
		this.pPlatformEnumeration = new PlatformEnumerationElements();
		this.pPlatformNumber = new PlatformNumberElements();
		this.pPlatformInteger = new PlatformIntegerElements();
		this.pPlatformShort = new PlatformShortElements();
		this.pPlatformLong = new PlatformLongElements();
		this.pPlatformLongLong = new PlatformLongLongElements();
		this.pPlatformReal = new PlatformRealElements();
		this.pPlatformDouble = new PlatformDoubleElements();
		this.pPlatformLongDouble = new PlatformLongDoubleElements();
		this.pPlatformFloat = new PlatformFloatElements();
		this.pPlatformFixed = new PlatformFixedElements();
		this.pPlatformUnsignedInteger = new PlatformUnsignedIntegerElements();
		this.pPlatformUShort = new PlatformUShortElements();
		this.pPlatformULong = new PlatformULongElements();
		this.pPlatformULongLong = new PlatformULongLongElements();
		this.pPlatformSequence = new PlatformSequenceElements();
		this.pPlatformArray = new PlatformArrayElements();
		this.pPlatformStruct = new PlatformStructElements();
		this.pPlatformStructMember = new PlatformStructMemberElements();
		this.pPlatformCharacteristic = new PlatformCharacteristicElements();
		this.pPlatformEntity = new PlatformEntityElements();
		this.pPlatformComposition = new PlatformCompositionElements();
		this.pPlatformAssociation = new PlatformAssociationElements();
		this.pPlatformParticipant = new PlatformParticipantElements();
		this.pPlatformPathNode = new PlatformPathNodeElements();
		this.pPlatformParticipantPathNode = new PlatformParticipantPathNodeElements();
		this.pPlatformCharacteristicPathNode = new PlatformCharacteristicPathNodeElements();
		this.pPlatformView = new PlatformViewElements();
		this.pPlatformQuery = new PlatformQueryElements();
		this.pPlatformCompositeQuery = new PlatformCompositeQueryElements();
		this.pPlatformQueryComposition = new PlatformQueryCompositionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.epistimis.uddl.Uddl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////// Starter rule comes first
	////ModelFile:
	////    includes+=Include*
	////    dataModel=DataModel
	////;
	///** A DataModel is a container for ConceptualDataModels, LogicalDataModels, and PlatformDataModels */
	//DataModel:
	//    'dm' name=ID (description=STRING)? '{'
	//        (cdm+=ConceptualDataModel |
	//        ldm+=LogicalDataModel |
	//        pdm+=PlatformDataModel)*
	//    '}'
	//    ;
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}
	
	//// A few generic rules
	//terminal fragment DEC:  ('0'..'9')+;
	public TerminalRule getDECRule() {
		return tDEC;
	}
	
	//// TODO: This needs code to process the +|- when creating int or float?
	///** INT override causing ambiguity with XBase */
	//@Override
	//terminal INT returns ecore::EInt:  ('+'|'-')? DEC;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	////LONG returns ecore::ELong: INT ("L"|"l");
	//terminal FLOAT returns ecore::EFloat : ('+'|'-')? DEC '.' DEC;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	////DOUBLE returns ecore::EDouble : INT '.' INT ('D'|'d');
	//QN:
	//    ID ('.' ID)*;
	public QNElements getQNAccess() {
		return pQN;
	}
	
	public ParserRule getQNRule() {
		return getQNAccess().getRule();
	}
	
	///**
	// * Use 'include' because 'import' is an XBase keyword
	// */
	//Include:
	//    'include' importedNamespace=QualifiedNameWithWildcard;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	///**
	// * Already defined in XBase
	// */
	//QualifiedNameWithWildcard:
	//    QN '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	// // Metamodel concepts starts here
	///** An Element is the root type for defining all named elements in the DataModel. The “name” attribute captures the name of the Element in the model. The “description” attribute captures a description for the Element. */
	//UddlElement:  // This is datamodel.Element but it's too much hassle to fix after the fact.
	//    DataModel |
	//    ConceptualDataModel | LogicalDataModel | PlatformDataModel|
	//    ConceptualElement|
	//    LogicalElement |
	//    PlatformElement |
	//    LogicalReferencePoint |
	//    LogicalEnumerationLabel |
	//    LogicalConstraint
	//;
	public UddlElementElements getUddlElementAccess() {
		return pUddlElement;
	}
	
	public ParserRule getUddlElementRule() {
		return getUddlElementAccess().getRule();
	}
	
	///** A ConceptualDataModel is a container for CDM Elements. */
	//ConceptualDataModel:
	//    'cdm'    name=ID (description=STRING)? '{'
	//        (element+=ConceptualElement | cdm+=ConceptualDataModel)*
	//    '}'
	//;
	public ConceptualDataModelElements getConceptualDataModelAccess() {
		return pConceptualDataModel;
	}
	
	public ParserRule getConceptualDataModelRule() {
		return getConceptualDataModelAccess().getRule();
	}
	
	///** A LogicalDataModel is a container for LDM Elements. */
	//LogicalDataModel:
	//    'ldm'    name=ID (description=STRING)? '{'
	//        (element+=LogicalElement | ldm+=LogicalDataModel)*
	//    '}'
	//;
	public LogicalDataModelElements getLogicalDataModelAccess() {
		return pLogicalDataModel;
	}
	
	public ParserRule getLogicalDataModelRule() {
		return getLogicalDataModelAccess().getRule();
	}
	
	///** A PlatformDataModel is a container for platform Data Model elements. */
	//PlatformDataModel:
	//    'pdm'    name=ID (description=STRING)? '{'
	//        (element+=PlatformElement | pdm+=PlatformDataModel)*
	//    '}'
	//;
	public PlatformDataModelElements getPlatformDataModelAccess() {
		return pPlatformDataModel;
	}
	
	public ParserRule getPlatformDataModelRule() {
		return getPlatformDataModelAccess().getRule();
	}
	
	///** A conceptual Element is the root type for defining the conceptual elements of a Data Model. */
	//ConceptualElement:
	//    ConceptualDomain |
	//    ConceptualBasisEntity |
	//    ConceptualComposableElement |
	//    ConceptualView
	//;
	public ConceptualElementElements getConceptualElementAccess() {
		return pConceptualElement;
	}
	
	public ParserRule getConceptualElementRule() {
		return getConceptualElementAccess().getRule();
	}
	
	///** A conceptual ComposableElement is a conceptual Element that is allowed to participate in a Composition relationship. In other words, these are the conceptual Elements that may be a characteristic of a conceptual Entity. */
	//ConceptualComposableElement:
	//    ConceptualEntity |
	//    ConceptualObservable
	//;
	public ConceptualComposableElementElements getConceptualComposableElementAccess() {
		return pConceptualComposableElement;
	}
	
	public ParserRule getConceptualComposableElementRule() {
		return getConceptualComposableElementAccess().getRule();
	}
	
	////NOTE: BasisElement has single inheritance - it has no independent functionality so it gets dropped
	//// A conceptual BasisElement is a conceptual data type that is independent of any specific data representation.
	///** A BasisEntity represents a unique domain concept and establishes a basis which can be used by conceptual Entities.  */
	//ConceptualBasisEntity:
	//    'basis' name=ID (description=STRING)? ';'
	//;
	public ConceptualBasisEntityElements getConceptualBasisEntityAccess() {
		return pConceptualBasisEntity;
	}
	
	public ParserRule getConceptualBasisEntityRule() {
		return getConceptualBasisEntityAccess().getRule();
	}
	
	///** A Domain represents a space defined by a set of BasisEntities relating to well understood concepts by practitioners within a particular domain.  */
	//ConceptualDomain:
	//    'domain' name=ID (description=STRING)? ';'
	//;
	public ConceptualDomainElements getConceptualDomainAccess() {
		return pConceptualDomain;
	}
	
	public ParserRule getConceptualDomainRule() {
		return getConceptualDomainAccess().getRule();
	}
	
	///** An Observable is something that can be observed but not further characterized, and is typically quantified through measurements of the physical world. An observable is independent of any specific data representation, units, or reference frame. For example, “length” may be thought of as an observable in that it can be measured, but at the conceptual level the nature of the measurement is not specified. */
	//ConceptualObservable:
	//    'observable' name=ID (description=STRING)? ';'
	//;
	public ConceptualObservableElements getConceptualObservableAccess() {
		return pConceptualObservable;
	}
	
	public ParserRule getConceptualObservableRule() {
		return getConceptualObservableAccess().getRule();
	}
	
	///** Either a ConceptualComposition or a ConceptualParticipant.
	// * A conceptual Characteristic contributes to the uniqueness of a conceptual Entity. The “rolename” attribute defines the name of the conceptual Characteristic within the scope of the conceptual Entity. The “lowerBound” and “upperBound” attributes define the multiplicity of the composed Characteristic. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
	//ConceptualCharacteristic:
	//    ConceptualComposition |
	//    ConceptualParticipant
	//;
	public ConceptualCharacteristicElements getConceptualCharacteristicAccess() {
		return pConceptualCharacteristic;
	}
	
	public ParserRule getConceptualCharacteristicRule() {
		return getConceptualCharacteristicAccess().getRule();
	}
	
	///** A conceptual Entity represents a domain concept in terms of its Observables and other composed conceptual Entities. Since a conceptual Entity is built only from conceptual ComposableElements, it is independent of any specific data representation, units, or reference frame. */
	//ConceptualEntity:
	//    ConceptualAssociation |
	//    'centity' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
	//        composition+=ConceptualComposition*
	//        ('basis:' '[' basisEntity+=[ConceptualBasisEntity|QN]+ ']')?
	//    '};'
	//;
	public ConceptualEntityElements getConceptualEntityAccess() {
		return pConceptualEntity;
	}
	
	public ParserRule getConceptualEntityRule() {
		return getConceptualEntityAccess().getRule();
	}
	
	///** A conceptual Composition is the mechanism that allows conceptual Entities to be constructed from other conceptual ComposableElements. The “type” of a Composition is the ComposableElement being used to construct the conceptual Entity. */
	//ConceptualComposition:
	//    type=[ConceptualComposableElement|QN]  rolename=ID ('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')? (description=STRING)? (':' specializes=[ConceptualCharacteristic|QN])? ';'
	//;
	public ConceptualCompositionElements getConceptualCompositionAccess() {
		return pConceptualComposition;
	}
	
	public ParserRule getConceptualCompositionRule() {
		return getConceptualCompositionAccess().getRule();
	}
	
	///** A conceptual Association represents a relationship between two or more conceptual Entities. The conceptual Entities participating in the conceptual Association may be specified locally or in its generalized types. In addition, there may be one or more conceptual ComposableElements that characterize the relationship. Conceptual Associations are conceptual Entities that may also participate in other conceptual Associations. */
	//ConceptualAssociation:
	//        'cassoc' name=ID (description=STRING)? (':' specializes=[ConceptualEntity|QN])? '{'
	//        composition+=ConceptualComposition*
	//        ('basis:' '[' ConceptualBasisEntity+=[ConceptualBasisEntity|QN]+ ']')?
	//        ('participants:' '[' participant+=ConceptualParticipant+ ']')?
	//    '};'
	//;
	public ConceptualAssociationElements getConceptualAssociationAccess() {
		return pConceptualAssociation;
	}
	
	public ParserRule getConceptualAssociationRule() {
		return getConceptualAssociationAccess().getRule();
	}
	
	///** A conceptual Participant is the mechanism that allows a conceptual Association to be constructed between two or more conceptual Entities. The “type” of a conceptual Participant is the conceptual Entity being used to construct the conceptual Association. The “sourceLowerBound” and “sourceUpperBound” attributes define the multiplicity of the conceptual Association relative to the Participant. A “sourceUpperBound” multiplicity of –1 represents an unbounded sequence. The “path” attribute of the Participant describes the chain of entity characteristics to traverse to reach the subject of the association beginning with the entity referenced by the “type” attribute.  */
	//ConceptualParticipant:
	//    type=[ConceptualEntity|QN]  rolename=ID ('[' (lowerBound=INT)? ':' (upperBound=INT)? ']')? (description=STRING)? (':' specializes=[ConceptualCharacteristic|QN])?
	//        '{'
	//            'src:' '['sourceLowerBound=INT ':' sourceUpperBound=INT ']'
	//            ('path:' path=ConceptualPathNode)?
	//        '}'
	//        ';'
	//;
	public ConceptualParticipantElements getConceptualParticipantAccess() {
		return pConceptualParticipant;
	}
	
	public ParserRule getConceptualParticipantRule() {
		return getConceptualParticipantAccess().getRule();
	}
	
	///** Either a ConceptualParticipantPathNode or a ConceptualCharacteristicPathNode.
	// * A conceptual PathNode is a single element in a chain that collectively forms a path specification. */
	//ConceptualPathNode:
	//    ConceptualParticipantPathNode |
	//    ConceptualCharacteristicPathNode
	//;
	public ConceptualPathNodeElements getConceptualPathNodeAccess() {
		return pConceptualPathNode;
	}
	
	public ParserRule getConceptualPathNodeRule() {
		return getConceptualPathNodeAccess().getRule();
	}
	
	//// NOTE: There is something I did to set up the path resolution here that made things very succinct. I think it had to do
	//// with the NameProvider?
	///** A conceptual ParticipantPathNode is a conceptual PathNode that selects a Participant that references an Entity. This provides a mechanism for reverse navigation from an Entity that participates in an Association back to the Association. */
	//ConceptualParticipantPathNode:
	//    '/' projectedParticipant=[ConceptualParticipant|QN]
	//    ( node=ConceptualPathNode )?
	//;
	public ConceptualParticipantPathNodeElements getConceptualParticipantPathNodeAccess() {
		return pConceptualParticipantPathNode;
	}
	
	public ParserRule getConceptualParticipantPathNodeRule() {
		return getConceptualParticipantPathNodeAccess().getRule();
	}
	
	///** A conceptual CharacteristicPathNode is a conceptual PathNode that selects a conceptual Characteristic which is directly contained in a conceptual Entity or Association. */
	//ConceptualCharacteristicPathNode:
	//    '#' projectedCharacteristic=[ConceptualCharacteristic|QN]
	//    ( node=ConceptualPathNode )?
	//;
	public ConceptualCharacteristicPathNodeElements getConceptualCharacteristicPathNodeAccess() {
		return pConceptualCharacteristicPathNode;
	}
	
	public ParserRule getConceptualCharacteristicPathNodeRule() {
		return getConceptualCharacteristicPathNodeAccess().getRule();
	}
	
	///** Either a ConceptualQuery or a ConceptualCompositeQuery.
	// * A conceptual View is a conceptual Query or a conceptual CompositeQuery. */
	//ConceptualView:
	//    ConceptualQuery |
	//    ConceptualCompositeQuery
	//;
	public ConceptualViewElements getConceptualViewAccess() {
		return pConceptualView;
	}
	
	public ParserRule getConceptualViewRule() {
		return getConceptualViewAccess().getRule();
	}
	
	///** A conceptual Query is a specification that defines the content of conceptual View as a set of conceptual Characteristics projected from a selected set of related conceptual Entities. The “specification” attribute captures the specification of a Query as defined by the Query grammar.  */
	//ConceptualQuery:
	//    'cquery' name=ID (description=STRING)? '{'
	//        'spec:' specification=STRING
	//    '};'
	//;
	public ConceptualQueryElements getConceptualQueryAccess() {
		return pConceptualQuery;
	}
	
	public ParserRule getConceptualQueryRule() {
		return getConceptualQueryAccess().getRule();
	}
	
	///** A conceptual CompositeQuery is a collection of two or more conceptual Views. The “isUnion” attribute specifies whether the composed Views are intended to be mutually exclusive or not. */
	//ConceptualCompositeQuery:
	//    'ccquery' name=ID (description=STRING)? '{'
	//        isUnion?='isUnion'
	//        composition+=ConceptualQueryComposition
	//        (composition+=ConceptualQueryComposition)+
	//    '};'
	//;
	public ConceptualCompositeQueryElements getConceptualCompositeQueryAccess() {
		return pConceptualCompositeQuery;
	}
	
	public ParserRule getConceptualCompositeQueryRule() {
		return getConceptualCompositeQueryAccess().getRule();
	}
	
	///** A conceptual QueryComposition is the mechanism that allows a conceptual CompositeQuery to be constructed from conceptual Queries and other conceptual CompositeQueries. The “rolename” attribute defines the name of the composed conceptual View within the scope of the composing conceptual CompositeQuery. The “type” of a conceptual QueryComposition is the conceptual View being used to construct the conceptual CompositeQuery. */
	//ConceptualQueryComposition:
	//    type=[ConceptualView|QN] rolename=ID ';'
	//;
	public ConceptualQueryCompositionElements getConceptualQueryCompositionAccess() {
		return pConceptualQueryComposition;
	}
	
	public ParserRule getConceptualQueryCompositionRule() {
		return getConceptualQueryCompositionAccess().getRule();
	}
	
	///** A logical Element is the root type for defining the logical elements of a Data Model. */
	//LogicalElement:
	//    LogicalComposableElement |
	//    LogicalConversion | // LogicalConversion has a single inheritance of LogicalAffineConversion - so that is promoted to here
	//    LogicalUnit | //LogicalConvertibleElement | // LogicalConvertibleElement has a single inheritance of LogicalUnit - promote that to here
	//    LogicalCoordinateSystem |
	//    LogicalCoordinateSystemAxis |
	//    LogicalMeasurementConversion |
	//    LogicalMeasurementSystemConversion |
	//    LogicalMeasurementAxis | // Also derived from AbstractMeasurement
	//    LogicalAbstractMeasurementSystem| //LogicalMeasurementSystem |
	//    LogicalMeasurementSystemAxis |
	//    LogicalValueType | // Also derived from AbstractMeasurement
	//    LogicalView |
	//    LogicalLandmark |
	//    LogicalValueTypeUnit
	//;
	public LogicalElementElements getLogicalElementAccess() {
		return pLogicalElement;
	}
	
	public ParserRule getLogicalElementRule() {
		return getLogicalElementAccess().getRule();
	}
	
	//// NOTE: LogicalConvertibleElement has LogicalUnit as a single inheritance. Since it has nothing else, promote LogicalUnit directly
	//// to LogicalElement
	///** A ConvertibleElement is a Unit. */
	///** A Unit is a defined magnitude of quantity used as a standard for measurement.  */
	//LogicalUnit:
	//    'lunit' name=ID (description=STRING)? ';'
	//;
	public LogicalUnitElements getLogicalUnitAccess() {
		return pLogicalUnit;
	}
	
	public ParserRule getLogicalUnitRule() {
		return getLogicalUnitAccess().getRule();
	}
	
	//// NOTE: LogicalConversion has LogicalAffineConversion as a single inheritance. Since it has nothing else, promote LogicalAffineConversion directly
	//// to LogicalElement
	///** A Conversion is a relationship between two ConvertibleElements that describes how to transform measured quantities between two Units. */
	//LogicalConversion:
	//    'conv' name=ID  (description=STRING)? '{'
	//        source=[LogicalAssociation|QN] '-()>'  destination=[LogicalAssociation|QN]
	//        '};' |
	//    LogicalAffineConversion
	//;
	public LogicalConversionElements getLogicalConversionAccess() {
		return pLogicalConversion;
	}
	
	public ParserRule getLogicalConversionRule() {
		return getLogicalConversionAccess().getRule();
	}
	
	///** An AffineConversion is a relationship between two ConvertibleElements in the form mx+b. */
	//LogicalAffineConversion:
	//    'aconv' name=ID  (description=STRING)? '{'
	//        source=[LogicalAssociation|QN] '-(' 'm:' conversionFactor=FLOAT 'b:' offset=FLOAT ')->'  destination=[LogicalAssociation|QN]
	//    '};'
	//;
	public LogicalAffineConversionElements getLogicalAffineConversionAccess() {
		return pLogicalAffineConversion;
	}
	
	public ParserRule getLogicalAffineConversionRule() {
		return getLogicalAffineConversionAccess().getRule();
	}
	
	///** A ValueType specifies the logical representation of a MeasurementSystem or Measurement. Integer, Real, and String are examples of logical ValueTypes. */
	//LogicalValueType:
	//    LogicalBoolean |
	//    LogicalNumeric |
	//    LogicalCharacter |
	//    LogicalString |
	//    LogicalEnumeratedBase // EXTENSION
	//;
	public LogicalValueTypeElements getLogicalValueTypeAccess() {
		return pLogicalValueType;
	}
	
	public ParserRule getLogicalValueTypeRule() {
		return getLogicalValueTypeAccess().getRule();
	}
	
	///** A String is a value type that represents a variable length sequence of characters. */
	//LogicalString:                     'str'     name=ID (description=STRING)? ';'     ;
	public LogicalStringElements getLogicalStringAccess() {
		return pLogicalString;
	}
	
	public ParserRule getLogicalStringRule() {
		return getLogicalStringAccess().getRule();
	}
	
	///** A Character is a value type representing characters from any character set. */
	//LogicalCharacter:                 'ch'     name=ID (description=STRING)? ';'    ;
	public LogicalCharacterElements getLogicalCharacterAccess() {
		return pLogicalCharacter;
	}
	
	public ParserRule getLogicalCharacterRule() {
		return getLogicalCharacterAccess().getRule();
	}
	
	///** A Boolean is a value type representing the two values TRUE and FALSE. */
	//LogicalBoolean:                    'bool'     name=ID (description=STRING)? ';'    ;
	public LogicalBooleanElements getLogicalBooleanAccess() {
		return pLogicalBoolean;
	}
	
	public ParserRule getLogicalBooleanRule() {
		return getLogicalBooleanAccess().getRule();
	}
	
	///** A Numeric is a numeric ValueType. */
	//LogicalNumeric:
	//    LogicalInteger |
	//    LogicalNatural |
	//    LogicalReal |
	//    LogicalNonNegativeReal
	//;
	public LogicalNumericElements getLogicalNumericAccess() {
		return pLogicalNumeric;
	}
	
	public ParserRule getLogicalNumericRule() {
		return getLogicalNumericAccess().getRule();
	}
	
	///** An Integer is a value type representing integer numbers. */
	//LogicalInteger:                    'int'     name=ID (description=STRING)? ';'    ;
	public LogicalIntegerElements getLogicalIntegerAccess() {
		return pLogicalInteger;
	}
	
	public ParserRule getLogicalIntegerRule() {
		return getLogicalIntegerAccess().getRule();
	}
	
	///** A Natural is a value type representing the non-negative integers. */
	//LogicalNatural:                    'nat'     name=ID (description=STRING)? ';'    ;
	public LogicalNaturalElements getLogicalNaturalAccess() {
		return pLogicalNatural;
	}
	
	public ParserRule getLogicalNaturalRule() {
		return getLogicalNaturalAccess().getRule();
	}
	
	///** A Real is a value type representing real numbers. */
	//LogicalReal:                    'real'     name=ID (description=STRING)? ';'    ;
	public LogicalRealElements getLogicalRealAccess() {
		return pLogicalReal;
	}
	
	public ParserRule getLogicalRealRule() {
		return getLogicalRealAccess().getRule();
	}
	
	///** A NonNegativeReal is a value type representing non-negative real numbers. */
	//LogicalNonNegativeReal:            'real+' name=ID (description=STRING)? ';'    ;
	public LogicalNonNegativeRealElements getLogicalNonNegativeRealAccess() {
		return pLogicalNonNegativeReal;
	}
	
	public ParserRule getLogicalNonNegativeRealRule() {
		return getLogicalNonNegativeRealAccess().getRule();
	}
	
	///** An Enumerated is a value type representing a set of named values, each with specific meaning. */
	//LogicalEnumerated:
	//    'enum'     name=ID (description=STRING)?
	//        ('stdRef:' standardReference=STRING)?
	//        '['
	//        label+=(LogicalEnumerationLabel | LogicalEnumeratedSet) ','? (label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
	//        ']'
	//        ';'
	//        ;
	public LogicalEnumeratedElements getLogicalEnumeratedAccess() {
		return pLogicalEnumerated;
	}
	
	public ParserRule getLogicalEnumeratedRule() {
		return getLogicalEnumeratedAccess().getRule();
	}
	
	///**EXTENSION: The foundation for every taxonomic type hierarchy. Override and extend as needed */
	//Taxonomy:
	//    LogicalEnumeratedBase
	//;
	public TaxonomyElements getTaxonomyAccess() {
		return pTaxonomy;
	}
	
	public ParserRule getTaxonomyRule() {
		return getTaxonomyAccess().getRule();
	}
	
	///**EXTENSION: Creates the foundation for a hierarchy of enumerated values  */
	//LogicalEnumeratedBase:
	//    LogicalEnumeratedSet |
	//    LogicalEnumerationLabel |
	//    LogicalEnumerated
	//;
	public LogicalEnumeratedBaseElements getLogicalEnumeratedBaseAccess() {
		return pLogicalEnumeratedBase;
	}
	
	public ParserRule getLogicalEnumeratedBaseRule() {
		return getLogicalEnumeratedBaseAccess().getRule();
	}
	
	///**EXTENSION: allowing label to be a LogicalEnumeratedSet enables taxonomy definitions via enumerations  */
	//LogicalEnumeratedSet:
	//        '(' name=ID (description=STRING)?
	//        '['
	//        label+=(LogicalEnumerationLabel | LogicalEnumeratedSet) ','? (label+=(LogicalEnumerationLabel| LogicalEnumeratedSet) ','?)*
	//        ']' ')'
	//        ;
	public LogicalEnumeratedSetElements getLogicalEnumeratedSetAccess() {
		return pLogicalEnumeratedSet;
	}
	
	public ParserRule getLogicalEnumeratedSetRule() {
		return getLogicalEnumeratedSetAccess().getRule();
	}
	
	///** An EnumerationLabel defines a named member of an Enumerated value set. */
	//LogicalEnumerationLabel:    name=ID |    '(' name=ID description=STRING ')' ;
	public LogicalEnumerationLabelElements getLogicalEnumerationLabelAccess() {
		return pLogicalEnumerationLabel;
	}
	
	public ParserRule getLogicalEnumerationLabelRule() {
		return getLogicalEnumerationLabelAccess().getRule();
	}
	
	///** A CoordinateSystem is a system which uses one or more coordinates to uniquely determine the position of a point in an N-dimensional space. The coordinate system is comprised of multiple CoordinateSystemAxis which completely span the space. Coordinates are quantified relative to the CoordinateSystemAxis. It is not required that the dimensions be ordered or continuous. */
	//LogicalCoordinateSystem:
	//    'coord' name=ID (description=STRING)? '{'
	//        ('axis:'         axisRelationshipDescription=STRING)?
	//        ('angleEq:'     angleEquation=STRING)?
	//        ('distanceEq:'     distanceEquation=STRING)?
	//        '['axis+=[LogicalCoordinateSystemAxis|QN]+ ']'
	//    '};'
	//;
	public LogicalCoordinateSystemElements getLogicalCoordinateSystemAccess() {
		return pLogicalCoordinateSystem;
	}
	
	public ParserRule getLogicalCoordinateSystemRule() {
		return getLogicalCoordinateSystemAccess().getRule();
	}
	
	///** A CoordinateSystemAxis represents a dimension within a CoordinateSystem. */
	//LogicalCoordinateSystemAxis:
	//    'csa' name=ID (description=STRING)? ';'
	//;
	public LogicalCoordinateSystemAxisElements getLogicalCoordinateSystemAxisAccess() {
		return pLogicalCoordinateSystemAxis;
	}
	
	public ParserRule getLogicalCoordinateSystemAxisRule() {
		return getLogicalCoordinateSystemAxisAccess().getRule();
	}
	
	///** An AbstractMeasurementSystem is an abstract parent for StandardMeasurementSystems and MeasurementSystems. It is used for structural simplicity in the metamodel.  */
	//LogicalAbstractMeasurementSystem:
	//    LogicalStandardMeasurementSystem |
	//    LogicalMeasurementSystem
	//;
	public LogicalAbstractMeasurementSystemElements getLogicalAbstractMeasurementSystemAccess() {
		return pLogicalAbstractMeasurementSystem;
	}
	
	public ParserRule getLogicalAbstractMeasurementSystemRule() {
		return getLogicalAbstractMeasurementSystemAccess().getRule();
	}
	
	///** A StandardMeasurementSystem is used to represent an open, referenced measurement system without requiring the detailed modeling of the measurement system. The reference should be unambiguous and allows for full comprehension of the underlying measurement system. */
	//LogicalStandardMeasurementSystem:
	//    'smsys' name=ID (description=STRING)? '{'
	//        'refStd:' referenceStandard=STRING
	//    '};'
	//;
	public LogicalStandardMeasurementSystemElements getLogicalStandardMeasurementSystemAccess() {
		return pLogicalStandardMeasurementSystem;
	}
	
	public ParserRule getLogicalStandardMeasurementSystemRule() {
		return getLogicalStandardMeasurementSystemAccess().getRule();
	}
	
	///** A Landmark is a named, recognizable or artificial feature used to locate a ReferencePoint in a measurable space. */
	//LogicalLandmark:
	//    'landmark' name=ID (description=STRING)? ';'
	//;
	public LogicalLandmarkElements getLogicalLandmarkAccess() {
		return pLogicalLandmark;
	}
	
	public ParserRule getLogicalLandmarkRule() {
		return getLogicalLandmarkAccess().getRule();
	}
	
	///** A MeasurementSystem relates a CoordinateSystem to an origin and orientation for the purpose of establishing a common basis for describing points in an N-dimensional space. Defining a MeasurementSystem establishes additional properties of the CoordinateSystem including units and value types for each axis, and a set of reference points that can be used to establish an origin and indicate the direction of each axis. */
	//LogicalMeasurementSystem:
	//    'msys' name=ID (description=STRING)? '{'
	//        'maxis:' '[' measurementSystemAxis+=[LogicalMeasurementSystemAxis|QN]+ ']'
	//        'coord:' coordinateSystem=[LogicalCoordinateSystem|QN]
	//        ('extRefStd:' externalStandardReference=STRING)?
	//        ('orient:' orientation=STRING)?
	//        ('refPt:' '[' referencePoint+=LogicalReferencePoint+ ']')?
	//        ('![' constraint+=LogicalMeasurementConstraint+ ']')?
	//    '};'
	//;
	public LogicalMeasurementSystemElements getLogicalMeasurementSystemAccess() {
		return pLogicalMeasurementSystem;
	}
	
	public ParserRule getLogicalMeasurementSystemRule() {
		return getLogicalMeasurementSystemAccess().getRule();
	}
	
	///** A MeasurementSystemAxis establishes additional properties for a CoordinateSystemAxis including units and value types. */
	//LogicalMeasurementSystemAxis:
	//    'msa' name=ID (description=STRING)? '{'
	//        'axis:' axis=[LogicalCoordinateSystemAxis|QN]
	//        'vtu:' '[' defaultValueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']'
	//        ('![' constraint+=LogicalMeasurementConstraint+ ']'    )?
	//    '};'
	//;
	public LogicalMeasurementSystemAxisElements getLogicalMeasurementSystemAxisAccess() {
		return pLogicalMeasurementSystemAxis;
	}
	
	public ParserRule getLogicalMeasurementSystemAxisRule() {
		return getLogicalMeasurementSystemAxisAccess().getRule();
	}
	
	///** A ReferencePoint is an identifiable point (landmark) that can be used to provide a basis for locating and/or orienting a MeasurementSystem. */
	//LogicalReferencePoint:
	//    '(' name=ID (description=STRING)?
	//        'landmark:' landmark=[LogicalLandmark|QN]
	//        '[' referencePointPart+=LogicalReferencePointPart+ ']'
	//    ')'
	//;
	public LogicalReferencePointElements getLogicalReferencePointAccess() {
		return pLogicalReferencePoint;
	}
	
	public ParserRule getLogicalReferencePointRule() {
		return getLogicalReferencePointAccess().getRule();
	}
	
	///** A ReferencePointPart is a value for one ValueTypeUnit in a ValueTypeUnit set that is used to identify a specific point along an axis.  */
	//LogicalReferencePointPart:
	//    '(' (axis=[LogicalMeasurementSystemAxis|QN])?  value=STRING  (valueTypeUnit=[LogicalValueTypeUnit|QN])? ')'
	//;
	public LogicalReferencePointPartElements getLogicalReferencePointPartAccess() {
		return pLogicalReferencePointPart;
	}
	
	public ParserRule getLogicalReferencePointPartRule() {
		return getLogicalReferencePointPartAccess().getRule();
	}
	
	///** A ValueTypeUnit defines the logical representation of a MeasurementSystemAxis or MeasurementAxis value type in terms of a Unit and ValueType pair. */
	//LogicalValueTypeUnit:
	//    'vtu' valueType=[LogicalValueType|QN] unit=[LogicalUnit|QN] name=ID (description=STRING)?
	//    ('{' '!' constraint=LogicalConstraint '}')?
	//     ';'
	//;
	public LogicalValueTypeUnitElements getLogicalValueTypeUnitAccess() {
		return pLogicalValueTypeUnit;
	}
	
	public ParserRule getLogicalValueTypeUnitRule() {
		return getLogicalValueTypeUnitAccess().getRule();
	}
	
	///** A Constraint limits the set of possible values for the ValueType of a MeasurementSystem or Measurement. */
	//LogicalConstraint:
	//    LogicalStringConstraint |
	//    LogicalRealRangeConstraint | //LogicalRealConstraint | //LogicalRealConstraint has a single inheritance of LogicalRealRangeConstraint - promote that to here
	//    LogicalIntegerRangeConstraint | //LogicalIntegerConstraint | //LogicalIntegerConstraint has single inheritance of LogicalIntegerRangeConstraint
	//    LogicalEnumerationConstraint
	//;
	public LogicalConstraintElements getLogicalConstraintAccess() {
		return pLogicalConstraint;
	}
	
	public ParserRule getLogicalConstraintRule() {
		return getLogicalConstraintAccess().getRule();
	}
	
	///** An IntegerConstraint specifies a defined set of meaningful values for an Integer or Natural. */
	////LogicalIntegerConstraint:
	////    LogicalIntegerRangeConstraint
	////;
	///** An IntegerRangeConstraint specifies a defined range of meaningful values for an Integer or Natural. The “upperBound” is greater than or equal to the “lowerBound”. The defined range is inclusive of the “upperBound” and “lowerBound”. */
	//LogicalIntegerRangeConstraint:
	//    'irc'  name=ID '[' lowerBound=INT ':' upperBound=INT ']' (description=STRING)?  ';'
	//;
	public LogicalIntegerRangeConstraintElements getLogicalIntegerRangeConstraintAccess() {
		return pLogicalIntegerRangeConstraint;
	}
	
	public ParserRule getLogicalIntegerRangeConstraintRule() {
		return getLogicalIntegerRangeConstraintAccess().getRule();
	}
	
	///** A RealConstraint specifies a defined set of meaningful values for a Real or NonNegativeReal. */
	////LogicalRealConstraint:
	////    LogicalRealRangeConstraint
	////;
	//// TODO: There is a way to default this to handle the include exclude bounds - is this it?
	///** A RealRangeConstraint specifies a defined range of meaningful values for a Real or NonNegativeReal. The “upperBound” is greater than or equal to the “lowerBound”. */
	//LogicalRealRangeConstraint:
	//    'rrc' name=ID ( '(' | lowerBoundInclusive?='[') lowerBound=FLOAT ':' upperBound=FLOAT (')'| upperBoundInclusive?=']') (description=STRING)?  ';'
	//;
	public LogicalRealRangeConstraintElements getLogicalRealRangeConstraintAccess() {
		return pLogicalRealRangeConstraint;
	}
	
	public ParserRule getLogicalRealRangeConstraintRule() {
		return getLogicalRealRangeConstraintAccess().getRule();
	}
	
	///** A StringConstraint specifies a defined set of meaningful values for a String */
	//LogicalStringConstraint:
	//    LogicalRegularExpressionConstraint |
	//    LogicalFixedLengthStringConstraint
	//;
	public LogicalStringConstraintElements getLogicalStringConstraintAccess() {
		return pLogicalStringConstraint;
	}
	
	public ParserRule getLogicalStringConstraintRule() {
		return getLogicalStringConstraintAccess().getRule();
	}
	
	///** A RegularExpressionConstraint specifies a defined set of meaningful values for a String in the form of a regular expression. */
	//LogicalRegularExpressionConstraint:
	//    'rec' name=ID '[' expression=STRING ']'(description=STRING)? ';'
	//;
	public LogicalRegularExpressionConstraintElements getLogicalRegularExpressionConstraintAccess() {
		return pLogicalRegularExpressionConstraint;
	}
	
	public ParserRule getLogicalRegularExpressionConstraintRule() {
		return getLogicalRegularExpressionConstraintAccess().getRule();
	}
	
	///** A FixedLengthStringConstraint specifies a defined set of meaningful values for a String of a specific fixed length. The “length” attribute defines the fixed length, an integer value greater than 0. */
	//LogicalFixedLengthStringConstraint:
	//    'flsc' name=ID '[' length=INT ']' (description=STRING)? ';'
	//;
	public LogicalFixedLengthStringConstraintElements getLogicalFixedLengthStringConstraintAccess() {
		return pLogicalFixedLengthStringConstraint;
	}
	
	public ParserRule getLogicalFixedLengthStringConstraintRule() {
		return getLogicalFixedLengthStringConstraintAccess().getRule();
	}
	
	//// NOTE: While the spec technically allows zero labels, it makes no sense to have a constraint that doesn't
	//// actually constrain anything. It might be in dynamic cases that this list could end up being empty - but
	//// for now we assume it has to have at least 1 value
	///** An EnumerationConstraint identifies a subset of enumerated values (EnumerationLabel) considered valid for an Enumerated value type of a MeasurementAxis. */
	//LogicalEnumerationConstraint :
	//    {LogicalEnumerationConstraint} 'ec' name=ID (description=STRING)? ('[' (allowedValue+=[LogicalEnumerationLabel|QN])+ ']')?
	//;
	public LogicalEnumerationConstraintElements getLogicalEnumerationConstraintAccess() {
		return pLogicalEnumerationConstraint;
	}
	
	public ParserRule getLogicalEnumerationConstraintRule() {
		return getLogicalEnumerationConstraintAccess().getRule();
	}
	
	///** A MeasurementConstraint describes the constraints over the axes of a given MeasurementSystem or Measurement or over the value types of a MeasurementSystemAxis or MeasurementAxis. The constraints are described in the “constraintText” attribute. The specific format of “constraintText” is undefined. */
	//LogicalMeasurementConstraint:
	//     constraintText=STRING
	//;
	public LogicalMeasurementConstraintElements getLogicalMeasurementConstraintAccess() {
		return pLogicalMeasurementConstraint;
	}
	
	public ParserRule getLogicalMeasurementConstraintRule() {
		return getLogicalMeasurementConstraintAccess().getRule();
	}
	
	///** A MeasurementSystemConversion is a relationship between two MeasurementSystems that describes how to transform measured quantities between those MeasurementSystems. The conversion is captured as a set of equations in the “equation” attribute. The specific format of “equation” is undefined. The loss introduced by the conversion equations is captured in the “conversionLossDescription” attribute. The specific format of “conversionLossDescription” is undefined. */
	//LogicalMeasurementSystemConversion:
	//    'msc' name=ID  (description=STRING)? '{'
	//        source=[LogicalMeasurementSystem|QN] '-('equation+=STRING (',' equation+=STRING)? ')>' destination=[LogicalMeasurementSystem|QN]
	//        'loss:' conversionLossDescription=STRING
	//    '};'
	//;
	public LogicalMeasurementSystemConversionElements getLogicalMeasurementSystemConversionAccess() {
		return pLogicalMeasurementSystemConversion;
	}
	
	public ParserRule getLogicalMeasurementSystemConversionRule() {
		return getLogicalMeasurementSystemConversionAccess().getRule();
	}
	
	//// TODO: XText doesn't do multiple inheritance. Address this via a ScopeProvider
	//// See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
	//// Use a FilteringScope
	///** An AbstractMeasurement is a Measurement, MeasurementAxis, or a ValueTypeUnit. */
	////LogicalAbstractMeasurement:
	////    LogicalMeasurement |  // Use LogicalComposableElement
	////    LogicalMeasurementAxis | // Use LogicalElement
	////    LogicalValueTypeUnit  //Use LogicalElement
	////;
	///** A Measurement realizes an Observable as a set of quantities that can be recorded for each axis of a MeasurementSystem. A Measurement contains the specific implementation details optionally including an override of the default ValueType and Unit for each axis as well as the constraints over that space for which the MeasurementSystem is valid. */
	//LogicalMeasurement:
	//    'meas' name=ID  (description=STRING)? '->' realizes=[ConceptualObservable|QN] '{'
	//        attribute+=LogicalMeasurementAttribute*
	//        ('axis:' '[' measurementAxis+=[LogicalMeasurementAxis|QN]+ ']')?
	//        'sys:' measurementSystem=[LogicalAbstractMeasurementSystem|QN]
	//        ('![' constraint+=LogicalMeasurementConstraint ']')?
	//        '};'
	//;
	public LogicalMeasurementElements getLogicalMeasurementAccess() {
		return pLogicalMeasurement;
	}
	
	public ParserRule getLogicalMeasurementRule() {
		return getLogicalMeasurementAccess().getRule();
	}
	
	///** A MeasurementAxis optionally establishes constraints for a MeasurementSystemAxis and may optionally override its default units and value types. */
	//LogicalMeasurementAxis:
	//    'maxis' name=ID  (description=STRING)? ('->' realizes=[ConceptualObservable|QN])? '{'
	//        ('vtu:' '[' valueTypeUnit+=[LogicalValueTypeUnit|QN]+ ']')?
	//        'msaxis:' measurementSystemAxis=[LogicalMeasurementSystemAxis|QN]
	//        ('![' constraint+=LogicalMeasurementConstraint+ ']')?
	//    '};'
	//;
	public LogicalMeasurementAxisElements getLogicalMeasurementAxisAccess() {
		return pLogicalMeasurementAxis;
	}
	
	public ParserRule getLogicalMeasurementAxisRule() {
		return getLogicalMeasurementAxisAccess().getRule();
	}
	
	///** A MeasurementAttribute is supplemental data associated with a Measurement.  */
	//LogicalMeasurementAttribute:
	//    type=[LogicalMeasurement|QN] rolename=ID ';'
	//;
	public LogicalMeasurementAttributeElements getLogicalMeasurementAttributeAccess() {
		return pLogicalMeasurementAttribute;
	}
	
	public ParserRule getLogicalMeasurementAttributeRule() {
		return getLogicalMeasurementAttributeAccess().getRule();
	}
	
	///** A MeasurementConversion is a relationship between two Measurements that describes how to transform measured quantities between those Measurements. The conversion is captured as a set of equations in the “equation” attribute. The specific format of “equation” is undefined. The loss introduced by the conversion equations is captured in the “conversionLossDescription” attribute. The specific format of “conversionLossDescription” is undefined. */
	//LogicalMeasurementConversion:
	//    'mc' name=ID  (description=STRING)? '{'
	//        source=[LogicalMeasurementSystem|QN] '-(' equation+=STRING (',' equation+=STRING)? ')>' destination=[LogicalMeasurementSystem|QN]
	//        'loss:' conversionLossDescription=STRING
	//    '};'
	//;
	public LogicalMeasurementConversionElements getLogicalMeasurementConversionAccess() {
		return pLogicalMeasurementConversion;
	}
	
	public ParserRule getLogicalMeasurementConversionRule() {
		return getLogicalMeasurementConversionAccess().getRule();
	}
	
	///** A logical ComposableElement is a logical Element that is allowed to participate in a Composition relationship. In other words, these are the logical Elements that may be a characteristic of a logical Entity. */
	//LogicalComposableElement:
	//    LogicalEntity |
	//    LogicalMeasurement  // Also derived from AbstractMeasurement
	//;
	public LogicalComposableElementElements getLogicalComposableElementAccess() {
		return pLogicalComposableElement;
	}
	
	public ParserRule getLogicalComposableElementRule() {
		return getLogicalComposableElementAccess().getRule();
	}
	
	///** Either a LogicalComposition or a LogicalParticipant.
	// * A logical Characteristic contributes to the uniqueness of a logical Entity. The “rolename” attribute defines the name of the logical Characteristic within the scope of the logical Entity. The “lowerBound” and “upperBound” attributes define the multiplicity of the composed Characteristic. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
	//LogicalCharacteristic:
	//    LogicalComposition |
	//    LogicalParticipant
	//;
	public LogicalCharacteristicElements getLogicalCharacteristicAccess() {
		return pLogicalCharacteristic;
	}
	
	public ParserRule getLogicalCharacteristicRule() {
		return getLogicalCharacteristicAccess().getRule();
	}
	
	///** A logical Entity “realizes” a conceptual Entity in terms of Measurements and other logical Entities. Since a logical Entity is built from logical Measurements, it is independent of any specific platform data representation. A logical Entity's composition hierarchy is consistent with the composition hierarchy of the conceptual Entity that it realizes. The logical Entity’s composed Entities realize one to one the conceptual Entity’s composed Entities; the logical Entity’s composed Measurements realize many to one the conceptual Entity’s composed Observables.  */
	//LogicalEntity:
	//    'lentity' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
	//        composition+=LogicalComposition*
	//    '};'
	//    | LogicalAssociation
	//;
	public LogicalEntityElements getLogicalEntityAccess() {
		return pLogicalEntity;
	}
	
	public ParserRule getLogicalEntityRule() {
		return getLogicalEntityAccess().getRule();
	}
	
	///** A logical Composition is the mechanism that allows logical Entities to be constructed from other logical ComposableElements. The “type” of a Composition is the ComposableElement being used to construct the logical Entity. The “lowerBound” and “upperBound” define the multiplicity of the composed logical Entity. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
	//LogicalComposition:
	//    type=[LogicalComposableElement|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[LogicalCharacteristic|QN])?  '->' realizes=[ConceptualComposition|QN] ';'
	//;
	public LogicalCompositionElements getLogicalCompositionAccess() {
		return pLogicalComposition;
	}
	
	public ParserRule getLogicalCompositionRule() {
		return getLogicalCompositionAccess().getRule();
	}
	
	///** A logical Association represents a relationship between two or more logical Entities. The logical Entities participating in the logical Association may be specified locally or in its generalized types. In addition, there may be one or more logical ComposableElements that characterize the relationship. Logical Associations are logical Entities that may also participate in other logical Associations. */
	//LogicalAssociation:
	//    'lassoc' name=ID  (description=STRING)? (':' specializes=[LogicalEntity|QN])? '->' realizes=[ConceptualEntity|QN] '{'
	//        composition+=LogicalComposition*
	//        // While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
	//        // Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
	//        ('participants:' '[' participant+=LogicalParticipant+ ']')?
	//    '};'
	//;
	public LogicalAssociationElements getLogicalAssociationAccess() {
		return pLogicalAssociation;
	}
	
	public ParserRule getLogicalAssociationRule() {
		return getLogicalAssociationAccess().getRule();
	}
	
	///** A logical Participant is the mechanism that allows a logical Association to be constructed between two or more logical Entities. The “type” of a logical Participant is the logical Entity being used to construct the logical Association. The “sourceLowerBound” and “sourceUpperBound” attributes define the multiplicity of the logical Association relative to the Participant. A “sourceUpperBound” multiplicity of –1 represents an unbounded sequence. The “path” attribute of the Participant describes the chain of entity characteristics to traverse to reach the subject of the association beginning with the entity referenced by the “type” attribute. */
	//LogicalParticipant:
	//    type=[LogicalEntity|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[LogicalCharacteristic|QN])?  '->' realizes=[ConceptualParticipant|QN] '{'
	//        'source:' '[' sourceLowerBound=INT ':' sourceUpperBound=INT ']'
	//        ('path:' path=LogicalPathNode )?
	//    '};'
	//;
	public LogicalParticipantElements getLogicalParticipantAccess() {
		return pLogicalParticipant;
	}
	
	public ParserRule getLogicalParticipantRule() {
		return getLogicalParticipantAccess().getRule();
	}
	
	///** A logical PathNode is a single element in a chain that collectively forms a path specification. */
	//LogicalPathNode:
	//    LogicalParticipantPathNode |
	//    LogicalCharacteristicPathNode
	//;
	public LogicalPathNodeElements getLogicalPathNodeAccess() {
		return pLogicalPathNode;
	}
	
	public ParserRule getLogicalPathNodeRule() {
		return getLogicalPathNodeAccess().getRule();
	}
	
	///** A logical ParticipantPathNode is a logical PathNode that selects a Participant that references an Entity. This provides a mechanism for reverse navigation from an Entity that participates in an Association back to the Association. */
	//LogicalParticipantPathNode:
	//    '/' projectedParticipant=[LogicalParticipant|QN]  ( node=LogicalPathNode)
	//;
	public LogicalParticipantPathNodeElements getLogicalParticipantPathNodeAccess() {
		return pLogicalParticipantPathNode;
	}
	
	public ParserRule getLogicalParticipantPathNodeRule() {
		return getLogicalParticipantPathNodeAccess().getRule();
	}
	
	///** A logical CharacteristicPathNode is a logical PathNode that selects a logical Characteristic which is directly contained in a logical Entity or Association. */
	//LogicalCharacteristicPathNode:
	//    '#' projectedCharacteristic=[LogicalCharacteristic|QN]  ( node=LogicalPathNode)
	//;
	public LogicalCharacteristicPathNodeElements getLogicalCharacteristicPathNodeAccess() {
		return pLogicalCharacteristicPathNode;
	}
	
	public ParserRule getLogicalCharacteristicPathNodeRule() {
		return getLogicalCharacteristicPathNodeAccess().getRule();
	}
	
	///** A logical View is a logical Query or a logical CompositeQuery. */
	//LogicalView:
	//    LogicalQuery |
	//    LogicalCompositeQuery
	//;
	public LogicalViewElements getLogicalViewAccess() {
		return pLogicalView;
	}
	
	public ParserRule getLogicalViewRule() {
		return getLogicalViewAccess().getRule();
	}
	
	///** A logical Query is a specification that defines the content of logical View as a set of logical Characteristics projected from a selected set of related logical Entities. The “specification” attribute captures the specification of a Query as defined by the Query grammar. */
	//LogicalQuery:
	//    'lquery' name=ID  (description=STRING)? ('->' realizes=[ConceptualQuery|QN])? '{'
	//        'spec:' specification=STRING
	//        '};'
	//;
	public LogicalQueryElements getLogicalQueryAccess() {
		return pLogicalQuery;
	}
	
	public ParserRule getLogicalQueryRule() {
		return getLogicalQueryAccess().getRule();
	}
	
	///** A logical CompositeQuery is a collection of two or more logical Views. The “isUnion” attribute specifies whether the composed Views are intended to be mutually exclusive or not. */
	//LogicalCompositeQuery:
	//    'lcquery' name=ID  (description=STRING)? ('->' realizes=[ConceptualCompositeQuery|QN])? '{'
	//        isUnion?='isUnion'
	//        composition+=LogicalQueryComposition
	//        '};'
	//;
	public LogicalCompositeQueryElements getLogicalCompositeQueryAccess() {
		return pLogicalCompositeQuery;
	}
	
	public ParserRule getLogicalCompositeQueryRule() {
		return getLogicalCompositeQueryAccess().getRule();
	}
	
	///** A logical QueryComposition is the mechanism that allows a logical CompositeQuery to be constructed from logical Queries and other logical CompositeQueries. The “rolename” attribute defines the name of the composed logical View within the scope of the composing logical CompositeQuery. The “type” of a logical QueryComposition is the logical View being used to construct the logical CompositeQuery. */
	//LogicalQueryComposition:
	//    type=[LogicalView|QN] rolename=ID ( '->' realizes=[ConceptualQueryComposition|QN])?
	//;
	public LogicalQueryCompositionElements getLogicalQueryCompositionAccess() {
		return pLogicalQueryComposition;
	}
	
	public ParserRule getLogicalQueryCompositionRule() {
		return getLogicalQueryCompositionAccess().getRule();
	}
	
	///* * * * * * * Platform Level Rules * * * * * *  */
	///** A platform Element is the root type for defining the platform elements of a Data Model. */
	//PlatformElement:
	//    PlatformComposableElement |
	//    PlatformView
	//;
	public PlatformElementElements getPlatformElementAccess() {
		return pPlatformElement;
	}
	
	public ParserRule getPlatformElementRule() {
		return getPlatformElementAccess().getRule();
	}
	
	///** A platform ComposableElement is a platform Element that is allowed to participate in a Composition relationship. In other words, these are the platform Elements that may be a characteristic of a platform Entity. */
	//PlatformComposableElement:
	//    PlatformEntity |
	//    PlatformDataType
	//;
	public PlatformComposableElementElements getPlatformComposableElementAccess() {
		return pPlatformComposableElement;
	}
	
	public ParserRule getPlatformComposableElementRule() {
		return getPlatformComposableElementAccess().getRule();
	}
	
	///** A PlatformDataType is a platform realization of a logical AbstractMeasurement and is either a Primitive or a Struct. */
	//PlatformDataType:
	//    PlatformPrimitive |
	//    PlatformStruct
	//;
	public PlatformDataTypeElements getPlatformDataTypeAccess() {
		return pPlatformDataType;
	}
	
	public ParserRule getPlatformDataTypeRule() {
		return getPlatformDataTypeAccess().getRule();
	}
	
	///** A platform Primitive realizes a logical AbstractMeasurement in terms of a simple data type. */
	//PlatformPrimitive:
	//    PlatformSequence |
	//    PlatformBoolean |
	//    PlatformChar | //PlatformCharType | // skip single inheritance
	//    PlatformNumber |
	//    PlatformOctet |
	//    PlatformEnumeration |
	//    PlatformStringType |
	//    PlatformArray
	//;
	public PlatformPrimitiveElements getPlatformPrimitiveAccess() {
		return pPlatformPrimitive;
	}
	
	public ParserRule getPlatformPrimitiveRule() {
		return getPlatformPrimitiveAccess().getRule();
	}
	
	///** A Boolean is a data type that represents the values TRUE and FALSE. */
	//PlatformBoolean:            'bool'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformBooleanElements getPlatformBooleanAccess() {
		return pPlatformBoolean;
	}
	
	public ParserRule getPlatformBooleanRule() {
		return getPlatformBooleanAccess().getRule();
	}
	
	///** An Octet is an 8-bit quantity that is guaranteed not to undergo any conversion during transfer between systems. */
	//PlatformOctet:                'octet'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformOctetElements getPlatformOctetAccess() {
		return pPlatformOctet;
	}
	
	public ParserRule getPlatformOctetRule() {
		return getPlatformOctetAccess().getRule();
	}
	
	//// Skip single inheritance - XText doesn't float attributes up when there is single inheritance.
	/////** A CharType is a Char. */
	////PlatformCharType:
	////    PlatformChar
	//////    | PlatformWChar // NOTE: WChar was removed from the spec. Not clear is we want it
	////;
	///** A Char is a data type that represents characters from any single byte character set. */
	//PlatformChar:                'char'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformCharElements getPlatformCharAccess() {
		return pPlatformChar;
	}
	
	public ParserRule getPlatformCharRule() {
		return getPlatformCharAccess().getRule();
	}
	
	////PlatformWChar:                'wchar'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	///** A StringType is a BoundedString, an unbounded String, or a CharArray. */
	//PlatformStringType:
	//    PlatformString |
	//    PlatformBoundedString |
	//    PlatformCharArray
	//;
	public PlatformStringTypeElements getPlatformStringTypeAccess() {
		return pPlatformStringType;
	}
	
	public ParserRule getPlatformStringTypeRule() {
		return getPlatformStringTypeAccess().getRule();
	}
	
	///** A String is a data type that represents a variable length sequence of Char (all 8-bit quantities except NULL). The length is a non-negative integer, and is available at run-time. */
	//PlatformString:                'string'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformStringElements getPlatformStringAccess() {
		return pPlatformString;
	}
	
	public ParserRule getPlatformStringRule() {
		return getPlatformStringAccess().getRule();
	}
	
	///** A BoundedString is a data type that represents a variable length sequence of Char (all 8-bit quantities except NULL). The length is a non-negative integer, and is available at run-time. The “maxLength” attribute defines the maximum length of the BoundedString, an integer value greater than 0. */
	//PlatformBoundedString:        'string[' maxLength=INT ']'      name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformBoundedStringElements getPlatformBoundedStringAccess() {
		return pPlatformBoundedString;
	}
	
	public ParserRule getPlatformBoundedStringRule() {
		return getPlatformBoundedStringAccess().getRule();
	}
	
	///** A CharArray is a data type that represents a fixed length sequence of Char (all 8-bit quantities except NULL). The length is a positive integer, and is available at run-time. The “length” attribute defines the length of the CharArray, an integer value greater than 0. */
	//PlatformCharArray:            'char['   length=INT ']'          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformCharArrayElements getPlatformCharArrayAccess() {
		return pPlatformCharArray;
	}
	
	public ParserRule getPlatformCharArrayRule() {
		return getPlatformCharArrayAccess().getRule();
	}
	
	///** An Enumeration is a data type that represents an ordered list of identifiers. */
	//PlatformEnumeration:        'enum'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformEnumerationElements getPlatformEnumerationAccess() {
		return pPlatformEnumeration;
	}
	
	public ParserRule getPlatformEnumerationRule() {
		return getPlatformEnumerationAccess().getRule();
	}
	
	///** A Number is an abstract meta-class from which all meta-classes representing numeric values derive. */
	//PlatformNumber:
	//    PlatformReal |
	//    PlatformInteger
	//;
	public PlatformNumberElements getPlatformNumberAccess() {
		return pPlatformNumber;
	}
	
	public ParserRule getPlatformNumberRule() {
		return getPlatformNumberAccess().getRule();
	}
	
	///** An Integer is an abstract meta-class from which all meta-classes representing whole numbers derive. */
	//PlatformInteger:
	//    PlatformLong |
	//    PlatformShort |
	//    PlatformUnsignedInteger |
	//    PlatformLongLong
	//;
	public PlatformIntegerElements getPlatformIntegerAccess() {
		return pPlatformInteger;
	}
	
	public ParserRule getPlatformIntegerRule() {
		return getPlatformIntegerAccess().getRule();
	}
	
	///** A Short is an integer data type that represents integer values in the range –2^15 to (2^15 – 1). */
	//PlatformShort:                'short'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformShortElements getPlatformShortAccess() {
		return pPlatformShort;
	}
	
	public ParserRule getPlatformShortRule() {
		return getPlatformShortAccess().getRule();
	}
	
	///** A Long is an integer data type that represents integer values in the range –2^31 to (2^31 – 1). */
	//PlatformLong:                'long'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformLongElements getPlatformLongAccess() {
		return pPlatformLong;
	}
	
	public ParserRule getPlatformLongRule() {
		return getPlatformLongAccess().getRule();
	}
	
	///** A LongLong is an integer data type that represents integer values in the range –2^63 to (2^63 – 1). */
	//PlatformLongLong:            'llong'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformLongLongElements getPlatformLongLongAccess() {
		return pPlatformLongLong;
	}
	
	public ParserRule getPlatformLongLongRule() {
		return getPlatformLongLongAccess().getRule();
	}
	
	///** A Real is an abstract meta-class from which all meta-classes representing real numbers derive. */
	//PlatformReal:
	//    PlatformFixed |
	//    PlatformFloat |
	//    PlatformDouble |
	//    PlatformLongDouble
	//;
	public PlatformRealElements getPlatformRealAccess() {
		return pPlatformReal;
	}
	
	public ParserRule getPlatformRealRule() {
		return getPlatformRealAccess().getRule();
	}
	
	///** A Double is a real data type that represents an IEEE double precision floating-point number.  */
	//PlatformDouble:                'double'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformDoubleElements getPlatformDoubleAccess() {
		return pPlatformDouble;
	}
	
	public ParserRule getPlatformDoubleRule() {
		return getPlatformDoubleAccess().getRule();
	}
	
	///** A LongDouble is a real data type that represents an IEEE extended double precision floating- point number (having a signed fraction of at least 64 bits and an exponent of at least 15 bits) */
	//PlatformLongDouble:            'ldouble'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformLongDoubleElements getPlatformLongDoubleAccess() {
		return pPlatformLongDouble;
	}
	
	public ParserRule getPlatformLongDoubleRule() {
		return getPlatformLongDoubleAccess().getRule();
	}
	
	///** A Float is a real data type that represents an IEEE single precision floating-point number. */
	//PlatformFloat:                'float'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformFloatElements getPlatformFloatAccess() {
		return pPlatformFloat;
	}
	
	public ParserRule getPlatformFloatRule() {
		return getPlatformFloatAccess().getRule();
	}
	
	///** A Fixed is a real data type that represents a fixed-point decimal number of up to 31 significant digits. The “digits” attribute defines the total number of digits, a non-negative integer value less than or equal to 31. The “scale” attribute defines the position of the decimal point in the number, and cannot be greater than “digits”. */
	//PlatformFixed:                'fixed[' digits=INT '.' scale=INT ']'
	//                                                            name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';'
	//;
	public PlatformFixedElements getPlatformFixedAccess() {
		return pPlatformFixed;
	}
	
	public ParserRule getPlatformFixedRule() {
		return getPlatformFixedAccess().getRule();
	}
	
	///** An UnsignedInteger is an abstract meta-class from which all meta-classes representing unsigned whole numbers derive. */
	//PlatformUnsignedInteger:
	//    PlatformUShort |
	//    PlatformULong |
	//    PlatformULongLong
	//;
	public PlatformUnsignedIntegerElements getPlatformUnsignedIntegerAccess() {
		return pPlatformUnsignedInteger;
	}
	
	public ParserRule getPlatformUnsignedIntegerRule() {
		return getPlatformUnsignedIntegerAccess().getRule();
	}
	
	///** A UShort is an integer data type that represents integer values in the range 0 to (2^16 – 1).  */
	//PlatformUShort:                'ushort'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformUShortElements getPlatformUShortAccess() {
		return pPlatformUShort;
	}
	
	public ParserRule getPlatformUShortRule() {
		return getPlatformUShortAccess().getRule();
	}
	
	///** A ULong is an integer data type that represents integer values in the range 0 to (2^32 – 1). */
	//PlatformULong:                'ulong'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformULongElements getPlatformULongAccess() {
		return pPlatformULong;
	}
	
	public ParserRule getPlatformULongRule() {
		return getPlatformULongAccess().getRule();
	}
	
	///** A ULongLong is an integer data type that represents integer values in the range 0 to (2^64 – 1). */
	//PlatformULongLong:            'ullong'                          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformULongLongElements getPlatformULongLongAccess() {
		return pPlatformULongLong;
	}
	
	public ParserRule getPlatformULongLongRule() {
		return getPlatformULongLongAccess().getRule();
	}
	
	///** A Sequence is used to represent a sequence of Octets. This can be used to realize a StandardMeasurementSystem. */
	//PlatformSequence:            'seq' ('[' maxSize=INT ']')?      name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformSequenceElements getPlatformSequenceAccess() {
		return pPlatformSequence;
	}
	
	public ParserRule getPlatformSequenceRule() {
		return getPlatformSequenceAccess().getRule();
	}
	
	///** An Array is used to represent an array of Octets. This can be used to realize a StandardMeasurementSystem. */
	//PlatformArray:                'arr' ('[' size=INT ']')?          name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] ';' ;
	public PlatformArrayElements getPlatformArrayAccess() {
		return pPlatformArray;
	}
	
	public ParserRule getPlatformArrayRule() {
		return getPlatformArrayAccess().getRule();
	}
	
	///** A platform Struct is a structured realization of a logical AbstractMeasurement. It is composed of PlatformDataTypes (i.e., Primitives and other Structs composed of Primitives). A platform Struct’s composition hierarchy is consistent with the composition hierarchy of the logical AbstractMeasurement that it realizes. */
	//PlatformStruct:
	//    'struct' name=ID  (description=STRING)? '->' realizes=[/*LogicalAbstractMeasurement*/LogicalElement|QN] '{'
	//        member+=PlatformStructMember
	//        member+=PlatformStructMember
	//        (member+=PlatformStructMember)?
	//    '}'
	//;
	public PlatformStructElements getPlatformStructAccess() {
		return pPlatformStruct;
	}
	
	public ParserRule getPlatformStructRule() {
		return getPlatformStructAccess().getRule();
	}
	
	///** A StructMember is the mechanism that allows Structs to be constructed from other PlatformDataTypes. The “type” of a StructMember is the PlatformDataType being used to construct the Struct. If “type” is a Primitive, the “precision” attribute specifies a measure of the detail in which a quantity is captured. */
	//PlatformStructMember:
	//    type=[PlatformDataType|QN] rolename=ID '(' precision=FLOAT ')' ('->' realizes=[LogicalMeasurementAttribute|QN] ';')?
	//;
	public PlatformStructMemberElements getPlatformStructMemberAccess() {
		return pPlatformStructMember;
	}
	
	public ParserRule getPlatformStructMemberRule() {
		return getPlatformStructMemberAccess().getRule();
	}
	
	///** A platform Characteristic contributes to the uniqueness of a platform Entity. The “rolename” attribute defines the name of the platform Characteristic within the scope of the platform Entity. The “lowerBound” and “upperBound” attributes define the multiplicity of the composed Characteristic. An “upperBound” multiplicity of –1 represents an unbounded sequence. */
	//PlatformCharacteristic:
	//    PlatformComposition |
	//    PlatformParticipant
	//;
	public PlatformCharacteristicElements getPlatformCharacteristicAccess() {
		return pPlatformCharacteristic;
	}
	
	public ParserRule getPlatformCharacteristicRule() {
		return getPlatformCharacteristicAccess().getRule();
	}
	
	///** A platform Entity “realizes” a logical Entity in terms of PhysicalDataTypes and other platform Entities composed of PhysicalDataTypes. A platform Entity’s composition hierarchy is consistent with the composition hierarchy of the logical Entity that it realizes. The platform Entity’s composed Entities realize one to one the logical Entity’s composed Entities; the platform Entity’s composed PhysicalDataTypes realize many to one the logical Entity’s composed Measurements. */
	//PlatformEntity:
	//    'pentity' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
	//        composition+=PlatformComposition*
	//    '};'
	//    | PlatformAssociation
	//;
	public PlatformEntityElements getPlatformEntityAccess() {
		return pPlatformEntity;
	}
	
	public ParserRule getPlatformEntityRule() {
		return getPlatformEntityAccess().getRule();
	}
	
	///** A platform Composition is the mechanism that allows platform Entities to be constructed from other platform ComposableElements. The “type” of a Composition is the ComposableElement being used to construct the platform Entity. The “lowerBound” and “upperBound” define the multiplicity of the composed platform Entity. An “upperBound” multiplicity of –1 represents an unbounded sequence. If “type” is a Primitive, the “precision” attribute specifies a measure of the detail in which a quantity is captured.  */
	//PlatformComposition:
	//    type=[PlatformComposableElement|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[PlatformCharacteristic|QN])?  '->' realizes=[LogicalComposition|QN]
	//        ('{'
	//            'prec:' precision=FLOAT
	//        '}')? ';'
	//;
	public PlatformCompositionElements getPlatformCompositionAccess() {
		return pPlatformComposition;
	}
	
	public ParserRule getPlatformCompositionRule() {
		return getPlatformCompositionAccess().getRule();
	}
	
	///** A platform Association represents a relationship between two or more platform Entities. The platform Entities participating in the platform Association may be specified locally or in its generalized types. In addition, there may be one or more platform ComposableElements that characterize the relationship. Platform Associations are platform Entities that may also participate in other platform Associations. */
	//PlatformAssociation:
	//    'passoc' name=ID  (description=STRING)? (':' specializes=[PlatformEntity|QN])? '->' realizes=[LogicalEntity|QN] '{'
	//        composition+=PlatformComposition*
	//        // While technically this is optional, it makes no sense to have an Association with less than 2 participants. However,
	//        // Those participants can be named anywhere in the inheritance/ specializes hierarchy - not just locally
	//        ('participants:' '[' participant+=PlatformParticipant+ ']')?
	//    '};'
	//;
	public PlatformAssociationElements getPlatformAssociationAccess() {
		return pPlatformAssociation;
	}
	
	public ParserRule getPlatformAssociationRule() {
		return getPlatformAssociationAccess().getRule();
	}
	
	///** A platform Participant is the mechanism that allows a platform Association to be constructed between two or more platform Entities. The “type” of a platform Participant is the platform Entity being used to construct the platform Association. The “sourceLowerBound” and “sourceUpperBound” attributes define the multiplicity of the platform Association relative to the Participant. A “sourceUpperBound” multiplicity of –1 represents an unbounded sequence. The “path” attribute of the Participant describes the chain of entity characteristics to traverse to reach the subject of the association beginning with the entity referenced by the “type” attribute.  */
	//PlatformParticipant:
	//    type=[PlatformEntity|QN]  rolename=ID ('[' lowerBound=INT ':' upperBound=INT ']')? (description=STRING)? (':' specializes=[PlatformCharacteristic|QN])?  '->' realizes=[LogicalParticipant|QN] '{'
	//        'source:' '[' sourceLowerBound=INT ':' sourceUpperBound=INT ']'
	//        ('path:' path=PlatformPathNode )?
	//    '};'
	//;
	public PlatformParticipantElements getPlatformParticipantAccess() {
		return pPlatformParticipant;
	}
	
	public ParserRule getPlatformParticipantRule() {
		return getPlatformParticipantAccess().getRule();
	}
	
	///** A platform PathNode is a single element in a chain that collectively forms a path specification. */
	//PlatformPathNode:
	//    PlatformParticipantPathNode |
	//    PlatformCharacteristicPathNode
	//;
	public PlatformPathNodeElements getPlatformPathNodeAccess() {
		return pPlatformPathNode;
	}
	
	public ParserRule getPlatformPathNodeRule() {
		return getPlatformPathNodeAccess().getRule();
	}
	
	///** A platform ParticipantPathNode is a platform PathNode that selects a Participant that references an Entity. This provides a mechanism for reverse navigation from an Entity that participates in an Association back to the Association. */
	//PlatformParticipantPathNode:
	//    '/' projectedParticipant=[PlatformParticipant|QN]  ( node=PlatformPathNode)
	//;
	public PlatformParticipantPathNodeElements getPlatformParticipantPathNodeAccess() {
		return pPlatformParticipantPathNode;
	}
	
	public ParserRule getPlatformParticipantPathNodeRule() {
		return getPlatformParticipantPathNodeAccess().getRule();
	}
	
	///** A platform CharacteristicPathNode is a platform PathNode that selects a platform Characteristic which is directly contained in a platform Entity or Association. */
	//PlatformCharacteristicPathNode:
	//    '#' projectedCharacteristic=[PlatformCharacteristic|QN]  ( node=PlatformPathNode)
	//;
	public PlatformCharacteristicPathNodeElements getPlatformCharacteristicPathNodeAccess() {
		return pPlatformCharacteristicPathNode;
	}
	
	public ParserRule getPlatformCharacteristicPathNodeRule() {
		return getPlatformCharacteristicPathNodeAccess().getRule();
	}
	
	///** A platform View is a platform Query or a platform CompositeQuery. */
	//PlatformView:
	//    PlatformQuery |
	//    PlatformCompositeQuery
	//;
	public PlatformViewElements getPlatformViewAccess() {
		return pPlatformView;
	}
	
	public ParserRule getPlatformViewRule() {
		return getPlatformViewAccess().getRule();
	}
	
	///** A platform Query is a specification that defines the content of platform View as a set of platform Characteristics projected from a selected set of related platform Entities. The “specification” attribute captures the specification of a Query as defined by the Query grammar. */
	//PlatformQuery:
	//    'pquery' name=ID  (description=STRING)? ('->' realizes=[LogicalQuery|QN])? '{'
	//        'spec:' specification=STRING
	//        '};'
	//;
	public PlatformQueryElements getPlatformQueryAccess() {
		return pPlatformQuery;
	}
	
	public ParserRule getPlatformQueryRule() {
		return getPlatformQueryAccess().getRule();
	}
	
	///** A platform CompositeQuery is a collection of two or more platform Views. The “isUnion” attribute specifies whether the composed Views are intended to be mutually exclusive or not. */
	//PlatformCompositeQuery:
	//    'pcquery' name=ID  (description=STRING)? ('->' realizes=[LogicalQuery|QN])? '{'
	//        isUnion?='isUnion'
	//        composition+=PlatformQueryComposition
	//        '};'
	//;
	public PlatformCompositeQueryElements getPlatformCompositeQueryAccess() {
		return pPlatformCompositeQuery;
	}
	
	public ParserRule getPlatformCompositeQueryRule() {
		return getPlatformCompositeQueryAccess().getRule();
	}
	
	///** A platform QueryComposition is the mechanism that allows a platform CompositeQuery to be constructed from platform Queries and other platform CompositeQueries. The “rolename” attribute defines the name of the composed platform View within the scope of the composing platform CompositeQuery. The “type” of a platform QueryComposition is the platform View being used to construct the platform CompositeQuery. */
	//PlatformQueryComposition:
	//    type=[PlatformView|QN] rolename=ID ( '->' realizes=[LogicalQueryComposition|QN])?
	//;
	public PlatformQueryCompositionElements getPlatformQueryCompositionAccess() {
		return pPlatformQueryComposition;
	}
	
	public ParserRule getPlatformQueryCompositionRule() {
		return getPlatformQueryCompositionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
