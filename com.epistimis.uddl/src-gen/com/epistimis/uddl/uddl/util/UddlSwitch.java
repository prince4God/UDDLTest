/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.uddl.util;

import com.epistimis.uddl.uddl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.epistimis.uddl.uddl.UddlPackage
 * @generated
 */
public class UddlSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UddlPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UddlSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = UddlPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case UddlPackage.DATA_MODEL:
      {
        DataModel dataModel = (DataModel)theEObject;
        T result = caseDataModel(dataModel);
        if (result == null) result = caseUddlElement(dataModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.INCLUDE:
      {
        Include include = (Include)theEObject;
        T result = caseInclude(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.UDDL_ELEMENT:
      {
        UddlElement uddlElement = (UddlElement)theEObject;
        T result = caseUddlElement(uddlElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_DATA_MODEL:
      {
        ConceptualDataModel conceptualDataModel = (ConceptualDataModel)theEObject;
        T result = caseConceptualDataModel(conceptualDataModel);
        if (result == null) result = caseUddlElement(conceptualDataModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_DATA_MODEL:
      {
        LogicalDataModel logicalDataModel = (LogicalDataModel)theEObject;
        T result = caseLogicalDataModel(logicalDataModel);
        if (result == null) result = caseUddlElement(logicalDataModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_DATA_MODEL:
      {
        PlatformDataModel platformDataModel = (PlatformDataModel)theEObject;
        T result = casePlatformDataModel(platformDataModel);
        if (result == null) result = caseUddlElement(platformDataModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_ELEMENT:
      {
        ConceptualElement conceptualElement = (ConceptualElement)theEObject;
        T result = caseConceptualElement(conceptualElement);
        if (result == null) result = caseUddlElement(conceptualElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_COMPOSABLE_ELEMENT:
      {
        ConceptualComposableElement conceptualComposableElement = (ConceptualComposableElement)theEObject;
        T result = caseConceptualComposableElement(conceptualComposableElement);
        if (result == null) result = caseConceptualElement(conceptualComposableElement);
        if (result == null) result = caseUddlElement(conceptualComposableElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_BASIS_ENTITY:
      {
        ConceptualBasisEntity conceptualBasisEntity = (ConceptualBasisEntity)theEObject;
        T result = caseConceptualBasisEntity(conceptualBasisEntity);
        if (result == null) result = caseConceptualElement(conceptualBasisEntity);
        if (result == null) result = caseUddlElement(conceptualBasisEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_DOMAIN:
      {
        ConceptualDomain conceptualDomain = (ConceptualDomain)theEObject;
        T result = caseConceptualDomain(conceptualDomain);
        if (result == null) result = caseConceptualElement(conceptualDomain);
        if (result == null) result = caseUddlElement(conceptualDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_OBSERVABLE:
      {
        ConceptualObservable conceptualObservable = (ConceptualObservable)theEObject;
        T result = caseConceptualObservable(conceptualObservable);
        if (result == null) result = caseConceptualComposableElement(conceptualObservable);
        if (result == null) result = caseConceptualElement(conceptualObservable);
        if (result == null) result = caseUddlElement(conceptualObservable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_CHARACTERISTIC:
      {
        ConceptualCharacteristic conceptualCharacteristic = (ConceptualCharacteristic)theEObject;
        T result = caseConceptualCharacteristic(conceptualCharacteristic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_ENTITY:
      {
        ConceptualEntity conceptualEntity = (ConceptualEntity)theEObject;
        T result = caseConceptualEntity(conceptualEntity);
        if (result == null) result = caseConceptualComposableElement(conceptualEntity);
        if (result == null) result = caseConceptualElement(conceptualEntity);
        if (result == null) result = caseUddlElement(conceptualEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_COMPOSITION:
      {
        ConceptualComposition conceptualComposition = (ConceptualComposition)theEObject;
        T result = caseConceptualComposition(conceptualComposition);
        if (result == null) result = caseConceptualCharacteristic(conceptualComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_ASSOCIATION:
      {
        ConceptualAssociation conceptualAssociation = (ConceptualAssociation)theEObject;
        T result = caseConceptualAssociation(conceptualAssociation);
        if (result == null) result = caseConceptualEntity(conceptualAssociation);
        if (result == null) result = caseConceptualComposableElement(conceptualAssociation);
        if (result == null) result = caseConceptualElement(conceptualAssociation);
        if (result == null) result = caseUddlElement(conceptualAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_PARTICIPANT:
      {
        ConceptualParticipant conceptualParticipant = (ConceptualParticipant)theEObject;
        T result = caseConceptualParticipant(conceptualParticipant);
        if (result == null) result = caseConceptualCharacteristic(conceptualParticipant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_PATH_NODE:
      {
        ConceptualPathNode conceptualPathNode = (ConceptualPathNode)theEObject;
        T result = caseConceptualPathNode(conceptualPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_PARTICIPANT_PATH_NODE:
      {
        ConceptualParticipantPathNode conceptualParticipantPathNode = (ConceptualParticipantPathNode)theEObject;
        T result = caseConceptualParticipantPathNode(conceptualParticipantPathNode);
        if (result == null) result = caseConceptualPathNode(conceptualParticipantPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_CHARACTERISTIC_PATH_NODE:
      {
        ConceptualCharacteristicPathNode conceptualCharacteristicPathNode = (ConceptualCharacteristicPathNode)theEObject;
        T result = caseConceptualCharacteristicPathNode(conceptualCharacteristicPathNode);
        if (result == null) result = caseConceptualPathNode(conceptualCharacteristicPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_VIEW:
      {
        ConceptualView conceptualView = (ConceptualView)theEObject;
        T result = caseConceptualView(conceptualView);
        if (result == null) result = caseConceptualElement(conceptualView);
        if (result == null) result = caseUddlElement(conceptualView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_QUERY:
      {
        ConceptualQuery conceptualQuery = (ConceptualQuery)theEObject;
        T result = caseConceptualQuery(conceptualQuery);
        if (result == null) result = caseConceptualView(conceptualQuery);
        if (result == null) result = caseConceptualElement(conceptualQuery);
        if (result == null) result = caseUddlElement(conceptualQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_COMPOSITE_QUERY:
      {
        ConceptualCompositeQuery conceptualCompositeQuery = (ConceptualCompositeQuery)theEObject;
        T result = caseConceptualCompositeQuery(conceptualCompositeQuery);
        if (result == null) result = caseConceptualView(conceptualCompositeQuery);
        if (result == null) result = caseConceptualElement(conceptualCompositeQuery);
        if (result == null) result = caseUddlElement(conceptualCompositeQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.CONCEPTUAL_QUERY_COMPOSITION:
      {
        ConceptualQueryComposition conceptualQueryComposition = (ConceptualQueryComposition)theEObject;
        T result = caseConceptualQueryComposition(conceptualQueryComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ELEMENT:
      {
        LogicalElement logicalElement = (LogicalElement)theEObject;
        T result = caseLogicalElement(logicalElement);
        if (result == null) result = caseUddlElement(logicalElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_UNIT:
      {
        LogicalUnit logicalUnit = (LogicalUnit)theEObject;
        T result = caseLogicalUnit(logicalUnit);
        if (result == null) result = caseLogicalElement(logicalUnit);
        if (result == null) result = caseUddlElement(logicalUnit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_CONVERSION:
      {
        LogicalConversion logicalConversion = (LogicalConversion)theEObject;
        T result = caseLogicalConversion(logicalConversion);
        if (result == null) result = caseLogicalElement(logicalConversion);
        if (result == null) result = caseUddlElement(logicalConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_AFFINE_CONVERSION:
      {
        LogicalAffineConversion logicalAffineConversion = (LogicalAffineConversion)theEObject;
        T result = caseLogicalAffineConversion(logicalAffineConversion);
        if (result == null) result = caseLogicalConversion(logicalAffineConversion);
        if (result == null) result = caseLogicalElement(logicalAffineConversion);
        if (result == null) result = caseUddlElement(logicalAffineConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_VALUE_TYPE:
      {
        LogicalValueType logicalValueType = (LogicalValueType)theEObject;
        T result = caseLogicalValueType(logicalValueType);
        if (result == null) result = caseLogicalElement(logicalValueType);
        if (result == null) result = caseUddlElement(logicalValueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_STRING:
      {
        LogicalString logicalString = (LogicalString)theEObject;
        T result = caseLogicalString(logicalString);
        if (result == null) result = caseLogicalValueType(logicalString);
        if (result == null) result = caseLogicalElement(logicalString);
        if (result == null) result = caseUddlElement(logicalString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_CHARACTER:
      {
        LogicalCharacter logicalCharacter = (LogicalCharacter)theEObject;
        T result = caseLogicalCharacter(logicalCharacter);
        if (result == null) result = caseLogicalValueType(logicalCharacter);
        if (result == null) result = caseLogicalElement(logicalCharacter);
        if (result == null) result = caseUddlElement(logicalCharacter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_BOOLEAN:
      {
        LogicalBoolean logicalBoolean = (LogicalBoolean)theEObject;
        T result = caseLogicalBoolean(logicalBoolean);
        if (result == null) result = caseLogicalValueType(logicalBoolean);
        if (result == null) result = caseLogicalElement(logicalBoolean);
        if (result == null) result = caseUddlElement(logicalBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_NUMERIC:
      {
        LogicalNumeric logicalNumeric = (LogicalNumeric)theEObject;
        T result = caseLogicalNumeric(logicalNumeric);
        if (result == null) result = caseLogicalValueType(logicalNumeric);
        if (result == null) result = caseLogicalElement(logicalNumeric);
        if (result == null) result = caseUddlElement(logicalNumeric);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_INTEGER:
      {
        LogicalInteger logicalInteger = (LogicalInteger)theEObject;
        T result = caseLogicalInteger(logicalInteger);
        if (result == null) result = caseLogicalNumeric(logicalInteger);
        if (result == null) result = caseLogicalValueType(logicalInteger);
        if (result == null) result = caseLogicalElement(logicalInteger);
        if (result == null) result = caseUddlElement(logicalInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_NATURAL:
      {
        LogicalNatural logicalNatural = (LogicalNatural)theEObject;
        T result = caseLogicalNatural(logicalNatural);
        if (result == null) result = caseLogicalNumeric(logicalNatural);
        if (result == null) result = caseLogicalValueType(logicalNatural);
        if (result == null) result = caseLogicalElement(logicalNatural);
        if (result == null) result = caseUddlElement(logicalNatural);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_REAL:
      {
        LogicalReal logicalReal = (LogicalReal)theEObject;
        T result = caseLogicalReal(logicalReal);
        if (result == null) result = caseLogicalNumeric(logicalReal);
        if (result == null) result = caseLogicalValueType(logicalReal);
        if (result == null) result = caseLogicalElement(logicalReal);
        if (result == null) result = caseUddlElement(logicalReal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_NON_NEGATIVE_REAL:
      {
        LogicalNonNegativeReal logicalNonNegativeReal = (LogicalNonNegativeReal)theEObject;
        T result = caseLogicalNonNegativeReal(logicalNonNegativeReal);
        if (result == null) result = caseLogicalNumeric(logicalNonNegativeReal);
        if (result == null) result = caseLogicalValueType(logicalNonNegativeReal);
        if (result == null) result = caseLogicalElement(logicalNonNegativeReal);
        if (result == null) result = caseUddlElement(logicalNonNegativeReal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ENUMERATED:
      {
        LogicalEnumerated logicalEnumerated = (LogicalEnumerated)theEObject;
        T result = caseLogicalEnumerated(logicalEnumerated);
        if (result == null) result = caseLogicalEnumeratedBase(logicalEnumerated);
        if (result == null) result = caseLogicalValueType(logicalEnumerated);
        if (result == null) result = caseTaxonomy(logicalEnumerated);
        if (result == null) result = caseLogicalElement(logicalEnumerated);
        if (result == null) result = caseUddlElement(logicalEnumerated);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.TAXONOMY:
      {
        Taxonomy taxonomy = (Taxonomy)theEObject;
        T result = caseTaxonomy(taxonomy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ENUMERATED_BASE:
      {
        LogicalEnumeratedBase logicalEnumeratedBase = (LogicalEnumeratedBase)theEObject;
        T result = caseLogicalEnumeratedBase(logicalEnumeratedBase);
        if (result == null) result = caseLogicalValueType(logicalEnumeratedBase);
        if (result == null) result = caseTaxonomy(logicalEnumeratedBase);
        if (result == null) result = caseLogicalElement(logicalEnumeratedBase);
        if (result == null) result = caseUddlElement(logicalEnumeratedBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ENUMERATED_SET:
      {
        LogicalEnumeratedSet logicalEnumeratedSet = (LogicalEnumeratedSet)theEObject;
        T result = caseLogicalEnumeratedSet(logicalEnumeratedSet);
        if (result == null) result = caseLogicalEnumeratedBase(logicalEnumeratedSet);
        if (result == null) result = caseLogicalValueType(logicalEnumeratedSet);
        if (result == null) result = caseTaxonomy(logicalEnumeratedSet);
        if (result == null) result = caseLogicalElement(logicalEnumeratedSet);
        if (result == null) result = caseUddlElement(logicalEnumeratedSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ENUMERATION_LABEL:
      {
        LogicalEnumerationLabel logicalEnumerationLabel = (LogicalEnumerationLabel)theEObject;
        T result = caseLogicalEnumerationLabel(logicalEnumerationLabel);
        if (result == null) result = caseLogicalEnumeratedBase(logicalEnumerationLabel);
        if (result == null) result = caseLogicalValueType(logicalEnumerationLabel);
        if (result == null) result = caseTaxonomy(logicalEnumerationLabel);
        if (result == null) result = caseLogicalElement(logicalEnumerationLabel);
        if (result == null) result = caseUddlElement(logicalEnumerationLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_COORDINATE_SYSTEM:
      {
        LogicalCoordinateSystem logicalCoordinateSystem = (LogicalCoordinateSystem)theEObject;
        T result = caseLogicalCoordinateSystem(logicalCoordinateSystem);
        if (result == null) result = caseLogicalElement(logicalCoordinateSystem);
        if (result == null) result = caseUddlElement(logicalCoordinateSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_COORDINATE_SYSTEM_AXIS:
      {
        LogicalCoordinateSystemAxis logicalCoordinateSystemAxis = (LogicalCoordinateSystemAxis)theEObject;
        T result = caseLogicalCoordinateSystemAxis(logicalCoordinateSystemAxis);
        if (result == null) result = caseLogicalElement(logicalCoordinateSystemAxis);
        if (result == null) result = caseUddlElement(logicalCoordinateSystemAxis);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ABSTRACT_MEASUREMENT_SYSTEM:
      {
        LogicalAbstractMeasurementSystem logicalAbstractMeasurementSystem = (LogicalAbstractMeasurementSystem)theEObject;
        T result = caseLogicalAbstractMeasurementSystem(logicalAbstractMeasurementSystem);
        if (result == null) result = caseLogicalElement(logicalAbstractMeasurementSystem);
        if (result == null) result = caseUddlElement(logicalAbstractMeasurementSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_STANDARD_MEASUREMENT_SYSTEM:
      {
        LogicalStandardMeasurementSystem logicalStandardMeasurementSystem = (LogicalStandardMeasurementSystem)theEObject;
        T result = caseLogicalStandardMeasurementSystem(logicalStandardMeasurementSystem);
        if (result == null) result = caseLogicalAbstractMeasurementSystem(logicalStandardMeasurementSystem);
        if (result == null) result = caseLogicalElement(logicalStandardMeasurementSystem);
        if (result == null) result = caseUddlElement(logicalStandardMeasurementSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_LANDMARK:
      {
        LogicalLandmark logicalLandmark = (LogicalLandmark)theEObject;
        T result = caseLogicalLandmark(logicalLandmark);
        if (result == null) result = caseLogicalElement(logicalLandmark);
        if (result == null) result = caseUddlElement(logicalLandmark);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM:
      {
        LogicalMeasurementSystem logicalMeasurementSystem = (LogicalMeasurementSystem)theEObject;
        T result = caseLogicalMeasurementSystem(logicalMeasurementSystem);
        if (result == null) result = caseLogicalAbstractMeasurementSystem(logicalMeasurementSystem);
        if (result == null) result = caseLogicalElement(logicalMeasurementSystem);
        if (result == null) result = caseUddlElement(logicalMeasurementSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM_AXIS:
      {
        LogicalMeasurementSystemAxis logicalMeasurementSystemAxis = (LogicalMeasurementSystemAxis)theEObject;
        T result = caseLogicalMeasurementSystemAxis(logicalMeasurementSystemAxis);
        if (result == null) result = caseLogicalElement(logicalMeasurementSystemAxis);
        if (result == null) result = caseUddlElement(logicalMeasurementSystemAxis);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_REFERENCE_POINT:
      {
        LogicalReferencePoint logicalReferencePoint = (LogicalReferencePoint)theEObject;
        T result = caseLogicalReferencePoint(logicalReferencePoint);
        if (result == null) result = caseUddlElement(logicalReferencePoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART:
      {
        LogicalReferencePointPart logicalReferencePointPart = (LogicalReferencePointPart)theEObject;
        T result = caseLogicalReferencePointPart(logicalReferencePointPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_VALUE_TYPE_UNIT:
      {
        LogicalValueTypeUnit logicalValueTypeUnit = (LogicalValueTypeUnit)theEObject;
        T result = caseLogicalValueTypeUnit(logicalValueTypeUnit);
        if (result == null) result = caseLogicalElement(logicalValueTypeUnit);
        if (result == null) result = caseUddlElement(logicalValueTypeUnit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_CONSTRAINT:
      {
        LogicalConstraint logicalConstraint = (LogicalConstraint)theEObject;
        T result = caseLogicalConstraint(logicalConstraint);
        if (result == null) result = caseUddlElement(logicalConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_INTEGER_RANGE_CONSTRAINT:
      {
        LogicalIntegerRangeConstraint logicalIntegerRangeConstraint = (LogicalIntegerRangeConstraint)theEObject;
        T result = caseLogicalIntegerRangeConstraint(logicalIntegerRangeConstraint);
        if (result == null) result = caseLogicalConstraint(logicalIntegerRangeConstraint);
        if (result == null) result = caseUddlElement(logicalIntegerRangeConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_REAL_RANGE_CONSTRAINT:
      {
        LogicalRealRangeConstraint logicalRealRangeConstraint = (LogicalRealRangeConstraint)theEObject;
        T result = caseLogicalRealRangeConstraint(logicalRealRangeConstraint);
        if (result == null) result = caseLogicalConstraint(logicalRealRangeConstraint);
        if (result == null) result = caseUddlElement(logicalRealRangeConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_STRING_CONSTRAINT:
      {
        LogicalStringConstraint logicalStringConstraint = (LogicalStringConstraint)theEObject;
        T result = caseLogicalStringConstraint(logicalStringConstraint);
        if (result == null) result = caseLogicalConstraint(logicalStringConstraint);
        if (result == null) result = caseUddlElement(logicalStringConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_REGULAR_EXPRESSION_CONSTRAINT:
      {
        LogicalRegularExpressionConstraint logicalRegularExpressionConstraint = (LogicalRegularExpressionConstraint)theEObject;
        T result = caseLogicalRegularExpressionConstraint(logicalRegularExpressionConstraint);
        if (result == null) result = caseLogicalStringConstraint(logicalRegularExpressionConstraint);
        if (result == null) result = caseLogicalConstraint(logicalRegularExpressionConstraint);
        if (result == null) result = caseUddlElement(logicalRegularExpressionConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_FIXED_LENGTH_STRING_CONSTRAINT:
      {
        LogicalFixedLengthStringConstraint logicalFixedLengthStringConstraint = (LogicalFixedLengthStringConstraint)theEObject;
        T result = caseLogicalFixedLengthStringConstraint(logicalFixedLengthStringConstraint);
        if (result == null) result = caseLogicalStringConstraint(logicalFixedLengthStringConstraint);
        if (result == null) result = caseLogicalConstraint(logicalFixedLengthStringConstraint);
        if (result == null) result = caseUddlElement(logicalFixedLengthStringConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ENUMERATION_CONSTRAINT:
      {
        LogicalEnumerationConstraint logicalEnumerationConstraint = (LogicalEnumerationConstraint)theEObject;
        T result = caseLogicalEnumerationConstraint(logicalEnumerationConstraint);
        if (result == null) result = caseLogicalConstraint(logicalEnumerationConstraint);
        if (result == null) result = caseUddlElement(logicalEnumerationConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_CONSTRAINT:
      {
        LogicalMeasurementConstraint logicalMeasurementConstraint = (LogicalMeasurementConstraint)theEObject;
        T result = caseLogicalMeasurementConstraint(logicalMeasurementConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM_CONVERSION:
      {
        LogicalMeasurementSystemConversion logicalMeasurementSystemConversion = (LogicalMeasurementSystemConversion)theEObject;
        T result = caseLogicalMeasurementSystemConversion(logicalMeasurementSystemConversion);
        if (result == null) result = caseLogicalElement(logicalMeasurementSystemConversion);
        if (result == null) result = caseUddlElement(logicalMeasurementSystemConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT:
      {
        LogicalMeasurement logicalMeasurement = (LogicalMeasurement)theEObject;
        T result = caseLogicalMeasurement(logicalMeasurement);
        if (result == null) result = caseLogicalComposableElement(logicalMeasurement);
        if (result == null) result = caseLogicalElement(logicalMeasurement);
        if (result == null) result = caseUddlElement(logicalMeasurement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_AXIS:
      {
        LogicalMeasurementAxis logicalMeasurementAxis = (LogicalMeasurementAxis)theEObject;
        T result = caseLogicalMeasurementAxis(logicalMeasurementAxis);
        if (result == null) result = caseLogicalElement(logicalMeasurementAxis);
        if (result == null) result = caseUddlElement(logicalMeasurementAxis);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_ATTRIBUTE:
      {
        LogicalMeasurementAttribute logicalMeasurementAttribute = (LogicalMeasurementAttribute)theEObject;
        T result = caseLogicalMeasurementAttribute(logicalMeasurementAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_MEASUREMENT_CONVERSION:
      {
        LogicalMeasurementConversion logicalMeasurementConversion = (LogicalMeasurementConversion)theEObject;
        T result = caseLogicalMeasurementConversion(logicalMeasurementConversion);
        if (result == null) result = caseLogicalElement(logicalMeasurementConversion);
        if (result == null) result = caseUddlElement(logicalMeasurementConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_COMPOSABLE_ELEMENT:
      {
        LogicalComposableElement logicalComposableElement = (LogicalComposableElement)theEObject;
        T result = caseLogicalComposableElement(logicalComposableElement);
        if (result == null) result = caseLogicalElement(logicalComposableElement);
        if (result == null) result = caseUddlElement(logicalComposableElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_CHARACTERISTIC:
      {
        LogicalCharacteristic logicalCharacteristic = (LogicalCharacteristic)theEObject;
        T result = caseLogicalCharacteristic(logicalCharacteristic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ENTITY:
      {
        LogicalEntity logicalEntity = (LogicalEntity)theEObject;
        T result = caseLogicalEntity(logicalEntity);
        if (result == null) result = caseLogicalComposableElement(logicalEntity);
        if (result == null) result = caseLogicalElement(logicalEntity);
        if (result == null) result = caseUddlElement(logicalEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_COMPOSITION:
      {
        LogicalComposition logicalComposition = (LogicalComposition)theEObject;
        T result = caseLogicalComposition(logicalComposition);
        if (result == null) result = caseLogicalCharacteristic(logicalComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_ASSOCIATION:
      {
        LogicalAssociation logicalAssociation = (LogicalAssociation)theEObject;
        T result = caseLogicalAssociation(logicalAssociation);
        if (result == null) result = caseLogicalEntity(logicalAssociation);
        if (result == null) result = caseLogicalComposableElement(logicalAssociation);
        if (result == null) result = caseLogicalElement(logicalAssociation);
        if (result == null) result = caseUddlElement(logicalAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_PARTICIPANT:
      {
        LogicalParticipant logicalParticipant = (LogicalParticipant)theEObject;
        T result = caseLogicalParticipant(logicalParticipant);
        if (result == null) result = caseLogicalCharacteristic(logicalParticipant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_PATH_NODE:
      {
        LogicalPathNode logicalPathNode = (LogicalPathNode)theEObject;
        T result = caseLogicalPathNode(logicalPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_PARTICIPANT_PATH_NODE:
      {
        LogicalParticipantPathNode logicalParticipantPathNode = (LogicalParticipantPathNode)theEObject;
        T result = caseLogicalParticipantPathNode(logicalParticipantPathNode);
        if (result == null) result = caseLogicalPathNode(logicalParticipantPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_CHARACTERISTIC_PATH_NODE:
      {
        LogicalCharacteristicPathNode logicalCharacteristicPathNode = (LogicalCharacteristicPathNode)theEObject;
        T result = caseLogicalCharacteristicPathNode(logicalCharacteristicPathNode);
        if (result == null) result = caseLogicalPathNode(logicalCharacteristicPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_VIEW:
      {
        LogicalView logicalView = (LogicalView)theEObject;
        T result = caseLogicalView(logicalView);
        if (result == null) result = caseLogicalElement(logicalView);
        if (result == null) result = caseUddlElement(logicalView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_QUERY:
      {
        LogicalQuery logicalQuery = (LogicalQuery)theEObject;
        T result = caseLogicalQuery(logicalQuery);
        if (result == null) result = caseLogicalView(logicalQuery);
        if (result == null) result = caseLogicalElement(logicalQuery);
        if (result == null) result = caseUddlElement(logicalQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_COMPOSITE_QUERY:
      {
        LogicalCompositeQuery logicalCompositeQuery = (LogicalCompositeQuery)theEObject;
        T result = caseLogicalCompositeQuery(logicalCompositeQuery);
        if (result == null) result = caseLogicalView(logicalCompositeQuery);
        if (result == null) result = caseLogicalElement(logicalCompositeQuery);
        if (result == null) result = caseUddlElement(logicalCompositeQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.LOGICAL_QUERY_COMPOSITION:
      {
        LogicalQueryComposition logicalQueryComposition = (LogicalQueryComposition)theEObject;
        T result = caseLogicalQueryComposition(logicalQueryComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ELEMENT:
      {
        PlatformElement platformElement = (PlatformElement)theEObject;
        T result = casePlatformElement(platformElement);
        if (result == null) result = caseUddlElement(platformElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_COMPOSABLE_ELEMENT:
      {
        PlatformComposableElement platformComposableElement = (PlatformComposableElement)theEObject;
        T result = casePlatformComposableElement(platformComposableElement);
        if (result == null) result = casePlatformElement(platformComposableElement);
        if (result == null) result = caseUddlElement(platformComposableElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_DATA_TYPE:
      {
        PlatformDataType platformDataType = (PlatformDataType)theEObject;
        T result = casePlatformDataType(platformDataType);
        if (result == null) result = casePlatformComposableElement(platformDataType);
        if (result == null) result = casePlatformElement(platformDataType);
        if (result == null) result = caseUddlElement(platformDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_PRIMITIVE:
      {
        PlatformPrimitive platformPrimitive = (PlatformPrimitive)theEObject;
        T result = casePlatformPrimitive(platformPrimitive);
        if (result == null) result = casePlatformDataType(platformPrimitive);
        if (result == null) result = casePlatformComposableElement(platformPrimitive);
        if (result == null) result = casePlatformElement(platformPrimitive);
        if (result == null) result = caseUddlElement(platformPrimitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_BOOLEAN:
      {
        PlatformBoolean platformBoolean = (PlatformBoolean)theEObject;
        T result = casePlatformBoolean(platformBoolean);
        if (result == null) result = casePlatformPrimitive(platformBoolean);
        if (result == null) result = casePlatformDataType(platformBoolean);
        if (result == null) result = casePlatformComposableElement(platformBoolean);
        if (result == null) result = casePlatformElement(platformBoolean);
        if (result == null) result = caseUddlElement(platformBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_OCTET:
      {
        PlatformOctet platformOctet = (PlatformOctet)theEObject;
        T result = casePlatformOctet(platformOctet);
        if (result == null) result = casePlatformPrimitive(platformOctet);
        if (result == null) result = casePlatformDataType(platformOctet);
        if (result == null) result = casePlatformComposableElement(platformOctet);
        if (result == null) result = casePlatformElement(platformOctet);
        if (result == null) result = caseUddlElement(platformOctet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_CHAR:
      {
        PlatformChar platformChar = (PlatformChar)theEObject;
        T result = casePlatformChar(platformChar);
        if (result == null) result = casePlatformPrimitive(platformChar);
        if (result == null) result = casePlatformDataType(platformChar);
        if (result == null) result = casePlatformComposableElement(platformChar);
        if (result == null) result = casePlatformElement(platformChar);
        if (result == null) result = caseUddlElement(platformChar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_STRING_TYPE:
      {
        PlatformStringType platformStringType = (PlatformStringType)theEObject;
        T result = casePlatformStringType(platformStringType);
        if (result == null) result = casePlatformPrimitive(platformStringType);
        if (result == null) result = casePlatformDataType(platformStringType);
        if (result == null) result = casePlatformComposableElement(platformStringType);
        if (result == null) result = casePlatformElement(platformStringType);
        if (result == null) result = caseUddlElement(platformStringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_STRING:
      {
        PlatformString platformString = (PlatformString)theEObject;
        T result = casePlatformString(platformString);
        if (result == null) result = casePlatformStringType(platformString);
        if (result == null) result = casePlatformPrimitive(platformString);
        if (result == null) result = casePlatformDataType(platformString);
        if (result == null) result = casePlatformComposableElement(platformString);
        if (result == null) result = casePlatformElement(platformString);
        if (result == null) result = caseUddlElement(platformString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_BOUNDED_STRING:
      {
        PlatformBoundedString platformBoundedString = (PlatformBoundedString)theEObject;
        T result = casePlatformBoundedString(platformBoundedString);
        if (result == null) result = casePlatformStringType(platformBoundedString);
        if (result == null) result = casePlatformPrimitive(platformBoundedString);
        if (result == null) result = casePlatformDataType(platformBoundedString);
        if (result == null) result = casePlatformComposableElement(platformBoundedString);
        if (result == null) result = casePlatformElement(platformBoundedString);
        if (result == null) result = caseUddlElement(platformBoundedString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_CHAR_ARRAY:
      {
        PlatformCharArray platformCharArray = (PlatformCharArray)theEObject;
        T result = casePlatformCharArray(platformCharArray);
        if (result == null) result = casePlatformStringType(platformCharArray);
        if (result == null) result = casePlatformPrimitive(platformCharArray);
        if (result == null) result = casePlatformDataType(platformCharArray);
        if (result == null) result = casePlatformComposableElement(platformCharArray);
        if (result == null) result = casePlatformElement(platformCharArray);
        if (result == null) result = caseUddlElement(platformCharArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ENUMERATION:
      {
        PlatformEnumeration platformEnumeration = (PlatformEnumeration)theEObject;
        T result = casePlatformEnumeration(platformEnumeration);
        if (result == null) result = casePlatformPrimitive(platformEnumeration);
        if (result == null) result = casePlatformDataType(platformEnumeration);
        if (result == null) result = casePlatformComposableElement(platformEnumeration);
        if (result == null) result = casePlatformElement(platformEnumeration);
        if (result == null) result = caseUddlElement(platformEnumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_NUMBER:
      {
        PlatformNumber platformNumber = (PlatformNumber)theEObject;
        T result = casePlatformNumber(platformNumber);
        if (result == null) result = casePlatformPrimitive(platformNumber);
        if (result == null) result = casePlatformDataType(platformNumber);
        if (result == null) result = casePlatformComposableElement(platformNumber);
        if (result == null) result = casePlatformElement(platformNumber);
        if (result == null) result = caseUddlElement(platformNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_INTEGER:
      {
        PlatformInteger platformInteger = (PlatformInteger)theEObject;
        T result = casePlatformInteger(platformInteger);
        if (result == null) result = casePlatformNumber(platformInteger);
        if (result == null) result = casePlatformPrimitive(platformInteger);
        if (result == null) result = casePlatformDataType(platformInteger);
        if (result == null) result = casePlatformComposableElement(platformInteger);
        if (result == null) result = casePlatformElement(platformInteger);
        if (result == null) result = caseUddlElement(platformInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_SHORT:
      {
        PlatformShort platformShort = (PlatformShort)theEObject;
        T result = casePlatformShort(platformShort);
        if (result == null) result = casePlatformInteger(platformShort);
        if (result == null) result = casePlatformNumber(platformShort);
        if (result == null) result = casePlatformPrimitive(platformShort);
        if (result == null) result = casePlatformDataType(platformShort);
        if (result == null) result = casePlatformComposableElement(platformShort);
        if (result == null) result = casePlatformElement(platformShort);
        if (result == null) result = caseUddlElement(platformShort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_LONG:
      {
        PlatformLong platformLong = (PlatformLong)theEObject;
        T result = casePlatformLong(platformLong);
        if (result == null) result = casePlatformInteger(platformLong);
        if (result == null) result = casePlatformNumber(platformLong);
        if (result == null) result = casePlatformPrimitive(platformLong);
        if (result == null) result = casePlatformDataType(platformLong);
        if (result == null) result = casePlatformComposableElement(platformLong);
        if (result == null) result = casePlatformElement(platformLong);
        if (result == null) result = caseUddlElement(platformLong);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_LONG_LONG:
      {
        PlatformLongLong platformLongLong = (PlatformLongLong)theEObject;
        T result = casePlatformLongLong(platformLongLong);
        if (result == null) result = casePlatformInteger(platformLongLong);
        if (result == null) result = casePlatformNumber(platformLongLong);
        if (result == null) result = casePlatformPrimitive(platformLongLong);
        if (result == null) result = casePlatformDataType(platformLongLong);
        if (result == null) result = casePlatformComposableElement(platformLongLong);
        if (result == null) result = casePlatformElement(platformLongLong);
        if (result == null) result = caseUddlElement(platformLongLong);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_REAL:
      {
        PlatformReal platformReal = (PlatformReal)theEObject;
        T result = casePlatformReal(platformReal);
        if (result == null) result = casePlatformNumber(platformReal);
        if (result == null) result = casePlatformPrimitive(platformReal);
        if (result == null) result = casePlatformDataType(platformReal);
        if (result == null) result = casePlatformComposableElement(platformReal);
        if (result == null) result = casePlatformElement(platformReal);
        if (result == null) result = caseUddlElement(platformReal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_DOUBLE:
      {
        PlatformDouble platformDouble = (PlatformDouble)theEObject;
        T result = casePlatformDouble(platformDouble);
        if (result == null) result = casePlatformReal(platformDouble);
        if (result == null) result = casePlatformNumber(platformDouble);
        if (result == null) result = casePlatformPrimitive(platformDouble);
        if (result == null) result = casePlatformDataType(platformDouble);
        if (result == null) result = casePlatformComposableElement(platformDouble);
        if (result == null) result = casePlatformElement(platformDouble);
        if (result == null) result = caseUddlElement(platformDouble);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_LONG_DOUBLE:
      {
        PlatformLongDouble platformLongDouble = (PlatformLongDouble)theEObject;
        T result = casePlatformLongDouble(platformLongDouble);
        if (result == null) result = casePlatformReal(platformLongDouble);
        if (result == null) result = casePlatformNumber(platformLongDouble);
        if (result == null) result = casePlatformPrimitive(platformLongDouble);
        if (result == null) result = casePlatformDataType(platformLongDouble);
        if (result == null) result = casePlatformComposableElement(platformLongDouble);
        if (result == null) result = casePlatformElement(platformLongDouble);
        if (result == null) result = caseUddlElement(platformLongDouble);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_FLOAT:
      {
        PlatformFloat platformFloat = (PlatformFloat)theEObject;
        T result = casePlatformFloat(platformFloat);
        if (result == null) result = casePlatformReal(platformFloat);
        if (result == null) result = casePlatformNumber(platformFloat);
        if (result == null) result = casePlatformPrimitive(platformFloat);
        if (result == null) result = casePlatformDataType(platformFloat);
        if (result == null) result = casePlatformComposableElement(platformFloat);
        if (result == null) result = casePlatformElement(platformFloat);
        if (result == null) result = caseUddlElement(platformFloat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_FIXED:
      {
        PlatformFixed platformFixed = (PlatformFixed)theEObject;
        T result = casePlatformFixed(platformFixed);
        if (result == null) result = casePlatformReal(platformFixed);
        if (result == null) result = casePlatformNumber(platformFixed);
        if (result == null) result = casePlatformPrimitive(platformFixed);
        if (result == null) result = casePlatformDataType(platformFixed);
        if (result == null) result = casePlatformComposableElement(platformFixed);
        if (result == null) result = casePlatformElement(platformFixed);
        if (result == null) result = caseUddlElement(platformFixed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_UNSIGNED_INTEGER:
      {
        PlatformUnsignedInteger platformUnsignedInteger = (PlatformUnsignedInteger)theEObject;
        T result = casePlatformUnsignedInteger(platformUnsignedInteger);
        if (result == null) result = casePlatformInteger(platformUnsignedInteger);
        if (result == null) result = casePlatformNumber(platformUnsignedInteger);
        if (result == null) result = casePlatformPrimitive(platformUnsignedInteger);
        if (result == null) result = casePlatformDataType(platformUnsignedInteger);
        if (result == null) result = casePlatformComposableElement(platformUnsignedInteger);
        if (result == null) result = casePlatformElement(platformUnsignedInteger);
        if (result == null) result = caseUddlElement(platformUnsignedInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_USHORT:
      {
        PlatformUShort platformUShort = (PlatformUShort)theEObject;
        T result = casePlatformUShort(platformUShort);
        if (result == null) result = casePlatformUnsignedInteger(platformUShort);
        if (result == null) result = casePlatformInteger(platformUShort);
        if (result == null) result = casePlatformNumber(platformUShort);
        if (result == null) result = casePlatformPrimitive(platformUShort);
        if (result == null) result = casePlatformDataType(platformUShort);
        if (result == null) result = casePlatformComposableElement(platformUShort);
        if (result == null) result = casePlatformElement(platformUShort);
        if (result == null) result = caseUddlElement(platformUShort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ULONG:
      {
        PlatformULong platformULong = (PlatformULong)theEObject;
        T result = casePlatformULong(platformULong);
        if (result == null) result = casePlatformUnsignedInteger(platformULong);
        if (result == null) result = casePlatformInteger(platformULong);
        if (result == null) result = casePlatformNumber(platformULong);
        if (result == null) result = casePlatformPrimitive(platformULong);
        if (result == null) result = casePlatformDataType(platformULong);
        if (result == null) result = casePlatformComposableElement(platformULong);
        if (result == null) result = casePlatformElement(platformULong);
        if (result == null) result = caseUddlElement(platformULong);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ULONG_LONG:
      {
        PlatformULongLong platformULongLong = (PlatformULongLong)theEObject;
        T result = casePlatformULongLong(platformULongLong);
        if (result == null) result = casePlatformUnsignedInteger(platformULongLong);
        if (result == null) result = casePlatformInteger(platformULongLong);
        if (result == null) result = casePlatformNumber(platformULongLong);
        if (result == null) result = casePlatformPrimitive(platformULongLong);
        if (result == null) result = casePlatformDataType(platformULongLong);
        if (result == null) result = casePlatformComposableElement(platformULongLong);
        if (result == null) result = casePlatformElement(platformULongLong);
        if (result == null) result = caseUddlElement(platformULongLong);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_SEQUENCE:
      {
        PlatformSequence platformSequence = (PlatformSequence)theEObject;
        T result = casePlatformSequence(platformSequence);
        if (result == null) result = casePlatformPrimitive(platformSequence);
        if (result == null) result = casePlatformDataType(platformSequence);
        if (result == null) result = casePlatformComposableElement(platformSequence);
        if (result == null) result = casePlatformElement(platformSequence);
        if (result == null) result = caseUddlElement(platformSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ARRAY:
      {
        PlatformArray platformArray = (PlatformArray)theEObject;
        T result = casePlatformArray(platformArray);
        if (result == null) result = casePlatformPrimitive(platformArray);
        if (result == null) result = casePlatformDataType(platformArray);
        if (result == null) result = casePlatformComposableElement(platformArray);
        if (result == null) result = casePlatformElement(platformArray);
        if (result == null) result = caseUddlElement(platformArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_STRUCT:
      {
        PlatformStruct platformStruct = (PlatformStruct)theEObject;
        T result = casePlatformStruct(platformStruct);
        if (result == null) result = casePlatformDataType(platformStruct);
        if (result == null) result = casePlatformComposableElement(platformStruct);
        if (result == null) result = casePlatformElement(platformStruct);
        if (result == null) result = caseUddlElement(platformStruct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_STRUCT_MEMBER:
      {
        PlatformStructMember platformStructMember = (PlatformStructMember)theEObject;
        T result = casePlatformStructMember(platformStructMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_CHARACTERISTIC:
      {
        PlatformCharacteristic platformCharacteristic = (PlatformCharacteristic)theEObject;
        T result = casePlatformCharacteristic(platformCharacteristic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ENTITY:
      {
        PlatformEntity platformEntity = (PlatformEntity)theEObject;
        T result = casePlatformEntity(platformEntity);
        if (result == null) result = casePlatformComposableElement(platformEntity);
        if (result == null) result = casePlatformElement(platformEntity);
        if (result == null) result = caseUddlElement(platformEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_COMPOSITION:
      {
        PlatformComposition platformComposition = (PlatformComposition)theEObject;
        T result = casePlatformComposition(platformComposition);
        if (result == null) result = casePlatformCharacteristic(platformComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_ASSOCIATION:
      {
        PlatformAssociation platformAssociation = (PlatformAssociation)theEObject;
        T result = casePlatformAssociation(platformAssociation);
        if (result == null) result = casePlatformEntity(platformAssociation);
        if (result == null) result = casePlatformComposableElement(platformAssociation);
        if (result == null) result = casePlatformElement(platformAssociation);
        if (result == null) result = caseUddlElement(platformAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_PARTICIPANT:
      {
        PlatformParticipant platformParticipant = (PlatformParticipant)theEObject;
        T result = casePlatformParticipant(platformParticipant);
        if (result == null) result = casePlatformCharacteristic(platformParticipant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_PATH_NODE:
      {
        PlatformPathNode platformPathNode = (PlatformPathNode)theEObject;
        T result = casePlatformPathNode(platformPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_PARTICIPANT_PATH_NODE:
      {
        PlatformParticipantPathNode platformParticipantPathNode = (PlatformParticipantPathNode)theEObject;
        T result = casePlatformParticipantPathNode(platformParticipantPathNode);
        if (result == null) result = casePlatformPathNode(platformParticipantPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_CHARACTERISTIC_PATH_NODE:
      {
        PlatformCharacteristicPathNode platformCharacteristicPathNode = (PlatformCharacteristicPathNode)theEObject;
        T result = casePlatformCharacteristicPathNode(platformCharacteristicPathNode);
        if (result == null) result = casePlatformPathNode(platformCharacteristicPathNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_VIEW:
      {
        PlatformView platformView = (PlatformView)theEObject;
        T result = casePlatformView(platformView);
        if (result == null) result = casePlatformElement(platformView);
        if (result == null) result = caseUddlElement(platformView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_QUERY:
      {
        PlatformQuery platformQuery = (PlatformQuery)theEObject;
        T result = casePlatformQuery(platformQuery);
        if (result == null) result = casePlatformView(platformQuery);
        if (result == null) result = casePlatformElement(platformQuery);
        if (result == null) result = caseUddlElement(platformQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_COMPOSITE_QUERY:
      {
        PlatformCompositeQuery platformCompositeQuery = (PlatformCompositeQuery)theEObject;
        T result = casePlatformCompositeQuery(platformCompositeQuery);
        if (result == null) result = casePlatformView(platformCompositeQuery);
        if (result == null) result = casePlatformElement(platformCompositeQuery);
        if (result == null) result = caseUddlElement(platformCompositeQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UddlPackage.PLATFORM_QUERY_COMPOSITION:
      {
        PlatformQueryComposition platformQueryComposition = (PlatformQueryComposition)theEObject;
        T result = casePlatformQueryComposition(platformQueryComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataModel(DataModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInclude(Include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUddlElement(UddlElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Data Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Data Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualDataModel(ConceptualDataModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Data Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Data Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalDataModel(LogicalDataModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Data Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Data Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformDataModel(PlatformDataModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualElement(ConceptualElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Composable Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Composable Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualComposableElement(ConceptualComposableElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Basis Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Basis Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualBasisEntity(ConceptualBasisEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualDomain(ConceptualDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Observable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Observable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualObservable(ConceptualObservable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Characteristic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Characteristic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualCharacteristic(ConceptualCharacteristic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualEntity(ConceptualEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualComposition(ConceptualComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualAssociation(ConceptualAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Participant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Participant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualParticipant(ConceptualParticipant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualPathNode(ConceptualPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Participant Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Participant Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualParticipantPathNode(ConceptualParticipantPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Characteristic Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Characteristic Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualCharacteristicPathNode(ConceptualCharacteristicPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualView(ConceptualView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualQuery(ConceptualQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Composite Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Composite Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualCompositeQuery(ConceptualCompositeQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conceptual Query Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conceptual Query Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConceptualQueryComposition(ConceptualQueryComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalElement(LogicalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalUnit(LogicalUnit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalConversion(LogicalConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Affine Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Affine Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalAffineConversion(LogicalAffineConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Value Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Value Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalValueType(LogicalValueType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalString(LogicalString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Character</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Character</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalCharacter(LogicalCharacter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalBoolean(LogicalBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Numeric</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Numeric</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalNumeric(LogicalNumeric object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalInteger(LogicalInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Natural</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Natural</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalNatural(LogicalNatural object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Real</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Real</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalReal(LogicalReal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Non Negative Real</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Non Negative Real</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalNonNegativeReal(LogicalNonNegativeReal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Enumerated</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Enumerated</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalEnumerated(LogicalEnumerated object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Taxonomy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Taxonomy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaxonomy(Taxonomy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Enumerated Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Enumerated Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalEnumeratedBase(LogicalEnumeratedBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Enumerated Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Enumerated Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalEnumeratedSet(LogicalEnumeratedSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Enumeration Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Enumeration Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalEnumerationLabel(LogicalEnumerationLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Coordinate System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Coordinate System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalCoordinateSystem(LogicalCoordinateSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Coordinate System Axis</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Coordinate System Axis</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalCoordinateSystemAxis(LogicalCoordinateSystemAxis object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Abstract Measurement System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Abstract Measurement System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalAbstractMeasurementSystem(LogicalAbstractMeasurementSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Standard Measurement System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Standard Measurement System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalStandardMeasurementSystem(LogicalStandardMeasurementSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Landmark</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Landmark</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalLandmark(LogicalLandmark object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementSystem(LogicalMeasurementSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement System Axis</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement System Axis</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementSystemAxis(LogicalMeasurementSystemAxis object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Reference Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Reference Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalReferencePoint(LogicalReferencePoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Reference Point Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Reference Point Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalReferencePointPart(LogicalReferencePointPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Value Type Unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Value Type Unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalValueTypeUnit(LogicalValueTypeUnit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalConstraint(LogicalConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Integer Range Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Integer Range Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalIntegerRangeConstraint(LogicalIntegerRangeConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Real Range Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Real Range Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalRealRangeConstraint(LogicalRealRangeConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical String Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical String Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalStringConstraint(LogicalStringConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Regular Expression Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Regular Expression Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalRegularExpressionConstraint(LogicalRegularExpressionConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Fixed Length String Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Fixed Length String Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalFixedLengthStringConstraint(LogicalFixedLengthStringConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Enumeration Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Enumeration Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalEnumerationConstraint(LogicalEnumerationConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementConstraint(LogicalMeasurementConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement System Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement System Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementSystemConversion(LogicalMeasurementSystemConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurement(LogicalMeasurement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement Axis</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement Axis</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementAxis(LogicalMeasurementAxis object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementAttribute(LogicalMeasurementAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Measurement Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Measurement Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalMeasurementConversion(LogicalMeasurementConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Composable Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Composable Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalComposableElement(LogicalComposableElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Characteristic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Characteristic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalCharacteristic(LogicalCharacteristic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalEntity(LogicalEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalComposition(LogicalComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalAssociation(LogicalAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Participant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Participant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalParticipant(LogicalParticipant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalPathNode(LogicalPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Participant Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Participant Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalParticipantPathNode(LogicalParticipantPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Characteristic Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Characteristic Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalCharacteristicPathNode(LogicalCharacteristicPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalView(LogicalView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalQuery(LogicalQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Composite Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Composite Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalCompositeQuery(LogicalCompositeQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Query Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Query Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalQueryComposition(LogicalQueryComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformElement(PlatformElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Composable Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Composable Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformComposableElement(PlatformComposableElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformDataType(PlatformDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformPrimitive(PlatformPrimitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformBoolean(PlatformBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Octet</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Octet</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformOctet(PlatformOctet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Char</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Char</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformChar(PlatformChar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformStringType(PlatformStringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformString(PlatformString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Bounded String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Bounded String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformBoundedString(PlatformBoundedString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Char Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Char Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformCharArray(PlatformCharArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformEnumeration(PlatformEnumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformNumber(PlatformNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformInteger(PlatformInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Short</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Short</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformShort(PlatformShort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Long</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Long</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformLong(PlatformLong object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Long Long</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Long Long</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformLongLong(PlatformLongLong object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Real</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Real</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformReal(PlatformReal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Double</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Double</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformDouble(PlatformDouble object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Long Double</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Long Double</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformLongDouble(PlatformLongDouble object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Float</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Float</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformFloat(PlatformFloat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Fixed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Fixed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformFixed(PlatformFixed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Unsigned Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Unsigned Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformUnsignedInteger(PlatformUnsignedInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform UShort</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform UShort</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformUShort(PlatformUShort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform ULong</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform ULong</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformULong(PlatformULong object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform ULong Long</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform ULong Long</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformULongLong(PlatformULongLong object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformSequence(PlatformSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformArray(PlatformArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Struct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Struct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformStruct(PlatformStruct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Struct Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Struct Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformStructMember(PlatformStructMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Characteristic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Characteristic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformCharacteristic(PlatformCharacteristic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformEntity(PlatformEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformComposition(PlatformComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformAssociation(PlatformAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Participant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Participant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformParticipant(PlatformParticipant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformPathNode(PlatformPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Participant Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Participant Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformParticipantPathNode(PlatformParticipantPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Characteristic Path Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Characteristic Path Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformCharacteristicPathNode(PlatformCharacteristicPathNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformView(PlatformView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformQuery(PlatformQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Composite Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Composite Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformCompositeQuery(PlatformCompositeQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Query Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Query Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformQueryComposition(PlatformQueryComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //UddlSwitch
