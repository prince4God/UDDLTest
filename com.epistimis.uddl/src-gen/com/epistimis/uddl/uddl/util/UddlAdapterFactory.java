/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.uddl.util;

import com.epistimis.uddl.uddl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.epistimis.uddl.uddl.UddlPackage
 * @generated
 */
public class UddlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UddlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UddlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = UddlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UddlSwitch<Adapter> modelSwitch =
    new UddlSwitch<Adapter>()
    {
      @Override
      public Adapter caseDataModel(DataModel object)
      {
        return createDataModelAdapter();
      }
      @Override
      public Adapter caseInclude(Include object)
      {
        return createIncludeAdapter();
      }
      @Override
      public Adapter caseUddlElement(UddlElement object)
      {
        return createUddlElementAdapter();
      }
      @Override
      public Adapter caseConceptualDataModel(ConceptualDataModel object)
      {
        return createConceptualDataModelAdapter();
      }
      @Override
      public Adapter caseLogicalDataModel(LogicalDataModel object)
      {
        return createLogicalDataModelAdapter();
      }
      @Override
      public Adapter casePlatformDataModel(PlatformDataModel object)
      {
        return createPlatformDataModelAdapter();
      }
      @Override
      public Adapter caseConceptualElement(ConceptualElement object)
      {
        return createConceptualElementAdapter();
      }
      @Override
      public Adapter caseConceptualComposableElement(ConceptualComposableElement object)
      {
        return createConceptualComposableElementAdapter();
      }
      @Override
      public Adapter caseConceptualBasisEntity(ConceptualBasisEntity object)
      {
        return createConceptualBasisEntityAdapter();
      }
      @Override
      public Adapter caseConceptualDomain(ConceptualDomain object)
      {
        return createConceptualDomainAdapter();
      }
      @Override
      public Adapter caseConceptualObservable(ConceptualObservable object)
      {
        return createConceptualObservableAdapter();
      }
      @Override
      public Adapter caseConceptualCharacteristic(ConceptualCharacteristic object)
      {
        return createConceptualCharacteristicAdapter();
      }
      @Override
      public Adapter caseConceptualEntity(ConceptualEntity object)
      {
        return createConceptualEntityAdapter();
      }
      @Override
      public Adapter caseConceptualComposition(ConceptualComposition object)
      {
        return createConceptualCompositionAdapter();
      }
      @Override
      public Adapter caseConceptualAssociation(ConceptualAssociation object)
      {
        return createConceptualAssociationAdapter();
      }
      @Override
      public Adapter caseConceptualParticipant(ConceptualParticipant object)
      {
        return createConceptualParticipantAdapter();
      }
      @Override
      public Adapter caseConceptualPathNode(ConceptualPathNode object)
      {
        return createConceptualPathNodeAdapter();
      }
      @Override
      public Adapter caseConceptualParticipantPathNode(ConceptualParticipantPathNode object)
      {
        return createConceptualParticipantPathNodeAdapter();
      }
      @Override
      public Adapter caseConceptualCharacteristicPathNode(ConceptualCharacteristicPathNode object)
      {
        return createConceptualCharacteristicPathNodeAdapter();
      }
      @Override
      public Adapter caseConceptualView(ConceptualView object)
      {
        return createConceptualViewAdapter();
      }
      @Override
      public Adapter caseConceptualQuery(ConceptualQuery object)
      {
        return createConceptualQueryAdapter();
      }
      @Override
      public Adapter caseConceptualCompositeQuery(ConceptualCompositeQuery object)
      {
        return createConceptualCompositeQueryAdapter();
      }
      @Override
      public Adapter caseConceptualQueryComposition(ConceptualQueryComposition object)
      {
        return createConceptualQueryCompositionAdapter();
      }
      @Override
      public Adapter caseLogicalElement(LogicalElement object)
      {
        return createLogicalElementAdapter();
      }
      @Override
      public Adapter caseLogicalUnit(LogicalUnit object)
      {
        return createLogicalUnitAdapter();
      }
      @Override
      public Adapter caseLogicalConversion(LogicalConversion object)
      {
        return createLogicalConversionAdapter();
      }
      @Override
      public Adapter caseLogicalAffineConversion(LogicalAffineConversion object)
      {
        return createLogicalAffineConversionAdapter();
      }
      @Override
      public Adapter caseLogicalValueType(LogicalValueType object)
      {
        return createLogicalValueTypeAdapter();
      }
      @Override
      public Adapter caseLogicalString(LogicalString object)
      {
        return createLogicalStringAdapter();
      }
      @Override
      public Adapter caseLogicalCharacter(LogicalCharacter object)
      {
        return createLogicalCharacterAdapter();
      }
      @Override
      public Adapter caseLogicalBoolean(LogicalBoolean object)
      {
        return createLogicalBooleanAdapter();
      }
      @Override
      public Adapter caseLogicalNumeric(LogicalNumeric object)
      {
        return createLogicalNumericAdapter();
      }
      @Override
      public Adapter caseLogicalInteger(LogicalInteger object)
      {
        return createLogicalIntegerAdapter();
      }
      @Override
      public Adapter caseLogicalNatural(LogicalNatural object)
      {
        return createLogicalNaturalAdapter();
      }
      @Override
      public Adapter caseLogicalReal(LogicalReal object)
      {
        return createLogicalRealAdapter();
      }
      @Override
      public Adapter caseLogicalNonNegativeReal(LogicalNonNegativeReal object)
      {
        return createLogicalNonNegativeRealAdapter();
      }
      @Override
      public Adapter caseLogicalEnumerated(LogicalEnumerated object)
      {
        return createLogicalEnumeratedAdapter();
      }
      @Override
      public Adapter caseTaxonomy(Taxonomy object)
      {
        return createTaxonomyAdapter();
      }
      @Override
      public Adapter caseLogicalEnumeratedBase(LogicalEnumeratedBase object)
      {
        return createLogicalEnumeratedBaseAdapter();
      }
      @Override
      public Adapter caseLogicalEnumeratedSet(LogicalEnumeratedSet object)
      {
        return createLogicalEnumeratedSetAdapter();
      }
      @Override
      public Adapter caseLogicalEnumerationLabel(LogicalEnumerationLabel object)
      {
        return createLogicalEnumerationLabelAdapter();
      }
      @Override
      public Adapter caseLogicalCoordinateSystem(LogicalCoordinateSystem object)
      {
        return createLogicalCoordinateSystemAdapter();
      }
      @Override
      public Adapter caseLogicalCoordinateSystemAxis(LogicalCoordinateSystemAxis object)
      {
        return createLogicalCoordinateSystemAxisAdapter();
      }
      @Override
      public Adapter caseLogicalAbstractMeasurementSystem(LogicalAbstractMeasurementSystem object)
      {
        return createLogicalAbstractMeasurementSystemAdapter();
      }
      @Override
      public Adapter caseLogicalStandardMeasurementSystem(LogicalStandardMeasurementSystem object)
      {
        return createLogicalStandardMeasurementSystemAdapter();
      }
      @Override
      public Adapter caseLogicalLandmark(LogicalLandmark object)
      {
        return createLogicalLandmarkAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementSystem(LogicalMeasurementSystem object)
      {
        return createLogicalMeasurementSystemAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementSystemAxis(LogicalMeasurementSystemAxis object)
      {
        return createLogicalMeasurementSystemAxisAdapter();
      }
      @Override
      public Adapter caseLogicalReferencePoint(LogicalReferencePoint object)
      {
        return createLogicalReferencePointAdapter();
      }
      @Override
      public Adapter caseLogicalReferencePointPart(LogicalReferencePointPart object)
      {
        return createLogicalReferencePointPartAdapter();
      }
      @Override
      public Adapter caseLogicalValueTypeUnit(LogicalValueTypeUnit object)
      {
        return createLogicalValueTypeUnitAdapter();
      }
      @Override
      public Adapter caseLogicalConstraint(LogicalConstraint object)
      {
        return createLogicalConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalIntegerRangeConstraint(LogicalIntegerRangeConstraint object)
      {
        return createLogicalIntegerRangeConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalRealRangeConstraint(LogicalRealRangeConstraint object)
      {
        return createLogicalRealRangeConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalStringConstraint(LogicalStringConstraint object)
      {
        return createLogicalStringConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalRegularExpressionConstraint(LogicalRegularExpressionConstraint object)
      {
        return createLogicalRegularExpressionConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalFixedLengthStringConstraint(LogicalFixedLengthStringConstraint object)
      {
        return createLogicalFixedLengthStringConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalEnumerationConstraint(LogicalEnumerationConstraint object)
      {
        return createLogicalEnumerationConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementConstraint(LogicalMeasurementConstraint object)
      {
        return createLogicalMeasurementConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementSystemConversion(LogicalMeasurementSystemConversion object)
      {
        return createLogicalMeasurementSystemConversionAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurement(LogicalMeasurement object)
      {
        return createLogicalMeasurementAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementAxis(LogicalMeasurementAxis object)
      {
        return createLogicalMeasurementAxisAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementAttribute(LogicalMeasurementAttribute object)
      {
        return createLogicalMeasurementAttributeAdapter();
      }
      @Override
      public Adapter caseLogicalMeasurementConversion(LogicalMeasurementConversion object)
      {
        return createLogicalMeasurementConversionAdapter();
      }
      @Override
      public Adapter caseLogicalComposableElement(LogicalComposableElement object)
      {
        return createLogicalComposableElementAdapter();
      }
      @Override
      public Adapter caseLogicalCharacteristic(LogicalCharacteristic object)
      {
        return createLogicalCharacteristicAdapter();
      }
      @Override
      public Adapter caseLogicalEntity(LogicalEntity object)
      {
        return createLogicalEntityAdapter();
      }
      @Override
      public Adapter caseLogicalComposition(LogicalComposition object)
      {
        return createLogicalCompositionAdapter();
      }
      @Override
      public Adapter caseLogicalAssociation(LogicalAssociation object)
      {
        return createLogicalAssociationAdapter();
      }
      @Override
      public Adapter caseLogicalParticipant(LogicalParticipant object)
      {
        return createLogicalParticipantAdapter();
      }
      @Override
      public Adapter caseLogicalPathNode(LogicalPathNode object)
      {
        return createLogicalPathNodeAdapter();
      }
      @Override
      public Adapter caseLogicalParticipantPathNode(LogicalParticipantPathNode object)
      {
        return createLogicalParticipantPathNodeAdapter();
      }
      @Override
      public Adapter caseLogicalCharacteristicPathNode(LogicalCharacteristicPathNode object)
      {
        return createLogicalCharacteristicPathNodeAdapter();
      }
      @Override
      public Adapter caseLogicalView(LogicalView object)
      {
        return createLogicalViewAdapter();
      }
      @Override
      public Adapter caseLogicalQuery(LogicalQuery object)
      {
        return createLogicalQueryAdapter();
      }
      @Override
      public Adapter caseLogicalCompositeQuery(LogicalCompositeQuery object)
      {
        return createLogicalCompositeQueryAdapter();
      }
      @Override
      public Adapter caseLogicalQueryComposition(LogicalQueryComposition object)
      {
        return createLogicalQueryCompositionAdapter();
      }
      @Override
      public Adapter casePlatformElement(PlatformElement object)
      {
        return createPlatformElementAdapter();
      }
      @Override
      public Adapter casePlatformComposableElement(PlatformComposableElement object)
      {
        return createPlatformComposableElementAdapter();
      }
      @Override
      public Adapter casePlatformDataType(PlatformDataType object)
      {
        return createPlatformDataTypeAdapter();
      }
      @Override
      public Adapter casePlatformPrimitive(PlatformPrimitive object)
      {
        return createPlatformPrimitiveAdapter();
      }
      @Override
      public Adapter casePlatformBoolean(PlatformBoolean object)
      {
        return createPlatformBooleanAdapter();
      }
      @Override
      public Adapter casePlatformOctet(PlatformOctet object)
      {
        return createPlatformOctetAdapter();
      }
      @Override
      public Adapter casePlatformChar(PlatformChar object)
      {
        return createPlatformCharAdapter();
      }
      @Override
      public Adapter casePlatformStringType(PlatformStringType object)
      {
        return createPlatformStringTypeAdapter();
      }
      @Override
      public Adapter casePlatformString(PlatformString object)
      {
        return createPlatformStringAdapter();
      }
      @Override
      public Adapter casePlatformBoundedString(PlatformBoundedString object)
      {
        return createPlatformBoundedStringAdapter();
      }
      @Override
      public Adapter casePlatformCharArray(PlatformCharArray object)
      {
        return createPlatformCharArrayAdapter();
      }
      @Override
      public Adapter casePlatformEnumeration(PlatformEnumeration object)
      {
        return createPlatformEnumerationAdapter();
      }
      @Override
      public Adapter casePlatformNumber(PlatformNumber object)
      {
        return createPlatformNumberAdapter();
      }
      @Override
      public Adapter casePlatformInteger(PlatformInteger object)
      {
        return createPlatformIntegerAdapter();
      }
      @Override
      public Adapter casePlatformShort(PlatformShort object)
      {
        return createPlatformShortAdapter();
      }
      @Override
      public Adapter casePlatformLong(PlatformLong object)
      {
        return createPlatformLongAdapter();
      }
      @Override
      public Adapter casePlatformLongLong(PlatformLongLong object)
      {
        return createPlatformLongLongAdapter();
      }
      @Override
      public Adapter casePlatformReal(PlatformReal object)
      {
        return createPlatformRealAdapter();
      }
      @Override
      public Adapter casePlatformDouble(PlatformDouble object)
      {
        return createPlatformDoubleAdapter();
      }
      @Override
      public Adapter casePlatformLongDouble(PlatformLongDouble object)
      {
        return createPlatformLongDoubleAdapter();
      }
      @Override
      public Adapter casePlatformFloat(PlatformFloat object)
      {
        return createPlatformFloatAdapter();
      }
      @Override
      public Adapter casePlatformFixed(PlatformFixed object)
      {
        return createPlatformFixedAdapter();
      }
      @Override
      public Adapter casePlatformUnsignedInteger(PlatformUnsignedInteger object)
      {
        return createPlatformUnsignedIntegerAdapter();
      }
      @Override
      public Adapter casePlatformUShort(PlatformUShort object)
      {
        return createPlatformUShortAdapter();
      }
      @Override
      public Adapter casePlatformULong(PlatformULong object)
      {
        return createPlatformULongAdapter();
      }
      @Override
      public Adapter casePlatformULongLong(PlatformULongLong object)
      {
        return createPlatformULongLongAdapter();
      }
      @Override
      public Adapter casePlatformSequence(PlatformSequence object)
      {
        return createPlatformSequenceAdapter();
      }
      @Override
      public Adapter casePlatformArray(PlatformArray object)
      {
        return createPlatformArrayAdapter();
      }
      @Override
      public Adapter casePlatformStruct(PlatformStruct object)
      {
        return createPlatformStructAdapter();
      }
      @Override
      public Adapter casePlatformStructMember(PlatformStructMember object)
      {
        return createPlatformStructMemberAdapter();
      }
      @Override
      public Adapter casePlatformCharacteristic(PlatformCharacteristic object)
      {
        return createPlatformCharacteristicAdapter();
      }
      @Override
      public Adapter casePlatformEntity(PlatformEntity object)
      {
        return createPlatformEntityAdapter();
      }
      @Override
      public Adapter casePlatformComposition(PlatformComposition object)
      {
        return createPlatformCompositionAdapter();
      }
      @Override
      public Adapter casePlatformAssociation(PlatformAssociation object)
      {
        return createPlatformAssociationAdapter();
      }
      @Override
      public Adapter casePlatformParticipant(PlatformParticipant object)
      {
        return createPlatformParticipantAdapter();
      }
      @Override
      public Adapter casePlatformPathNode(PlatformPathNode object)
      {
        return createPlatformPathNodeAdapter();
      }
      @Override
      public Adapter casePlatformParticipantPathNode(PlatformParticipantPathNode object)
      {
        return createPlatformParticipantPathNodeAdapter();
      }
      @Override
      public Adapter casePlatformCharacteristicPathNode(PlatformCharacteristicPathNode object)
      {
        return createPlatformCharacteristicPathNodeAdapter();
      }
      @Override
      public Adapter casePlatformView(PlatformView object)
      {
        return createPlatformViewAdapter();
      }
      @Override
      public Adapter casePlatformQuery(PlatformQuery object)
      {
        return createPlatformQueryAdapter();
      }
      @Override
      public Adapter casePlatformCompositeQuery(PlatformCompositeQuery object)
      {
        return createPlatformCompositeQueryAdapter();
      }
      @Override
      public Adapter casePlatformQueryComposition(PlatformQueryComposition object)
      {
        return createPlatformQueryCompositionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.DataModel <em>Data Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.DataModel
   * @generated
   */
  public Adapter createDataModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.Include <em>Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.Include
   * @generated
   */
  public Adapter createIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.UddlElement <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.UddlElement
   * @generated
   */
  public Adapter createUddlElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualDataModel <em>Conceptual Data Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualDataModel
   * @generated
   */
  public Adapter createConceptualDataModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalDataModel <em>Logical Data Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalDataModel
   * @generated
   */
  public Adapter createLogicalDataModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformDataModel <em>Platform Data Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformDataModel
   * @generated
   */
  public Adapter createPlatformDataModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualElement <em>Conceptual Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualElement
   * @generated
   */
  public Adapter createConceptualElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualComposableElement <em>Conceptual Composable Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualComposableElement
   * @generated
   */
  public Adapter createConceptualComposableElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualBasisEntity <em>Conceptual Basis Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualBasisEntity
   * @generated
   */
  public Adapter createConceptualBasisEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualDomain <em>Conceptual Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualDomain
   * @generated
   */
  public Adapter createConceptualDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualObservable <em>Conceptual Observable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualObservable
   * @generated
   */
  public Adapter createConceptualObservableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualCharacteristic <em>Conceptual Characteristic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualCharacteristic
   * @generated
   */
  public Adapter createConceptualCharacteristicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualEntity <em>Conceptual Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualEntity
   * @generated
   */
  public Adapter createConceptualEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualComposition <em>Conceptual Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualComposition
   * @generated
   */
  public Adapter createConceptualCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualAssociation <em>Conceptual Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualAssociation
   * @generated
   */
  public Adapter createConceptualAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualParticipant <em>Conceptual Participant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualParticipant
   * @generated
   */
  public Adapter createConceptualParticipantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualPathNode <em>Conceptual Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualPathNode
   * @generated
   */
  public Adapter createConceptualPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualParticipantPathNode <em>Conceptual Participant Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualParticipantPathNode
   * @generated
   */
  public Adapter createConceptualParticipantPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualCharacteristicPathNode <em>Conceptual Characteristic Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualCharacteristicPathNode
   * @generated
   */
  public Adapter createConceptualCharacteristicPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualView <em>Conceptual View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualView
   * @generated
   */
  public Adapter createConceptualViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualQuery <em>Conceptual Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualQuery
   * @generated
   */
  public Adapter createConceptualQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualCompositeQuery <em>Conceptual Composite Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualCompositeQuery
   * @generated
   */
  public Adapter createConceptualCompositeQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.ConceptualQueryComposition <em>Conceptual Query Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.ConceptualQueryComposition
   * @generated
   */
  public Adapter createConceptualQueryCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalElement <em>Logical Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalElement
   * @generated
   */
  public Adapter createLogicalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalUnit <em>Logical Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalUnit
   * @generated
   */
  public Adapter createLogicalUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalConversion <em>Logical Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalConversion
   * @generated
   */
  public Adapter createLogicalConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalAffineConversion <em>Logical Affine Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalAffineConversion
   * @generated
   */
  public Adapter createLogicalAffineConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalValueType <em>Logical Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalValueType
   * @generated
   */
  public Adapter createLogicalValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalString <em>Logical String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalString
   * @generated
   */
  public Adapter createLogicalStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalCharacter <em>Logical Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalCharacter
   * @generated
   */
  public Adapter createLogicalCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalBoolean <em>Logical Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalBoolean
   * @generated
   */
  public Adapter createLogicalBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalNumeric <em>Logical Numeric</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalNumeric
   * @generated
   */
  public Adapter createLogicalNumericAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalInteger <em>Logical Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalInteger
   * @generated
   */
  public Adapter createLogicalIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalNatural <em>Logical Natural</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalNatural
   * @generated
   */
  public Adapter createLogicalNaturalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalReal <em>Logical Real</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalReal
   * @generated
   */
  public Adapter createLogicalRealAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalNonNegativeReal <em>Logical Non Negative Real</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalNonNegativeReal
   * @generated
   */
  public Adapter createLogicalNonNegativeRealAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalEnumerated <em>Logical Enumerated</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalEnumerated
   * @generated
   */
  public Adapter createLogicalEnumeratedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.Taxonomy <em>Taxonomy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.Taxonomy
   * @generated
   */
  public Adapter createTaxonomyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalEnumeratedBase <em>Logical Enumerated Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalEnumeratedBase
   * @generated
   */
  public Adapter createLogicalEnumeratedBaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalEnumeratedSet <em>Logical Enumerated Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalEnumeratedSet
   * @generated
   */
  public Adapter createLogicalEnumeratedSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalEnumerationLabel <em>Logical Enumeration Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalEnumerationLabel
   * @generated
   */
  public Adapter createLogicalEnumerationLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalCoordinateSystem <em>Logical Coordinate System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalCoordinateSystem
   * @generated
   */
  public Adapter createLogicalCoordinateSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalCoordinateSystemAxis <em>Logical Coordinate System Axis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalCoordinateSystemAxis
   * @generated
   */
  public Adapter createLogicalCoordinateSystemAxisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalAbstractMeasurementSystem <em>Logical Abstract Measurement System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalAbstractMeasurementSystem
   * @generated
   */
  public Adapter createLogicalAbstractMeasurementSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalStandardMeasurementSystem <em>Logical Standard Measurement System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalStandardMeasurementSystem
   * @generated
   */
  public Adapter createLogicalStandardMeasurementSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalLandmark <em>Logical Landmark</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalLandmark
   * @generated
   */
  public Adapter createLogicalLandmarkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementSystem <em>Logical Measurement System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementSystem
   * @generated
   */
  public Adapter createLogicalMeasurementSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementSystemAxis <em>Logical Measurement System Axis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementSystemAxis
   * @generated
   */
  public Adapter createLogicalMeasurementSystemAxisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalReferencePoint <em>Logical Reference Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalReferencePoint
   * @generated
   */
  public Adapter createLogicalReferencePointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalReferencePointPart <em>Logical Reference Point Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalReferencePointPart
   * @generated
   */
  public Adapter createLogicalReferencePointPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalValueTypeUnit <em>Logical Value Type Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalValueTypeUnit
   * @generated
   */
  public Adapter createLogicalValueTypeUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalConstraint <em>Logical Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalConstraint
   * @generated
   */
  public Adapter createLogicalConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalIntegerRangeConstraint <em>Logical Integer Range Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalIntegerRangeConstraint
   * @generated
   */
  public Adapter createLogicalIntegerRangeConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalRealRangeConstraint <em>Logical Real Range Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalRealRangeConstraint
   * @generated
   */
  public Adapter createLogicalRealRangeConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalStringConstraint <em>Logical String Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalStringConstraint
   * @generated
   */
  public Adapter createLogicalStringConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalRegularExpressionConstraint <em>Logical Regular Expression Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalRegularExpressionConstraint
   * @generated
   */
  public Adapter createLogicalRegularExpressionConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalFixedLengthStringConstraint <em>Logical Fixed Length String Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalFixedLengthStringConstraint
   * @generated
   */
  public Adapter createLogicalFixedLengthStringConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalEnumerationConstraint <em>Logical Enumeration Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalEnumerationConstraint
   * @generated
   */
  public Adapter createLogicalEnumerationConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementConstraint <em>Logical Measurement Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementConstraint
   * @generated
   */
  public Adapter createLogicalMeasurementConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementSystemConversion <em>Logical Measurement System Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementSystemConversion
   * @generated
   */
  public Adapter createLogicalMeasurementSystemConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurement <em>Logical Measurement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurement
   * @generated
   */
  public Adapter createLogicalMeasurementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementAxis <em>Logical Measurement Axis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementAxis
   * @generated
   */
  public Adapter createLogicalMeasurementAxisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementAttribute <em>Logical Measurement Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementAttribute
   * @generated
   */
  public Adapter createLogicalMeasurementAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalMeasurementConversion <em>Logical Measurement Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalMeasurementConversion
   * @generated
   */
  public Adapter createLogicalMeasurementConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalComposableElement <em>Logical Composable Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalComposableElement
   * @generated
   */
  public Adapter createLogicalComposableElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalCharacteristic <em>Logical Characteristic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalCharacteristic
   * @generated
   */
  public Adapter createLogicalCharacteristicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalEntity <em>Logical Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalEntity
   * @generated
   */
  public Adapter createLogicalEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalComposition <em>Logical Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalComposition
   * @generated
   */
  public Adapter createLogicalCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalAssociation <em>Logical Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalAssociation
   * @generated
   */
  public Adapter createLogicalAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalParticipant <em>Logical Participant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalParticipant
   * @generated
   */
  public Adapter createLogicalParticipantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalPathNode <em>Logical Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalPathNode
   * @generated
   */
  public Adapter createLogicalPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalParticipantPathNode <em>Logical Participant Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalParticipantPathNode
   * @generated
   */
  public Adapter createLogicalParticipantPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalCharacteristicPathNode <em>Logical Characteristic Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalCharacteristicPathNode
   * @generated
   */
  public Adapter createLogicalCharacteristicPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalView <em>Logical View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalView
   * @generated
   */
  public Adapter createLogicalViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalQuery <em>Logical Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalQuery
   * @generated
   */
  public Adapter createLogicalQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalCompositeQuery <em>Logical Composite Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalCompositeQuery
   * @generated
   */
  public Adapter createLogicalCompositeQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.LogicalQueryComposition <em>Logical Query Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.LogicalQueryComposition
   * @generated
   */
  public Adapter createLogicalQueryCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformElement <em>Platform Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformElement
   * @generated
   */
  public Adapter createPlatformElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformComposableElement <em>Platform Composable Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformComposableElement
   * @generated
   */
  public Adapter createPlatformComposableElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformDataType <em>Platform Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformDataType
   * @generated
   */
  public Adapter createPlatformDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformPrimitive <em>Platform Primitive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformPrimitive
   * @generated
   */
  public Adapter createPlatformPrimitiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformBoolean <em>Platform Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformBoolean
   * @generated
   */
  public Adapter createPlatformBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformOctet <em>Platform Octet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformOctet
   * @generated
   */
  public Adapter createPlatformOctetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformChar <em>Platform Char</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformChar
   * @generated
   */
  public Adapter createPlatformCharAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformStringType <em>Platform String Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformStringType
   * @generated
   */
  public Adapter createPlatformStringTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformString <em>Platform String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformString
   * @generated
   */
  public Adapter createPlatformStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformBoundedString <em>Platform Bounded String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformBoundedString
   * @generated
   */
  public Adapter createPlatformBoundedStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformCharArray <em>Platform Char Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformCharArray
   * @generated
   */
  public Adapter createPlatformCharArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformEnumeration <em>Platform Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformEnumeration
   * @generated
   */
  public Adapter createPlatformEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformNumber <em>Platform Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformNumber
   * @generated
   */
  public Adapter createPlatformNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformInteger <em>Platform Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformInteger
   * @generated
   */
  public Adapter createPlatformIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformShort <em>Platform Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformShort
   * @generated
   */
  public Adapter createPlatformShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformLong <em>Platform Long</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformLong
   * @generated
   */
  public Adapter createPlatformLongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformLongLong <em>Platform Long Long</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformLongLong
   * @generated
   */
  public Adapter createPlatformLongLongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformReal <em>Platform Real</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformReal
   * @generated
   */
  public Adapter createPlatformRealAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformDouble <em>Platform Double</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformDouble
   * @generated
   */
  public Adapter createPlatformDoubleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformLongDouble <em>Platform Long Double</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformLongDouble
   * @generated
   */
  public Adapter createPlatformLongDoubleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformFloat <em>Platform Float</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformFloat
   * @generated
   */
  public Adapter createPlatformFloatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformFixed <em>Platform Fixed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformFixed
   * @generated
   */
  public Adapter createPlatformFixedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformUnsignedInteger <em>Platform Unsigned Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformUnsignedInteger
   * @generated
   */
  public Adapter createPlatformUnsignedIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformUShort <em>Platform UShort</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformUShort
   * @generated
   */
  public Adapter createPlatformUShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformULong <em>Platform ULong</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformULong
   * @generated
   */
  public Adapter createPlatformULongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformULongLong <em>Platform ULong Long</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformULongLong
   * @generated
   */
  public Adapter createPlatformULongLongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformSequence <em>Platform Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformSequence
   * @generated
   */
  public Adapter createPlatformSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformArray <em>Platform Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformArray
   * @generated
   */
  public Adapter createPlatformArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformStruct <em>Platform Struct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformStruct
   * @generated
   */
  public Adapter createPlatformStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformStructMember <em>Platform Struct Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformStructMember
   * @generated
   */
  public Adapter createPlatformStructMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformCharacteristic <em>Platform Characteristic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformCharacteristic
   * @generated
   */
  public Adapter createPlatformCharacteristicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformEntity <em>Platform Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformEntity
   * @generated
   */
  public Adapter createPlatformEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformComposition <em>Platform Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformComposition
   * @generated
   */
  public Adapter createPlatformCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformAssociation <em>Platform Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformAssociation
   * @generated
   */
  public Adapter createPlatformAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformParticipant <em>Platform Participant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformParticipant
   * @generated
   */
  public Adapter createPlatformParticipantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformPathNode <em>Platform Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformPathNode
   * @generated
   */
  public Adapter createPlatformPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformParticipantPathNode <em>Platform Participant Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformParticipantPathNode
   * @generated
   */
  public Adapter createPlatformParticipantPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformCharacteristicPathNode <em>Platform Characteristic Path Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformCharacteristicPathNode
   * @generated
   */
  public Adapter createPlatformCharacteristicPathNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformView <em>Platform View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformView
   * @generated
   */
  public Adapter createPlatformViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformQuery <em>Platform Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformQuery
   * @generated
   */
  public Adapter createPlatformQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformCompositeQuery <em>Platform Composite Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformCompositeQuery
   * @generated
   */
  public Adapter createPlatformCompositeQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.uddl.PlatformQueryComposition <em>Platform Query Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.uddl.PlatformQueryComposition
   * @generated
   */
  public Adapter createPlatformQueryCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //UddlAdapterFactory
