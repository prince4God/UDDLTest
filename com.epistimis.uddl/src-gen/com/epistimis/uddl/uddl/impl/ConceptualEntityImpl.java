/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.uddl.impl;

import com.epistimis.uddl.uddl.ConceptualBasisEntity;
import com.epistimis.uddl.uddl.ConceptualComposition;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.UddlPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conceptual Entity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.uddl.impl.ConceptualEntityImpl#getSpecializes <em>Specializes</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.ConceptualEntityImpl#getComposition <em>Composition</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.ConceptualEntityImpl#getBasisEntity <em>Basis Entity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptualEntityImpl extends ConceptualComposableElementImpl implements ConceptualEntity
{
  /**
   * The cached value of the '{@link #getSpecializes() <em>Specializes</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecializes()
   * @generated
   * @ordered
   */
  protected ConceptualEntity specializes;

  /**
   * The cached value of the '{@link #getComposition() <em>Composition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComposition()
   * @generated
   * @ordered
   */
  protected EList<ConceptualComposition> composition;

  /**
   * The cached value of the '{@link #getBasisEntity() <em>Basis Entity</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBasisEntity()
   * @generated
   * @ordered
   */
  protected EList<ConceptualBasisEntity> basisEntity;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptualEntityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UddlPackage.Literals.CONCEPTUAL_ENTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptualEntity getSpecializes()
  {
    if (specializes != null && specializes.eIsProxy())
    {
      InternalEObject oldSpecializes = (InternalEObject)specializes;
      specializes = (ConceptualEntity)eResolveProxy(oldSpecializes);
      if (specializes != oldSpecializes)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UddlPackage.CONCEPTUAL_ENTITY__SPECIALIZES, oldSpecializes, specializes));
      }
    }
    return specializes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptualEntity basicGetSpecializes()
  {
    return specializes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpecializes(ConceptualEntity newSpecializes)
  {
    ConceptualEntity oldSpecializes = specializes;
    specializes = newSpecializes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.CONCEPTUAL_ENTITY__SPECIALIZES, oldSpecializes, specializes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptualComposition> getComposition()
  {
    if (composition == null)
    {
      composition = new EObjectContainmentEList<ConceptualComposition>(ConceptualComposition.class, this, UddlPackage.CONCEPTUAL_ENTITY__COMPOSITION);
    }
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptualBasisEntity> getBasisEntity()
  {
    if (basisEntity == null)
    {
      basisEntity = new EObjectResolvingEList<ConceptualBasisEntity>(ConceptualBasisEntity.class, this, UddlPackage.CONCEPTUAL_ENTITY__BASIS_ENTITY);
    }
    return basisEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UddlPackage.CONCEPTUAL_ENTITY__COMPOSITION:
        return ((InternalEList<?>)getComposition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UddlPackage.CONCEPTUAL_ENTITY__SPECIALIZES:
        if (resolve) return getSpecializes();
        return basicGetSpecializes();
      case UddlPackage.CONCEPTUAL_ENTITY__COMPOSITION:
        return getComposition();
      case UddlPackage.CONCEPTUAL_ENTITY__BASIS_ENTITY:
        return getBasisEntity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UddlPackage.CONCEPTUAL_ENTITY__SPECIALIZES:
        setSpecializes((ConceptualEntity)newValue);
        return;
      case UddlPackage.CONCEPTUAL_ENTITY__COMPOSITION:
        getComposition().clear();
        getComposition().addAll((Collection<? extends ConceptualComposition>)newValue);
        return;
      case UddlPackage.CONCEPTUAL_ENTITY__BASIS_ENTITY:
        getBasisEntity().clear();
        getBasisEntity().addAll((Collection<? extends ConceptualBasisEntity>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UddlPackage.CONCEPTUAL_ENTITY__SPECIALIZES:
        setSpecializes((ConceptualEntity)null);
        return;
      case UddlPackage.CONCEPTUAL_ENTITY__COMPOSITION:
        getComposition().clear();
        return;
      case UddlPackage.CONCEPTUAL_ENTITY__BASIS_ENTITY:
        getBasisEntity().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UddlPackage.CONCEPTUAL_ENTITY__SPECIALIZES:
        return specializes != null;
      case UddlPackage.CONCEPTUAL_ENTITY__COMPOSITION:
        return composition != null && !composition.isEmpty();
      case UddlPackage.CONCEPTUAL_ENTITY__BASIS_ENTITY:
        return basisEntity != null && !basisEntity.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ConceptualEntityImpl
