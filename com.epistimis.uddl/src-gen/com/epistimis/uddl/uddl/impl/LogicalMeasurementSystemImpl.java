/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.uddl.impl;

import com.epistimis.uddl.uddl.LogicalCoordinateSystem;
import com.epistimis.uddl.uddl.LogicalMeasurementConstraint;
import com.epistimis.uddl.uddl.LogicalMeasurementSystem;
import com.epistimis.uddl.uddl.LogicalMeasurementSystemAxis;
import com.epistimis.uddl.uddl.LogicalReferencePoint;
import com.epistimis.uddl.uddl.UddlPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logical Measurement System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalMeasurementSystemImpl#getMeasurementSystemAxis <em>Measurement System Axis</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalMeasurementSystemImpl#getCoordinateSystem <em>Coordinate System</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalMeasurementSystemImpl#getExternalStandardReference <em>External Standard Reference</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalMeasurementSystemImpl#getOrientation <em>Orientation</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalMeasurementSystemImpl#getReferencePoint <em>Reference Point</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalMeasurementSystemImpl#getConstraint <em>Constraint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicalMeasurementSystemImpl extends LogicalAbstractMeasurementSystemImpl implements LogicalMeasurementSystem
{
  /**
   * The cached value of the '{@link #getMeasurementSystemAxis() <em>Measurement System Axis</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurementSystemAxis()
   * @generated
   * @ordered
   */
  protected EList<LogicalMeasurementSystemAxis> measurementSystemAxis;

  /**
   * The cached value of the '{@link #getCoordinateSystem() <em>Coordinate System</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoordinateSystem()
   * @generated
   * @ordered
   */
  protected LogicalCoordinateSystem coordinateSystem;

  /**
   * The default value of the '{@link #getExternalStandardReference() <em>External Standard Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternalStandardReference()
   * @generated
   * @ordered
   */
  protected static final String EXTERNAL_STANDARD_REFERENCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExternalStandardReference() <em>External Standard Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternalStandardReference()
   * @generated
   * @ordered
   */
  protected String externalStandardReference = EXTERNAL_STANDARD_REFERENCE_EDEFAULT;

  /**
   * The default value of the '{@link #getOrientation() <em>Orientation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrientation()
   * @generated
   * @ordered
   */
  protected static final String ORIENTATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOrientation() <em>Orientation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrientation()
   * @generated
   * @ordered
   */
  protected String orientation = ORIENTATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getReferencePoint() <em>Reference Point</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferencePoint()
   * @generated
   * @ordered
   */
  protected EList<LogicalReferencePoint> referencePoint;

  /**
   * The cached value of the '{@link #getConstraint() <em>Constraint</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraint()
   * @generated
   * @ordered
   */
  protected EList<LogicalMeasurementConstraint> constraint;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicalMeasurementSystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UddlPackage.Literals.LOGICAL_MEASUREMENT_SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LogicalMeasurementSystemAxis> getMeasurementSystemAxis()
  {
    if (measurementSystemAxis == null)
    {
      measurementSystemAxis = new EObjectResolvingEList<LogicalMeasurementSystemAxis>(LogicalMeasurementSystemAxis.class, this, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__MEASUREMENT_SYSTEM_AXIS);
    }
    return measurementSystemAxis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalCoordinateSystem getCoordinateSystem()
  {
    if (coordinateSystem != null && coordinateSystem.eIsProxy())
    {
      InternalEObject oldCoordinateSystem = (InternalEObject)coordinateSystem;
      coordinateSystem = (LogicalCoordinateSystem)eResolveProxy(oldCoordinateSystem);
      if (coordinateSystem != oldCoordinateSystem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM, oldCoordinateSystem, coordinateSystem));
      }
    }
    return coordinateSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalCoordinateSystem basicGetCoordinateSystem()
  {
    return coordinateSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCoordinateSystem(LogicalCoordinateSystem newCoordinateSystem)
  {
    LogicalCoordinateSystem oldCoordinateSystem = coordinateSystem;
    coordinateSystem = newCoordinateSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM, oldCoordinateSystem, coordinateSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExternalStandardReference()
  {
    return externalStandardReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExternalStandardReference(String newExternalStandardReference)
  {
    String oldExternalStandardReference = externalStandardReference;
    externalStandardReference = newExternalStandardReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__EXTERNAL_STANDARD_REFERENCE, oldExternalStandardReference, externalStandardReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOrientation()
  {
    return orientation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrientation(String newOrientation)
  {
    String oldOrientation = orientation;
    orientation = newOrientation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__ORIENTATION, oldOrientation, orientation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LogicalReferencePoint> getReferencePoint()
  {
    if (referencePoint == null)
    {
      referencePoint = new EObjectContainmentEList<LogicalReferencePoint>(LogicalReferencePoint.class, this, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__REFERENCE_POINT);
    }
    return referencePoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LogicalMeasurementConstraint> getConstraint()
  {
    if (constraint == null)
    {
      constraint = new EObjectContainmentEList<LogicalMeasurementConstraint>(LogicalMeasurementConstraint.class, this, UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__CONSTRAINT);
    }
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__REFERENCE_POINT:
        return ((InternalEList<?>)getReferencePoint()).basicRemove(otherEnd, msgs);
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__CONSTRAINT:
        return ((InternalEList<?>)getConstraint()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__MEASUREMENT_SYSTEM_AXIS:
        return getMeasurementSystemAxis();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM:
        if (resolve) return getCoordinateSystem();
        return basicGetCoordinateSystem();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__EXTERNAL_STANDARD_REFERENCE:
        return getExternalStandardReference();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__ORIENTATION:
        return getOrientation();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__REFERENCE_POINT:
        return getReferencePoint();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__CONSTRAINT:
        return getConstraint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__MEASUREMENT_SYSTEM_AXIS:
        getMeasurementSystemAxis().clear();
        getMeasurementSystemAxis().addAll((Collection<? extends LogicalMeasurementSystemAxis>)newValue);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM:
        setCoordinateSystem((LogicalCoordinateSystem)newValue);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__EXTERNAL_STANDARD_REFERENCE:
        setExternalStandardReference((String)newValue);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__ORIENTATION:
        setOrientation((String)newValue);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__REFERENCE_POINT:
        getReferencePoint().clear();
        getReferencePoint().addAll((Collection<? extends LogicalReferencePoint>)newValue);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__CONSTRAINT:
        getConstraint().clear();
        getConstraint().addAll((Collection<? extends LogicalMeasurementConstraint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__MEASUREMENT_SYSTEM_AXIS:
        getMeasurementSystemAxis().clear();
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM:
        setCoordinateSystem((LogicalCoordinateSystem)null);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__EXTERNAL_STANDARD_REFERENCE:
        setExternalStandardReference(EXTERNAL_STANDARD_REFERENCE_EDEFAULT);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__ORIENTATION:
        setOrientation(ORIENTATION_EDEFAULT);
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__REFERENCE_POINT:
        getReferencePoint().clear();
        return;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__CONSTRAINT:
        getConstraint().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__MEASUREMENT_SYSTEM_AXIS:
        return measurementSystemAxis != null && !measurementSystemAxis.isEmpty();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM:
        return coordinateSystem != null;
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__EXTERNAL_STANDARD_REFERENCE:
        return EXTERNAL_STANDARD_REFERENCE_EDEFAULT == null ? externalStandardReference != null : !EXTERNAL_STANDARD_REFERENCE_EDEFAULT.equals(externalStandardReference);
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__ORIENTATION:
        return ORIENTATION_EDEFAULT == null ? orientation != null : !ORIENTATION_EDEFAULT.equals(orientation);
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__REFERENCE_POINT:
        return referencePoint != null && !referencePoint.isEmpty();
      case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM__CONSTRAINT:
        return constraint != null && !constraint.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (externalStandardReference: ");
    result.append(externalStandardReference);
    result.append(", orientation: ");
    result.append(orientation);
    result.append(')');
    return result.toString();
  }

} //LogicalMeasurementSystemImpl
