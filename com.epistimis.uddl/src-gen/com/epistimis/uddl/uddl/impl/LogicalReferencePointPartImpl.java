/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.uddl.impl;

import com.epistimis.uddl.uddl.LogicalMeasurementSystemAxis;
import com.epistimis.uddl.uddl.LogicalReferencePointPart;
import com.epistimis.uddl.uddl.LogicalValueTypeUnit;
import com.epistimis.uddl.uddl.UddlPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logical Reference Point Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalReferencePointPartImpl#getAxis <em>Axis</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalReferencePointPartImpl#getValue <em>Value</em>}</li>
 *   <li>{@link com.epistimis.uddl.uddl.impl.LogicalReferencePointPartImpl#getValueTypeUnit <em>Value Type Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicalReferencePointPartImpl extends MinimalEObjectImpl.Container implements LogicalReferencePointPart
{
  /**
   * The cached value of the '{@link #getAxis() <em>Axis</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAxis()
   * @generated
   * @ordered
   */
  protected LogicalMeasurementSystemAxis axis;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getValueTypeUnit() <em>Value Type Unit</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueTypeUnit()
   * @generated
   * @ordered
   */
  protected LogicalValueTypeUnit valueTypeUnit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicalReferencePointPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UddlPackage.Literals.LOGICAL_REFERENCE_POINT_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalMeasurementSystemAxis getAxis()
  {
    if (axis != null && axis.eIsProxy())
    {
      InternalEObject oldAxis = (InternalEObject)axis;
      axis = (LogicalMeasurementSystemAxis)eResolveProxy(oldAxis);
      if (axis != oldAxis)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UddlPackage.LOGICAL_REFERENCE_POINT_PART__AXIS, oldAxis, axis));
      }
    }
    return axis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalMeasurementSystemAxis basicGetAxis()
  {
    return axis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAxis(LogicalMeasurementSystemAxis newAxis)
  {
    LogicalMeasurementSystemAxis oldAxis = axis;
    axis = newAxis;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.LOGICAL_REFERENCE_POINT_PART__AXIS, oldAxis, axis));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalValueTypeUnit getValueTypeUnit()
  {
    if (valueTypeUnit != null && valueTypeUnit.eIsProxy())
    {
      InternalEObject oldValueTypeUnit = (InternalEObject)valueTypeUnit;
      valueTypeUnit = (LogicalValueTypeUnit)eResolveProxy(oldValueTypeUnit);
      if (valueTypeUnit != oldValueTypeUnit)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT, oldValueTypeUnit, valueTypeUnit));
      }
    }
    return valueTypeUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalValueTypeUnit basicGetValueTypeUnit()
  {
    return valueTypeUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueTypeUnit(LogicalValueTypeUnit newValueTypeUnit)
  {
    LogicalValueTypeUnit oldValueTypeUnit = valueTypeUnit;
    valueTypeUnit = newValueTypeUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT, oldValueTypeUnit, valueTypeUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__AXIS:
        if (resolve) return getAxis();
        return basicGetAxis();
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE:
        return getValue();
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT:
        if (resolve) return getValueTypeUnit();
        return basicGetValueTypeUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__AXIS:
        setAxis((LogicalMeasurementSystemAxis)newValue);
        return;
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE:
        setValue((String)newValue);
        return;
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT:
        setValueTypeUnit((LogicalValueTypeUnit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__AXIS:
        setAxis((LogicalMeasurementSystemAxis)null);
        return;
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT:
        setValueTypeUnit((LogicalValueTypeUnit)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__AXIS:
        return axis != null;
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case UddlPackage.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT:
        return valueTypeUnit != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //LogicalReferencePointPartImpl
