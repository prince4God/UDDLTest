/*
 * generated by Xtext 2.32.0
 */
/*
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.serializer;

import com.epistimis.uddl.services.UddlGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class UddlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected UddlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConceptualComposition___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q;
	protected AbstractElementAlias match_ConceptualParticipant___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q;
	protected AbstractElementAlias match_LogicalEnumeratedSet_CommaKeyword_5_q;
	protected AbstractElementAlias match_LogicalEnumeratedSet_CommaKeyword_6_1_q;
	protected AbstractElementAlias match_LogicalEnumerated_CommaKeyword_6_q;
	protected AbstractElementAlias match_LogicalEnumerated_CommaKeyword_7_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (UddlGrammarAccess) access;
		match_ConceptualComposition___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConceptualCompositionAccess().getLeftSquareBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getConceptualCompositionAccess().getColonKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getConceptualCompositionAccess().getRightSquareBracketKeyword_2_4()));
		match_ConceptualParticipant___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConceptualParticipantAccess().getLeftSquareBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getConceptualParticipantAccess().getColonKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getConceptualParticipantAccess().getRightSquareBracketKeyword_2_4()));
		match_LogicalEnumeratedSet_CommaKeyword_5_q = new TokenAlias(false, true, grammarAccess.getLogicalEnumeratedSetAccess().getCommaKeyword_5());
		match_LogicalEnumeratedSet_CommaKeyword_6_1_q = new TokenAlias(false, true, grammarAccess.getLogicalEnumeratedSetAccess().getCommaKeyword_6_1());
		match_LogicalEnumerated_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getLogicalEnumeratedAccess().getCommaKeyword_6());
		match_LogicalEnumerated_CommaKeyword_7_1_q = new TokenAlias(false, true, grammarAccess.getLogicalEnumeratedAccess().getCommaKeyword_7_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConceptualComposition___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q.equals(syntax))
				emit_ConceptualComposition___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConceptualParticipant___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q.equals(syntax))
				emit_ConceptualParticipant___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalEnumeratedSet_CommaKeyword_5_q.equals(syntax))
				emit_LogicalEnumeratedSet_CommaKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalEnumeratedSet_CommaKeyword_6_1_q.equals(syntax))
				emit_LogicalEnumeratedSet_CommaKeyword_6_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalEnumerated_CommaKeyword_6_q.equals(syntax))
				emit_LogicalEnumerated_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalEnumerated_CommaKeyword_7_1_q.equals(syntax))
				emit_LogicalEnumerated_CommaKeyword_7_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('[' ':' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     rolename=ID (ambiguity) ':' specializes=[ConceptualCharacteristic|QN]
	 *     rolename=ID (ambiguity) ';' (rule end)
	 *     rolename=ID (ambiguity) description=STRING
	 
	 * </pre>
	 */
	protected void emit_ConceptualComposition___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('[' ':' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     rolename=ID (ambiguity) ':' specializes=[ConceptualCharacteristic|QN]
	 *     rolename=ID (ambiguity) '{' 'src:' '[' sourceLowerBound=INT
	 *     rolename=ID (ambiguity) description=STRING
	 
	 * </pre>
	 */
	protected void emit_ConceptualParticipant___LeftSquareBracketKeyword_2_0_ColonKeyword_2_2_RightSquareBracketKeyword_2_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     label+=LogicalEnumeratedSet (ambiguity) ']' ')' (rule end)
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumerationLabel
	 *     label+=LogicalEnumerationLabel (ambiguity) ']' ')' (rule end)
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumerationLabel
	 
	 * </pre>
	 */
	protected void emit_LogicalEnumeratedSet_CommaKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     label+=LogicalEnumeratedSet (ambiguity) ']' ')' (rule end)
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumerationLabel
	 *     label+=LogicalEnumerationLabel (ambiguity) ']' ')' (rule end)
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumerationLabel
	 
	 * </pre>
	 */
	protected void emit_LogicalEnumeratedSet_CommaKeyword_6_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     label+=LogicalEnumeratedSet (ambiguity) ']' ';' (rule end)
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumerationLabel
	 *     label+=LogicalEnumerationLabel (ambiguity) ']' ';' (rule end)
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumerationLabel
	 
	 * </pre>
	 */
	protected void emit_LogicalEnumerated_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     label+=LogicalEnumeratedSet (ambiguity) ']' ';' (rule end)
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumeratedSet (ambiguity) label+=LogicalEnumerationLabel
	 *     label+=LogicalEnumerationLabel (ambiguity) ']' ';' (rule end)
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumeratedSet
	 *     label+=LogicalEnumerationLabel (ambiguity) label+=LogicalEnumerationLabel
	 
	 * </pre>
	 */
	protected void emit_LogicalEnumerated_CommaKeyword_7_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
