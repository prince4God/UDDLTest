/*
 * generated by Xtext 2.32.0
 */
/*
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.serializer;

import com.epistimis.uddl.services.UddlGrammarAccess;
import com.epistimis.uddl.uddl.ConceptualAssociation;
import com.epistimis.uddl.uddl.ConceptualBasisEntity;
import com.epistimis.uddl.uddl.ConceptualCharacteristicPathNode;
import com.epistimis.uddl.uddl.ConceptualCompositeQuery;
import com.epistimis.uddl.uddl.ConceptualComposition;
import com.epistimis.uddl.uddl.ConceptualDataModel;
import com.epistimis.uddl.uddl.ConceptualDomain;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.ConceptualObservable;
import com.epistimis.uddl.uddl.ConceptualParticipant;
import com.epistimis.uddl.uddl.ConceptualParticipantPathNode;
import com.epistimis.uddl.uddl.ConceptualQuery;
import com.epistimis.uddl.uddl.ConceptualQueryComposition;
import com.epistimis.uddl.uddl.DataModel;
import com.epistimis.uddl.uddl.Include;
import com.epistimis.uddl.uddl.LogicalAffineConversion;
import com.epistimis.uddl.uddl.LogicalAssociation;
import com.epistimis.uddl.uddl.LogicalBoolean;
import com.epistimis.uddl.uddl.LogicalCharacter;
import com.epistimis.uddl.uddl.LogicalCharacteristicPathNode;
import com.epistimis.uddl.uddl.LogicalCompositeQuery;
import com.epistimis.uddl.uddl.LogicalComposition;
import com.epistimis.uddl.uddl.LogicalConversion;
import com.epistimis.uddl.uddl.LogicalCoordinateSystem;
import com.epistimis.uddl.uddl.LogicalCoordinateSystemAxis;
import com.epistimis.uddl.uddl.LogicalDataModel;
import com.epistimis.uddl.uddl.LogicalEntity;
import com.epistimis.uddl.uddl.LogicalEnumerated;
import com.epistimis.uddl.uddl.LogicalEnumeratedSet;
import com.epistimis.uddl.uddl.LogicalEnumerationConstraint;
import com.epistimis.uddl.uddl.LogicalEnumerationLabel;
import com.epistimis.uddl.uddl.LogicalFixedLengthStringConstraint;
import com.epistimis.uddl.uddl.LogicalInteger;
import com.epistimis.uddl.uddl.LogicalIntegerRangeConstraint;
import com.epistimis.uddl.uddl.LogicalLandmark;
import com.epistimis.uddl.uddl.LogicalMeasurement;
import com.epistimis.uddl.uddl.LogicalMeasurementAttribute;
import com.epistimis.uddl.uddl.LogicalMeasurementAxis;
import com.epistimis.uddl.uddl.LogicalMeasurementConstraint;
import com.epistimis.uddl.uddl.LogicalMeasurementConversion;
import com.epistimis.uddl.uddl.LogicalMeasurementSystem;
import com.epistimis.uddl.uddl.LogicalMeasurementSystemAxis;
import com.epistimis.uddl.uddl.LogicalMeasurementSystemConversion;
import com.epistimis.uddl.uddl.LogicalNatural;
import com.epistimis.uddl.uddl.LogicalNonNegativeReal;
import com.epistimis.uddl.uddl.LogicalParticipant;
import com.epistimis.uddl.uddl.LogicalParticipantPathNode;
import com.epistimis.uddl.uddl.LogicalQuery;
import com.epistimis.uddl.uddl.LogicalQueryComposition;
import com.epistimis.uddl.uddl.LogicalReal;
import com.epistimis.uddl.uddl.LogicalRealRangeConstraint;
import com.epistimis.uddl.uddl.LogicalReferencePoint;
import com.epistimis.uddl.uddl.LogicalReferencePointPart;
import com.epistimis.uddl.uddl.LogicalRegularExpressionConstraint;
import com.epistimis.uddl.uddl.LogicalStandardMeasurementSystem;
import com.epistimis.uddl.uddl.LogicalString;
import com.epistimis.uddl.uddl.LogicalUnit;
import com.epistimis.uddl.uddl.LogicalValueTypeUnit;
import com.epistimis.uddl.uddl.PlatformArray;
import com.epistimis.uddl.uddl.PlatformAssociation;
import com.epistimis.uddl.uddl.PlatformBoolean;
import com.epistimis.uddl.uddl.PlatformBoundedString;
import com.epistimis.uddl.uddl.PlatformChar;
import com.epistimis.uddl.uddl.PlatformCharArray;
import com.epistimis.uddl.uddl.PlatformCharacteristicPathNode;
import com.epistimis.uddl.uddl.PlatformCompositeQuery;
import com.epistimis.uddl.uddl.PlatformComposition;
import com.epistimis.uddl.uddl.PlatformDataModel;
import com.epistimis.uddl.uddl.PlatformDouble;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.epistimis.uddl.uddl.PlatformEnumeration;
import com.epistimis.uddl.uddl.PlatformFixed;
import com.epistimis.uddl.uddl.PlatformFloat;
import com.epistimis.uddl.uddl.PlatformLong;
import com.epistimis.uddl.uddl.PlatformLongDouble;
import com.epistimis.uddl.uddl.PlatformLongLong;
import com.epistimis.uddl.uddl.PlatformOctet;
import com.epistimis.uddl.uddl.PlatformParticipant;
import com.epistimis.uddl.uddl.PlatformParticipantPathNode;
import com.epistimis.uddl.uddl.PlatformQuery;
import com.epistimis.uddl.uddl.PlatformQueryComposition;
import com.epistimis.uddl.uddl.PlatformSequence;
import com.epistimis.uddl.uddl.PlatformShort;
import com.epistimis.uddl.uddl.PlatformString;
import com.epistimis.uddl.uddl.PlatformStruct;
import com.epistimis.uddl.uddl.PlatformStructMember;
import com.epistimis.uddl.uddl.PlatformULong;
import com.epistimis.uddl.uddl.PlatformULongLong;
import com.epistimis.uddl.uddl.PlatformUShort;
import com.epistimis.uddl.uddl.UddlPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class UddlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UddlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UddlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UddlPackage.CONCEPTUAL_ASSOCIATION:
				sequence_ConceptualAssociation(context, (ConceptualAssociation) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_BASIS_ENTITY:
				sequence_ConceptualBasisEntity(context, (ConceptualBasisEntity) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_CHARACTERISTIC_PATH_NODE:
				sequence_ConceptualCharacteristicPathNode(context, (ConceptualCharacteristicPathNode) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_COMPOSITE_QUERY:
				sequence_ConceptualCompositeQuery(context, (ConceptualCompositeQuery) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_COMPOSITION:
				sequence_ConceptualComposition(context, (ConceptualComposition) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_DATA_MODEL:
				sequence_ConceptualDataModel(context, (ConceptualDataModel) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_DOMAIN:
				sequence_ConceptualDomain(context, (ConceptualDomain) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_ENTITY:
				sequence_ConceptualEntity(context, (ConceptualEntity) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_OBSERVABLE:
				sequence_ConceptualObservable(context, (ConceptualObservable) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_PARTICIPANT:
				sequence_ConceptualParticipant(context, (ConceptualParticipant) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_PARTICIPANT_PATH_NODE:
				sequence_ConceptualParticipantPathNode(context, (ConceptualParticipantPathNode) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_QUERY:
				sequence_ConceptualQuery(context, (ConceptualQuery) semanticObject); 
				return; 
			case UddlPackage.CONCEPTUAL_QUERY_COMPOSITION:
				sequence_ConceptualQueryComposition(context, (ConceptualQueryComposition) semanticObject); 
				return; 
			case UddlPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case UddlPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_AFFINE_CONVERSION:
				sequence_LogicalAffineConversion(context, (LogicalAffineConversion) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_ASSOCIATION:
				sequence_LogicalAssociation(context, (LogicalAssociation) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_BOOLEAN:
				sequence_LogicalBoolean(context, (LogicalBoolean) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_CHARACTER:
				sequence_LogicalCharacter(context, (LogicalCharacter) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_CHARACTERISTIC_PATH_NODE:
				sequence_LogicalCharacteristicPathNode(context, (LogicalCharacteristicPathNode) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_COMPOSITE_QUERY:
				sequence_LogicalCompositeQuery(context, (LogicalCompositeQuery) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_COMPOSITION:
				sequence_LogicalComposition(context, (LogicalComposition) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_CONVERSION:
				sequence_LogicalConversion(context, (LogicalConversion) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_COORDINATE_SYSTEM:
				sequence_LogicalCoordinateSystem(context, (LogicalCoordinateSystem) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_COORDINATE_SYSTEM_AXIS:
				sequence_LogicalCoordinateSystemAxis(context, (LogicalCoordinateSystemAxis) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_DATA_MODEL:
				sequence_LogicalDataModel(context, (LogicalDataModel) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_ENTITY:
				sequence_LogicalEntity(context, (LogicalEntity) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_ENUMERATED:
				sequence_LogicalEnumerated(context, (LogicalEnumerated) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_ENUMERATED_SET:
				sequence_LogicalEnumeratedSet(context, (LogicalEnumeratedSet) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_ENUMERATION_CONSTRAINT:
				sequence_LogicalEnumerationConstraint(context, (LogicalEnumerationConstraint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_ENUMERATION_LABEL:
				sequence_LogicalEnumerationLabel(context, (LogicalEnumerationLabel) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_FIXED_LENGTH_STRING_CONSTRAINT:
				sequence_LogicalFixedLengthStringConstraint(context, (LogicalFixedLengthStringConstraint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_INTEGER:
				sequence_LogicalInteger(context, (LogicalInteger) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_INTEGER_RANGE_CONSTRAINT:
				sequence_LogicalIntegerRangeConstraint(context, (LogicalIntegerRangeConstraint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_LANDMARK:
				sequence_LogicalLandmark(context, (LogicalLandmark) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT:
				sequence_LogicalMeasurement(context, (LogicalMeasurement) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_ATTRIBUTE:
				sequence_LogicalMeasurementAttribute(context, (LogicalMeasurementAttribute) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_AXIS:
				sequence_LogicalMeasurementAxis(context, (LogicalMeasurementAxis) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_CONSTRAINT:
				sequence_LogicalMeasurementConstraint(context, (LogicalMeasurementConstraint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_CONVERSION:
				sequence_LogicalMeasurementConversion(context, (LogicalMeasurementConversion) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM:
				sequence_LogicalMeasurementSystem(context, (LogicalMeasurementSystem) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM_AXIS:
				sequence_LogicalMeasurementSystemAxis(context, (LogicalMeasurementSystemAxis) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_MEASUREMENT_SYSTEM_CONVERSION:
				sequence_LogicalMeasurementSystemConversion(context, (LogicalMeasurementSystemConversion) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_NATURAL:
				sequence_LogicalNatural(context, (LogicalNatural) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_NON_NEGATIVE_REAL:
				sequence_LogicalNonNegativeReal(context, (LogicalNonNegativeReal) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_PARTICIPANT:
				sequence_LogicalParticipant(context, (LogicalParticipant) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_PARTICIPANT_PATH_NODE:
				sequence_LogicalParticipantPathNode(context, (LogicalParticipantPathNode) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_QUERY:
				sequence_LogicalQuery(context, (LogicalQuery) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_QUERY_COMPOSITION:
				sequence_LogicalQueryComposition(context, (LogicalQueryComposition) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_REAL:
				sequence_LogicalReal(context, (LogicalReal) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_REAL_RANGE_CONSTRAINT:
				sequence_LogicalRealRangeConstraint(context, (LogicalRealRangeConstraint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_REFERENCE_POINT:
				sequence_LogicalReferencePoint(context, (LogicalReferencePoint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_REFERENCE_POINT_PART:
				sequence_LogicalReferencePointPart(context, (LogicalReferencePointPart) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_REGULAR_EXPRESSION_CONSTRAINT:
				sequence_LogicalRegularExpressionConstraint(context, (LogicalRegularExpressionConstraint) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_STANDARD_MEASUREMENT_SYSTEM:
				sequence_LogicalStandardMeasurementSystem(context, (LogicalStandardMeasurementSystem) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_STRING:
				sequence_LogicalString(context, (LogicalString) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_UNIT:
				sequence_LogicalUnit(context, (LogicalUnit) semanticObject); 
				return; 
			case UddlPackage.LOGICAL_VALUE_TYPE_UNIT:
				sequence_LogicalValueTypeUnit(context, (LogicalValueTypeUnit) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_ARRAY:
				sequence_PlatformArray(context, (PlatformArray) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_ASSOCIATION:
				sequence_PlatformAssociation(context, (PlatformAssociation) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_BOOLEAN:
				sequence_PlatformBoolean(context, (PlatformBoolean) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_BOUNDED_STRING:
				sequence_PlatformBoundedString(context, (PlatformBoundedString) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_CHAR:
				sequence_PlatformChar(context, (PlatformChar) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_CHAR_ARRAY:
				sequence_PlatformCharArray(context, (PlatformCharArray) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_CHARACTERISTIC_PATH_NODE:
				sequence_PlatformCharacteristicPathNode(context, (PlatformCharacteristicPathNode) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_COMPOSITE_QUERY:
				sequence_PlatformCompositeQuery(context, (PlatformCompositeQuery) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_COMPOSITION:
				sequence_PlatformComposition(context, (PlatformComposition) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_DATA_MODEL:
				sequence_PlatformDataModel(context, (PlatformDataModel) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_DOUBLE:
				sequence_PlatformDouble(context, (PlatformDouble) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_ENTITY:
				sequence_PlatformEntity(context, (PlatformEntity) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_ENUMERATION:
				sequence_PlatformEnumeration(context, (PlatformEnumeration) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_FIXED:
				sequence_PlatformFixed(context, (PlatformFixed) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_FLOAT:
				sequence_PlatformFloat(context, (PlatformFloat) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_LONG:
				sequence_PlatformLong(context, (PlatformLong) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_LONG_DOUBLE:
				sequence_PlatformLongDouble(context, (PlatformLongDouble) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_LONG_LONG:
				sequence_PlatformLongLong(context, (PlatformLongLong) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_OCTET:
				sequence_PlatformOctet(context, (PlatformOctet) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_PARTICIPANT:
				sequence_PlatformParticipant(context, (PlatformParticipant) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_PARTICIPANT_PATH_NODE:
				sequence_PlatformParticipantPathNode(context, (PlatformParticipantPathNode) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_QUERY:
				sequence_PlatformQuery(context, (PlatformQuery) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_QUERY_COMPOSITION:
				sequence_PlatformQueryComposition(context, (PlatformQueryComposition) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_SEQUENCE:
				sequence_PlatformSequence(context, (PlatformSequence) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_SHORT:
				sequence_PlatformShort(context, (PlatformShort) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_STRING:
				sequence_PlatformString(context, (PlatformString) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_STRUCT:
				sequence_PlatformStruct(context, (PlatformStruct) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_STRUCT_MEMBER:
				sequence_PlatformStructMember(context, (PlatformStructMember) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_ULONG:
				sequence_PlatformULong(context, (PlatformULong) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_ULONG_LONG:
				sequence_PlatformULongLong(context, (PlatformULongLong) semanticObject); 
				return; 
			case UddlPackage.PLATFORM_USHORT:
				sequence_PlatformUShort(context, (PlatformUShort) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualAssociation
	 *     ConceptualElement returns ConceptualAssociation
	 *     ConceptualComposableElement returns ConceptualAssociation
	 *     ConceptualEntity returns ConceptualAssociation
	 *     ConceptualAssociation returns ConceptualAssociation
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         specializes=[ConceptualEntity|QN]? 
	 *         composition+=ConceptualComposition* 
	 *         ConceptualBasisEntity+=[ConceptualBasisEntity|QN]* 
	 *         participant+=ConceptualParticipant*
	 *     )
	 * </pre>
	 */
	protected void sequence_ConceptualAssociation(ISerializationContext context, ConceptualAssociation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualBasisEntity
	 *     ConceptualElement returns ConceptualBasisEntity
	 *     ConceptualBasisEntity returns ConceptualBasisEntity
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_ConceptualBasisEntity(ISerializationContext context, ConceptualBasisEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConceptualPathNode returns ConceptualCharacteristicPathNode
	 *     ConceptualCharacteristicPathNode returns ConceptualCharacteristicPathNode
	 *
	 * Constraint:
	 *     (projectedCharacteristic=[ConceptualCharacteristic|QN] node=ConceptualPathNode?)
	 * </pre>
	 */
	protected void sequence_ConceptualCharacteristicPathNode(ISerializationContext context, ConceptualCharacteristicPathNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualCompositeQuery
	 *     ConceptualElement returns ConceptualCompositeQuery
	 *     ConceptualView returns ConceptualCompositeQuery
	 *     ConceptualCompositeQuery returns ConceptualCompositeQuery
	 *
	 * Constraint:
	 *     (name=ID description=STRING? isUnion?='isUnion' composition+=ConceptualQueryComposition composition+=ConceptualQueryComposition+)
	 * </pre>
	 */
	protected void sequence_ConceptualCompositeQuery(ISerializationContext context, ConceptualCompositeQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConceptualCharacteristic returns ConceptualComposition
	 *     ConceptualComposition returns ConceptualComposition
	 *
	 * Constraint:
	 *     (
	 *         type=[ConceptualComposableElement|QN] 
	 *         rolename=ID 
	 *         lowerBound=INT? 
	 *         upperBound=INT? 
	 *         description=STRING? 
	 *         specializes=[ConceptualCharacteristic|QN]?
	 *     )
	 * </pre>
	 */
	protected void sequence_ConceptualComposition(ISerializationContext context, ConceptualComposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualDataModel
	 *     ConceptualDataModel returns ConceptualDataModel
	 *
	 * Constraint:
	 *     (name=ID description=STRING? (element+=ConceptualElement | cdm+=ConceptualDataModel)*)
	 * </pre>
	 */
	protected void sequence_ConceptualDataModel(ISerializationContext context, ConceptualDataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualDomain
	 *     ConceptualElement returns ConceptualDomain
	 *     ConceptualDomain returns ConceptualDomain
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_ConceptualDomain(ISerializationContext context, ConceptualDomain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualEntity
	 *     ConceptualElement returns ConceptualEntity
	 *     ConceptualComposableElement returns ConceptualEntity
	 *     ConceptualEntity returns ConceptualEntity
	 *
	 * Constraint:
	 *     (name=ID description=STRING? specializes=[ConceptualEntity|QN]? composition+=ConceptualComposition* basisEntity+=[ConceptualBasisEntity|QN]*)
	 * </pre>
	 */
	protected void sequence_ConceptualEntity(ISerializationContext context, ConceptualEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualObservable
	 *     ConceptualElement returns ConceptualObservable
	 *     ConceptualComposableElement returns ConceptualObservable
	 *     ConceptualObservable returns ConceptualObservable
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_ConceptualObservable(ISerializationContext context, ConceptualObservable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConceptualPathNode returns ConceptualParticipantPathNode
	 *     ConceptualParticipantPathNode returns ConceptualParticipantPathNode
	 *
	 * Constraint:
	 *     (projectedParticipant=[ConceptualParticipant|QN] node=ConceptualPathNode?)
	 * </pre>
	 */
	protected void sequence_ConceptualParticipantPathNode(ISerializationContext context, ConceptualParticipantPathNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConceptualCharacteristic returns ConceptualParticipant
	 *     ConceptualParticipant returns ConceptualParticipant
	 *
	 * Constraint:
	 *     (
	 *         type=[ConceptualEntity|QN] 
	 *         rolename=ID 
	 *         lowerBound=INT? 
	 *         upperBound=INT? 
	 *         description=STRING? 
	 *         specializes=[ConceptualCharacteristic|QN]? 
	 *         sourceLowerBound=INT 
	 *         sourceUpperBound=INT 
	 *         path=ConceptualPathNode?
	 *     )
	 * </pre>
	 */
	protected void sequence_ConceptualParticipant(ISerializationContext context, ConceptualParticipant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConceptualQueryComposition returns ConceptualQueryComposition
	 *
	 * Constraint:
	 *     (type=[ConceptualView|QN] rolename=ID)
	 * </pre>
	 */
	protected void sequence_ConceptualQueryComposition(ISerializationContext context, ConceptualQueryComposition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.CONCEPTUAL_QUERY_COMPOSITION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.CONCEPTUAL_QUERY_COMPOSITION__TYPE));
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.CONCEPTUAL_QUERY_COMPOSITION__ROLENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.CONCEPTUAL_QUERY_COMPOSITION__ROLENAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConceptualQueryCompositionAccess().getTypeConceptualViewQNParserRuleCall_0_0_1(), semanticObject.eGet(UddlPackage.Literals.CONCEPTUAL_QUERY_COMPOSITION__TYPE, false));
		feeder.accept(grammarAccess.getConceptualQueryCompositionAccess().getRolenameIDTerminalRuleCall_1_0(), semanticObject.getRolename());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns ConceptualQuery
	 *     ConceptualElement returns ConceptualQuery
	 *     ConceptualView returns ConceptualQuery
	 *     ConceptualQuery returns ConceptualQuery
	 *
	 * Constraint:
	 *     (name=ID description=STRING? specification=STRING)
	 * </pre>
	 */
	protected void sequence_ConceptualQuery(ISerializationContext context, ConceptualQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DataModel returns DataModel
	 *     UddlElement returns DataModel
	 *
	 * Constraint:
	 *     (name=ID description=STRING? (cdm+=ConceptualDataModel | ldm+=LogicalDataModel | pdm+=PlatformDataModel)*)
	 * </pre>
	 */
	protected void sequence_DataModel(ISerializationContext context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Include returns Include
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 * </pre>
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.INCLUDE__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.INCLUDE__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncludeAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalAffineConversion
	 *     LogicalElement returns LogicalAffineConversion
	 *     LogicalConversion returns LogicalAffineConversion
	 *     LogicalAffineConversion returns LogicalAffineConversion
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         source=[LogicalAssociation|QN] 
	 *         conversionFactor=FLOAT 
	 *         offset=FLOAT 
	 *         destination=[LogicalAssociation|QN]
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalAffineConversion(ISerializationContext context, LogicalAffineConversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalAssociation
	 *     LogicalElement returns LogicalAssociation
	 *     LogicalComposableElement returns LogicalAssociation
	 *     LogicalEntity returns LogicalAssociation
	 *     LogicalAssociation returns LogicalAssociation
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         specializes=[LogicalEntity|QN]? 
	 *         realizes=[ConceptualEntity|QN] 
	 *         composition+=LogicalComposition* 
	 *         participant+=LogicalParticipant*
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalAssociation(ISerializationContext context, LogicalAssociation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalBoolean
	 *     LogicalElement returns LogicalBoolean
	 *     LogicalValueType returns LogicalBoolean
	 *     LogicalBoolean returns LogicalBoolean
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalBoolean(ISerializationContext context, LogicalBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalCharacter
	 *     LogicalElement returns LogicalCharacter
	 *     LogicalValueType returns LogicalCharacter
	 *     LogicalCharacter returns LogicalCharacter
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalCharacter(ISerializationContext context, LogicalCharacter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalPathNode returns LogicalCharacteristicPathNode
	 *     LogicalCharacteristicPathNode returns LogicalCharacteristicPathNode
	 *
	 * Constraint:
	 *     (projectedCharacteristic=[LogicalCharacteristic|QN] node=LogicalPathNode)
	 * </pre>
	 */
	protected void sequence_LogicalCharacteristicPathNode(ISerializationContext context, LogicalCharacteristicPathNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_CHARACTERISTIC_PATH_NODE__PROJECTED_CHARACTERISTIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_CHARACTERISTIC_PATH_NODE__PROJECTED_CHARACTERISTIC));
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_PATH_NODE__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_PATH_NODE__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalCharacteristicPathNodeAccess().getProjectedCharacteristicLogicalCharacteristicQNParserRuleCall_1_0_1(), semanticObject.eGet(UddlPackage.Literals.LOGICAL_CHARACTERISTIC_PATH_NODE__PROJECTED_CHARACTERISTIC, false));
		feeder.accept(grammarAccess.getLogicalCharacteristicPathNodeAccess().getNodeLogicalPathNodeParserRuleCall_2_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalCompositeQuery
	 *     LogicalElement returns LogicalCompositeQuery
	 *     LogicalView returns LogicalCompositeQuery
	 *     LogicalCompositeQuery returns LogicalCompositeQuery
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[ConceptualCompositeQuery|QN]? isUnion?='isUnion' composition+=LogicalQueryComposition)
	 * </pre>
	 */
	protected void sequence_LogicalCompositeQuery(ISerializationContext context, LogicalCompositeQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalCharacteristic returns LogicalComposition
	 *     LogicalComposition returns LogicalComposition
	 *
	 * Constraint:
	 *     (
	 *         type=[LogicalComposableElement|QN] 
	 *         rolename=ID 
	 *         (lowerBound=INT upperBound=INT)? 
	 *         description=STRING? 
	 *         specializes=[LogicalCharacteristic|QN]? 
	 *         realizes=[ConceptualComposition|QN]
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalComposition(ISerializationContext context, LogicalComposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalConversion
	 *     LogicalElement returns LogicalConversion
	 *     LogicalConversion returns LogicalConversion
	 *
	 * Constraint:
	 *     (name=ID description=STRING? source=[LogicalAssociation|QN] destination=[LogicalAssociation|QN])
	 * </pre>
	 */
	protected void sequence_LogicalConversion(ISerializationContext context, LogicalConversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalCoordinateSystemAxis
	 *     LogicalElement returns LogicalCoordinateSystemAxis
	 *     LogicalCoordinateSystemAxis returns LogicalCoordinateSystemAxis
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalCoordinateSystemAxis(ISerializationContext context, LogicalCoordinateSystemAxis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalCoordinateSystem
	 *     LogicalElement returns LogicalCoordinateSystem
	 *     LogicalCoordinateSystem returns LogicalCoordinateSystem
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         axisRelationshipDescription=STRING? 
	 *         angleEquation=STRING? 
	 *         distanceEquation=STRING? 
	 *         axis+=[LogicalCoordinateSystemAxis|QN]+
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalCoordinateSystem(ISerializationContext context, LogicalCoordinateSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalDataModel
	 *     LogicalDataModel returns LogicalDataModel
	 *
	 * Constraint:
	 *     (name=ID description=STRING? (element+=LogicalElement | ldm+=LogicalDataModel)*)
	 * </pre>
	 */
	protected void sequence_LogicalDataModel(ISerializationContext context, LogicalDataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalEntity
	 *     LogicalElement returns LogicalEntity
	 *     LogicalComposableElement returns LogicalEntity
	 *     LogicalEntity returns LogicalEntity
	 *
	 * Constraint:
	 *     (name=ID description=STRING? specializes=[LogicalEntity|QN]? realizes=[ConceptualEntity|QN] composition+=LogicalComposition*)
	 * </pre>
	 */
	protected void sequence_LogicalEntity(ISerializationContext context, LogicalEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalEnumeratedSet
	 *     LogicalElement returns LogicalEnumeratedSet
	 *     LogicalValueType returns LogicalEnumeratedSet
	 *     Taxonomy returns LogicalEnumeratedSet
	 *     LogicalEnumeratedBase returns LogicalEnumeratedSet
	 *     LogicalEnumeratedSet returns LogicalEnumeratedSet
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         (label+=LogicalEnumerationLabel | label+=LogicalEnumeratedSet) 
	 *         label+=LogicalEnumerationLabel? 
	 *         (label+=LogicalEnumeratedSet? label+=LogicalEnumerationLabel?)*
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalEnumeratedSet(ISerializationContext context, LogicalEnumeratedSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalEnumerated
	 *     LogicalElement returns LogicalEnumerated
	 *     LogicalValueType returns LogicalEnumerated
	 *     LogicalEnumerated returns LogicalEnumerated
	 *     Taxonomy returns LogicalEnumerated
	 *     LogicalEnumeratedBase returns LogicalEnumerated
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         standardReference=STRING? 
	 *         (label+=LogicalEnumerationLabel | label+=LogicalEnumeratedSet) 
	 *         label+=LogicalEnumerationLabel? 
	 *         (label+=LogicalEnumeratedSet? label+=LogicalEnumerationLabel?)*
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalEnumerated(ISerializationContext context, LogicalEnumerated semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalEnumerationConstraint
	 *     LogicalConstraint returns LogicalEnumerationConstraint
	 *     LogicalEnumerationConstraint returns LogicalEnumerationConstraint
	 *
	 * Constraint:
	 *     (name=ID description=STRING? allowedValue+=[LogicalEnumerationLabel|QN]*)
	 * </pre>
	 */
	protected void sequence_LogicalEnumerationConstraint(ISerializationContext context, LogicalEnumerationConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalEnumerationLabel
	 *     LogicalElement returns LogicalEnumerationLabel
	 *     LogicalValueType returns LogicalEnumerationLabel
	 *     Taxonomy returns LogicalEnumerationLabel
	 *     LogicalEnumeratedBase returns LogicalEnumerationLabel
	 *     LogicalEnumerationLabel returns LogicalEnumerationLabel
	 *
	 * Constraint:
	 *     (name=ID | (name=ID description=STRING))
	 * </pre>
	 */
	protected void sequence_LogicalEnumerationLabel(ISerializationContext context, LogicalEnumerationLabel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalFixedLengthStringConstraint
	 *     LogicalConstraint returns LogicalFixedLengthStringConstraint
	 *     LogicalStringConstraint returns LogicalFixedLengthStringConstraint
	 *     LogicalFixedLengthStringConstraint returns LogicalFixedLengthStringConstraint
	 *
	 * Constraint:
	 *     (name=ID length=INT description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalFixedLengthStringConstraint(ISerializationContext context, LogicalFixedLengthStringConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalIntegerRangeConstraint
	 *     LogicalConstraint returns LogicalIntegerRangeConstraint
	 *     LogicalIntegerRangeConstraint returns LogicalIntegerRangeConstraint
	 *
	 * Constraint:
	 *     (name=ID lowerBound=INT upperBound=INT description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalIntegerRangeConstraint(ISerializationContext context, LogicalIntegerRangeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalInteger
	 *     LogicalElement returns LogicalInteger
	 *     LogicalValueType returns LogicalInteger
	 *     LogicalNumeric returns LogicalInteger
	 *     LogicalInteger returns LogicalInteger
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalInteger(ISerializationContext context, LogicalInteger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalLandmark
	 *     LogicalElement returns LogicalLandmark
	 *     LogicalLandmark returns LogicalLandmark
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalLandmark(ISerializationContext context, LogicalLandmark semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalMeasurementAttribute returns LogicalMeasurementAttribute
	 *
	 * Constraint:
	 *     (type=[LogicalMeasurement|QN] rolename=ID)
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementAttribute(ISerializationContext context, LogicalMeasurementAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_MEASUREMENT_ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_MEASUREMENT_ATTRIBUTE__TYPE));
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_MEASUREMENT_ATTRIBUTE__ROLENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_MEASUREMENT_ATTRIBUTE__ROLENAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalMeasurementAttributeAccess().getTypeLogicalMeasurementQNParserRuleCall_0_0_1(), semanticObject.eGet(UddlPackage.Literals.LOGICAL_MEASUREMENT_ATTRIBUTE__TYPE, false));
		feeder.accept(grammarAccess.getLogicalMeasurementAttributeAccess().getRolenameIDTerminalRuleCall_1_0(), semanticObject.getRolename());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalMeasurementAxis
	 *     LogicalElement returns LogicalMeasurementAxis
	 *     LogicalMeasurementAxis returns LogicalMeasurementAxis
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         realizes=[ConceptualObservable|QN]? 
	 *         valueTypeUnit+=[LogicalValueTypeUnit|QN]* 
	 *         measurementSystemAxis=[LogicalMeasurementSystemAxis|QN] 
	 *         constraint+=LogicalMeasurementConstraint*
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementAxis(ISerializationContext context, LogicalMeasurementAxis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalMeasurementConstraint returns LogicalMeasurementConstraint
	 *
	 * Constraint:
	 *     constraintText=STRING
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementConstraint(ISerializationContext context, LogicalMeasurementConstraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_MEASUREMENT_CONSTRAINT__CONSTRAINT_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_MEASUREMENT_CONSTRAINT__CONSTRAINT_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalMeasurementConstraintAccess().getConstraintTextSTRINGTerminalRuleCall_0(), semanticObject.getConstraintText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalMeasurementConversion
	 *     LogicalElement returns LogicalMeasurementConversion
	 *     LogicalMeasurementConversion returns LogicalMeasurementConversion
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         source=[LogicalMeasurementSystem|QN] 
	 *         equation+=STRING 
	 *         equation+=STRING? 
	 *         destination=[LogicalMeasurementSystem|QN] 
	 *         conversionLossDescription=STRING
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementConversion(ISerializationContext context, LogicalMeasurementConversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalMeasurementSystemAxis
	 *     LogicalElement returns LogicalMeasurementSystemAxis
	 *     LogicalMeasurementSystemAxis returns LogicalMeasurementSystemAxis
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         axis=[LogicalCoordinateSystemAxis|QN] 
	 *         defaultValueTypeUnit+=[LogicalValueTypeUnit|QN]+ 
	 *         constraint+=LogicalMeasurementConstraint*
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementSystemAxis(ISerializationContext context, LogicalMeasurementSystemAxis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalMeasurementSystemConversion
	 *     LogicalElement returns LogicalMeasurementSystemConversion
	 *     LogicalMeasurementSystemConversion returns LogicalMeasurementSystemConversion
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         source=[LogicalMeasurementSystem|QN] 
	 *         equation+=STRING 
	 *         equation+=STRING? 
	 *         destination=[LogicalMeasurementSystem|QN] 
	 *         conversionLossDescription=STRING
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementSystemConversion(ISerializationContext context, LogicalMeasurementSystemConversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalMeasurementSystem
	 *     LogicalElement returns LogicalMeasurementSystem
	 *     LogicalAbstractMeasurementSystem returns LogicalMeasurementSystem
	 *     LogicalMeasurementSystem returns LogicalMeasurementSystem
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         measurementSystemAxis+=[LogicalMeasurementSystemAxis|QN]+ 
	 *         coordinateSystem=[LogicalCoordinateSystem|QN] 
	 *         externalStandardReference=STRING? 
	 *         orientation=STRING? 
	 *         referencePoint+=LogicalReferencePoint* 
	 *         constraint+=LogicalMeasurementConstraint*
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalMeasurementSystem(ISerializationContext context, LogicalMeasurementSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalMeasurement
	 *     LogicalElement returns LogicalMeasurement
	 *     LogicalMeasurement returns LogicalMeasurement
	 *     LogicalComposableElement returns LogicalMeasurement
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         realizes=[ConceptualObservable|QN] 
	 *         attribute+=LogicalMeasurementAttribute* 
	 *         measurementAxis+=[LogicalMeasurementAxis|QN]* 
	 *         measurementSystem=[LogicalAbstractMeasurementSystem|QN] 
	 *         constraint+=LogicalMeasurementConstraint?
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalMeasurement(ISerializationContext context, LogicalMeasurement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalNatural
	 *     LogicalElement returns LogicalNatural
	 *     LogicalValueType returns LogicalNatural
	 *     LogicalNumeric returns LogicalNatural
	 *     LogicalNatural returns LogicalNatural
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalNatural(ISerializationContext context, LogicalNatural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalNonNegativeReal
	 *     LogicalElement returns LogicalNonNegativeReal
	 *     LogicalValueType returns LogicalNonNegativeReal
	 *     LogicalNumeric returns LogicalNonNegativeReal
	 *     LogicalNonNegativeReal returns LogicalNonNegativeReal
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalNonNegativeReal(ISerializationContext context, LogicalNonNegativeReal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalPathNode returns LogicalParticipantPathNode
	 *     LogicalParticipantPathNode returns LogicalParticipantPathNode
	 *
	 * Constraint:
	 *     (projectedParticipant=[LogicalParticipant|QN] node=LogicalPathNode)
	 * </pre>
	 */
	protected void sequence_LogicalParticipantPathNode(ISerializationContext context, LogicalParticipantPathNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_PARTICIPANT_PATH_NODE__PROJECTED_PARTICIPANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_PARTICIPANT_PATH_NODE__PROJECTED_PARTICIPANT));
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.LOGICAL_PATH_NODE__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.LOGICAL_PATH_NODE__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalParticipantPathNodeAccess().getProjectedParticipantLogicalParticipantQNParserRuleCall_1_0_1(), semanticObject.eGet(UddlPackage.Literals.LOGICAL_PARTICIPANT_PATH_NODE__PROJECTED_PARTICIPANT, false));
		feeder.accept(grammarAccess.getLogicalParticipantPathNodeAccess().getNodeLogicalPathNodeParserRuleCall_2_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalCharacteristic returns LogicalParticipant
	 *     LogicalParticipant returns LogicalParticipant
	 *
	 * Constraint:
	 *     (
	 *         type=[LogicalEntity|QN] 
	 *         rolename=ID 
	 *         (lowerBound=INT upperBound=INT)? 
	 *         description=STRING? 
	 *         specializes=[LogicalCharacteristic|QN]? 
	 *         realizes=[ConceptualParticipant|QN] 
	 *         sourceLowerBound=INT 
	 *         sourceUpperBound=INT 
	 *         path=LogicalPathNode?
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalParticipant(ISerializationContext context, LogicalParticipant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalQueryComposition returns LogicalQueryComposition
	 *
	 * Constraint:
	 *     (type=[LogicalView|QN] rolename=ID realizes=[ConceptualQueryComposition|QN]?)
	 * </pre>
	 */
	protected void sequence_LogicalQueryComposition(ISerializationContext context, LogicalQueryComposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalQuery
	 *     LogicalElement returns LogicalQuery
	 *     LogicalView returns LogicalQuery
	 *     LogicalQuery returns LogicalQuery
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[ConceptualQuery|QN]? specification=STRING)
	 * </pre>
	 */
	protected void sequence_LogicalQuery(ISerializationContext context, LogicalQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalRealRangeConstraint
	 *     LogicalConstraint returns LogicalRealRangeConstraint
	 *     LogicalRealRangeConstraint returns LogicalRealRangeConstraint
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         lowerBoundInclusive?='['? 
	 *         lowerBound=FLOAT 
	 *         upperBound=FLOAT 
	 *         upperBoundInclusive?=']'? 
	 *         description=STRING?
	 *     )
	 * </pre>
	 */
	protected void sequence_LogicalRealRangeConstraint(ISerializationContext context, LogicalRealRangeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalReal
	 *     LogicalElement returns LogicalReal
	 *     LogicalValueType returns LogicalReal
	 *     LogicalNumeric returns LogicalReal
	 *     LogicalReal returns LogicalReal
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalReal(ISerializationContext context, LogicalReal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalReferencePointPart returns LogicalReferencePointPart
	 *
	 * Constraint:
	 *     (axis=[LogicalMeasurementSystemAxis|QN]? value=STRING valueTypeUnit=[LogicalValueTypeUnit|QN]?)
	 * </pre>
	 */
	protected void sequence_LogicalReferencePointPart(ISerializationContext context, LogicalReferencePointPart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalReferencePoint
	 *     LogicalReferencePoint returns LogicalReferencePoint
	 *
	 * Constraint:
	 *     (name=ID description=STRING? landmark=[LogicalLandmark|QN] referencePointPart+=LogicalReferencePointPart+)
	 * </pre>
	 */
	protected void sequence_LogicalReferencePoint(ISerializationContext context, LogicalReferencePoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalRegularExpressionConstraint
	 *     LogicalConstraint returns LogicalRegularExpressionConstraint
	 *     LogicalStringConstraint returns LogicalRegularExpressionConstraint
	 *     LogicalRegularExpressionConstraint returns LogicalRegularExpressionConstraint
	 *
	 * Constraint:
	 *     (name=ID expression=STRING description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalRegularExpressionConstraint(ISerializationContext context, LogicalRegularExpressionConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalStandardMeasurementSystem
	 *     LogicalElement returns LogicalStandardMeasurementSystem
	 *     LogicalAbstractMeasurementSystem returns LogicalStandardMeasurementSystem
	 *     LogicalStandardMeasurementSystem returns LogicalStandardMeasurementSystem
	 *
	 * Constraint:
	 *     (name=ID description=STRING? referenceStandard=STRING)
	 * </pre>
	 */
	protected void sequence_LogicalStandardMeasurementSystem(ISerializationContext context, LogicalStandardMeasurementSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalString
	 *     LogicalElement returns LogicalString
	 *     LogicalValueType returns LogicalString
	 *     LogicalString returns LogicalString
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalString(ISerializationContext context, LogicalString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalUnit
	 *     LogicalElement returns LogicalUnit
	 *     LogicalUnit returns LogicalUnit
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 * </pre>
	 */
	protected void sequence_LogicalUnit(ISerializationContext context, LogicalUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns LogicalValueTypeUnit
	 *     LogicalElement returns LogicalValueTypeUnit
	 *     LogicalValueTypeUnit returns LogicalValueTypeUnit
	 *
	 * Constraint:
	 *     (valueType=[LogicalValueType|QN] unit=[LogicalUnit|QN] name=ID description=STRING? constraint=LogicalConstraint?)
	 * </pre>
	 */
	protected void sequence_LogicalValueTypeUnit(ISerializationContext context, LogicalValueTypeUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformArray
	 *     PlatformElement returns PlatformArray
	 *     PlatformComposableElement returns PlatformArray
	 *     PlatformDataType returns PlatformArray
	 *     PlatformPrimitive returns PlatformArray
	 *     PlatformArray returns PlatformArray
	 *
	 * Constraint:
	 *     (size=INT? name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformArray(ISerializationContext context, PlatformArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformAssociation
	 *     PlatformElement returns PlatformAssociation
	 *     PlatformComposableElement returns PlatformAssociation
	 *     PlatformEntity returns PlatformAssociation
	 *     PlatformAssociation returns PlatformAssociation
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         specializes=[PlatformEntity|QN]? 
	 *         realizes=[LogicalEntity|QN] 
	 *         composition+=PlatformComposition* 
	 *         participant+=PlatformParticipant*
	 *     )
	 * </pre>
	 */
	protected void sequence_PlatformAssociation(ISerializationContext context, PlatformAssociation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformBoolean
	 *     PlatformElement returns PlatformBoolean
	 *     PlatformComposableElement returns PlatformBoolean
	 *     PlatformDataType returns PlatformBoolean
	 *     PlatformPrimitive returns PlatformBoolean
	 *     PlatformBoolean returns PlatformBoolean
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformBoolean(ISerializationContext context, PlatformBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformBoundedString
	 *     PlatformElement returns PlatformBoundedString
	 *     PlatformComposableElement returns PlatformBoundedString
	 *     PlatformDataType returns PlatformBoundedString
	 *     PlatformPrimitive returns PlatformBoundedString
	 *     PlatformStringType returns PlatformBoundedString
	 *     PlatformBoundedString returns PlatformBoundedString
	 *
	 * Constraint:
	 *     (maxLength=INT name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformBoundedString(ISerializationContext context, PlatformBoundedString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformCharArray
	 *     PlatformElement returns PlatformCharArray
	 *     PlatformComposableElement returns PlatformCharArray
	 *     PlatformDataType returns PlatformCharArray
	 *     PlatformPrimitive returns PlatformCharArray
	 *     PlatformStringType returns PlatformCharArray
	 *     PlatformCharArray returns PlatformCharArray
	 *
	 * Constraint:
	 *     (length=INT name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformCharArray(ISerializationContext context, PlatformCharArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformChar
	 *     PlatformElement returns PlatformChar
	 *     PlatformComposableElement returns PlatformChar
	 *     PlatformDataType returns PlatformChar
	 *     PlatformPrimitive returns PlatformChar
	 *     PlatformChar returns PlatformChar
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformChar(ISerializationContext context, PlatformChar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformPathNode returns PlatformCharacteristicPathNode
	 *     PlatformCharacteristicPathNode returns PlatformCharacteristicPathNode
	 *
	 * Constraint:
	 *     (projectedCharacteristic=[PlatformCharacteristic|QN] node=PlatformPathNode)
	 * </pre>
	 */
	protected void sequence_PlatformCharacteristicPathNode(ISerializationContext context, PlatformCharacteristicPathNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.PLATFORM_CHARACTERISTIC_PATH_NODE__PROJECTED_CHARACTERISTIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.PLATFORM_CHARACTERISTIC_PATH_NODE__PROJECTED_CHARACTERISTIC));
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.PLATFORM_PATH_NODE__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.PLATFORM_PATH_NODE__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlatformCharacteristicPathNodeAccess().getProjectedCharacteristicPlatformCharacteristicQNParserRuleCall_1_0_1(), semanticObject.eGet(UddlPackage.Literals.PLATFORM_CHARACTERISTIC_PATH_NODE__PROJECTED_CHARACTERISTIC, false));
		feeder.accept(grammarAccess.getPlatformCharacteristicPathNodeAccess().getNodePlatformPathNodeParserRuleCall_2_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformCompositeQuery
	 *     PlatformElement returns PlatformCompositeQuery
	 *     PlatformView returns PlatformCompositeQuery
	 *     PlatformCompositeQuery returns PlatformCompositeQuery
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalQuery|QN]? isUnion?='isUnion' composition+=PlatformQueryComposition)
	 * </pre>
	 */
	protected void sequence_PlatformCompositeQuery(ISerializationContext context, PlatformCompositeQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformCharacteristic returns PlatformComposition
	 *     PlatformComposition returns PlatformComposition
	 *
	 * Constraint:
	 *     (
	 *         type=[PlatformComposableElement|QN] 
	 *         rolename=ID 
	 *         (lowerBound=INT upperBound=INT)? 
	 *         description=STRING? 
	 *         specializes=[PlatformCharacteristic|QN]? 
	 *         realizes=[LogicalComposition|QN] 
	 *         precision=FLOAT?
	 *     )
	 * </pre>
	 */
	protected void sequence_PlatformComposition(ISerializationContext context, PlatformComposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformDataModel
	 *     PlatformDataModel returns PlatformDataModel
	 *
	 * Constraint:
	 *     (name=ID description=STRING? (element+=PlatformElement | pdm+=PlatformDataModel)*)
	 * </pre>
	 */
	protected void sequence_PlatformDataModel(ISerializationContext context, PlatformDataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformDouble
	 *     PlatformElement returns PlatformDouble
	 *     PlatformComposableElement returns PlatformDouble
	 *     PlatformDataType returns PlatformDouble
	 *     PlatformPrimitive returns PlatformDouble
	 *     PlatformNumber returns PlatformDouble
	 *     PlatformReal returns PlatformDouble
	 *     PlatformDouble returns PlatformDouble
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformDouble(ISerializationContext context, PlatformDouble semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformEntity
	 *     PlatformElement returns PlatformEntity
	 *     PlatformComposableElement returns PlatformEntity
	 *     PlatformEntity returns PlatformEntity
	 *
	 * Constraint:
	 *     (name=ID description=STRING? specializes=[PlatformEntity|QN]? realizes=[LogicalEntity|QN] composition+=PlatformComposition*)
	 * </pre>
	 */
	protected void sequence_PlatformEntity(ISerializationContext context, PlatformEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformEnumeration
	 *     PlatformElement returns PlatformEnumeration
	 *     PlatformComposableElement returns PlatformEnumeration
	 *     PlatformDataType returns PlatformEnumeration
	 *     PlatformPrimitive returns PlatformEnumeration
	 *     PlatformEnumeration returns PlatformEnumeration
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformEnumeration(ISerializationContext context, PlatformEnumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformFixed
	 *     PlatformElement returns PlatformFixed
	 *     PlatformComposableElement returns PlatformFixed
	 *     PlatformDataType returns PlatformFixed
	 *     PlatformPrimitive returns PlatformFixed
	 *     PlatformNumber returns PlatformFixed
	 *     PlatformReal returns PlatformFixed
	 *     PlatformFixed returns PlatformFixed
	 *
	 * Constraint:
	 *     (digits=INT scale=INT name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformFixed(ISerializationContext context, PlatformFixed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformFloat
	 *     PlatformElement returns PlatformFloat
	 *     PlatformComposableElement returns PlatformFloat
	 *     PlatformDataType returns PlatformFloat
	 *     PlatformPrimitive returns PlatformFloat
	 *     PlatformNumber returns PlatformFloat
	 *     PlatformReal returns PlatformFloat
	 *     PlatformFloat returns PlatformFloat
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformFloat(ISerializationContext context, PlatformFloat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformLongDouble
	 *     PlatformElement returns PlatformLongDouble
	 *     PlatformComposableElement returns PlatformLongDouble
	 *     PlatformDataType returns PlatformLongDouble
	 *     PlatformPrimitive returns PlatformLongDouble
	 *     PlatformNumber returns PlatformLongDouble
	 *     PlatformReal returns PlatformLongDouble
	 *     PlatformLongDouble returns PlatformLongDouble
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformLongDouble(ISerializationContext context, PlatformLongDouble semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformLongLong
	 *     PlatformElement returns PlatformLongLong
	 *     PlatformComposableElement returns PlatformLongLong
	 *     PlatformDataType returns PlatformLongLong
	 *     PlatformPrimitive returns PlatformLongLong
	 *     PlatformNumber returns PlatformLongLong
	 *     PlatformInteger returns PlatformLongLong
	 *     PlatformLongLong returns PlatformLongLong
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformLongLong(ISerializationContext context, PlatformLongLong semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformLong
	 *     PlatformElement returns PlatformLong
	 *     PlatformComposableElement returns PlatformLong
	 *     PlatformDataType returns PlatformLong
	 *     PlatformPrimitive returns PlatformLong
	 *     PlatformNumber returns PlatformLong
	 *     PlatformInteger returns PlatformLong
	 *     PlatformLong returns PlatformLong
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformLong(ISerializationContext context, PlatformLong semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformOctet
	 *     PlatformElement returns PlatformOctet
	 *     PlatformComposableElement returns PlatformOctet
	 *     PlatformDataType returns PlatformOctet
	 *     PlatformPrimitive returns PlatformOctet
	 *     PlatformOctet returns PlatformOctet
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformOctet(ISerializationContext context, PlatformOctet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformPathNode returns PlatformParticipantPathNode
	 *     PlatformParticipantPathNode returns PlatformParticipantPathNode
	 *
	 * Constraint:
	 *     (projectedParticipant=[PlatformParticipant|QN] node=PlatformPathNode)
	 * </pre>
	 */
	protected void sequence_PlatformParticipantPathNode(ISerializationContext context, PlatformParticipantPathNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.PLATFORM_PARTICIPANT_PATH_NODE__PROJECTED_PARTICIPANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.PLATFORM_PARTICIPANT_PATH_NODE__PROJECTED_PARTICIPANT));
			if (transientValues.isValueTransient(semanticObject, UddlPackage.Literals.PLATFORM_PATH_NODE__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UddlPackage.Literals.PLATFORM_PATH_NODE__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlatformParticipantPathNodeAccess().getProjectedParticipantPlatformParticipantQNParserRuleCall_1_0_1(), semanticObject.eGet(UddlPackage.Literals.PLATFORM_PARTICIPANT_PATH_NODE__PROJECTED_PARTICIPANT, false));
		feeder.accept(grammarAccess.getPlatformParticipantPathNodeAccess().getNodePlatformPathNodeParserRuleCall_2_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformCharacteristic returns PlatformParticipant
	 *     PlatformParticipant returns PlatformParticipant
	 *
	 * Constraint:
	 *     (
	 *         type=[PlatformEntity|QN] 
	 *         rolename=ID 
	 *         (lowerBound=INT upperBound=INT)? 
	 *         description=STRING? 
	 *         specializes=[PlatformCharacteristic|QN]? 
	 *         realizes=[LogicalParticipant|QN] 
	 *         sourceLowerBound=INT 
	 *         sourceUpperBound=INT 
	 *         path=PlatformPathNode?
	 *     )
	 * </pre>
	 */
	protected void sequence_PlatformParticipant(ISerializationContext context, PlatformParticipant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformQueryComposition returns PlatformQueryComposition
	 *
	 * Constraint:
	 *     (type=[PlatformView|QN] rolename=ID realizes=[LogicalQueryComposition|QN]?)
	 * </pre>
	 */
	protected void sequence_PlatformQueryComposition(ISerializationContext context, PlatformQueryComposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformQuery
	 *     PlatformElement returns PlatformQuery
	 *     PlatformView returns PlatformQuery
	 *     PlatformQuery returns PlatformQuery
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalQuery|QN]? specification=STRING)
	 * </pre>
	 */
	protected void sequence_PlatformQuery(ISerializationContext context, PlatformQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformSequence
	 *     PlatformElement returns PlatformSequence
	 *     PlatformComposableElement returns PlatformSequence
	 *     PlatformDataType returns PlatformSequence
	 *     PlatformPrimitive returns PlatformSequence
	 *     PlatformSequence returns PlatformSequence
	 *
	 * Constraint:
	 *     (maxSize=INT? name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformSequence(ISerializationContext context, PlatformSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformShort
	 *     PlatformElement returns PlatformShort
	 *     PlatformComposableElement returns PlatformShort
	 *     PlatformDataType returns PlatformShort
	 *     PlatformPrimitive returns PlatformShort
	 *     PlatformNumber returns PlatformShort
	 *     PlatformInteger returns PlatformShort
	 *     PlatformShort returns PlatformShort
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformShort(ISerializationContext context, PlatformShort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformString
	 *     PlatformElement returns PlatformString
	 *     PlatformComposableElement returns PlatformString
	 *     PlatformDataType returns PlatformString
	 *     PlatformPrimitive returns PlatformString
	 *     PlatformStringType returns PlatformString
	 *     PlatformString returns PlatformString
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformString(ISerializationContext context, PlatformString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformStructMember returns PlatformStructMember
	 *
	 * Constraint:
	 *     (type=[PlatformDataType|QN] rolename=ID precision=FLOAT realizes=[LogicalMeasurementAttribute|QN]?)
	 * </pre>
	 */
	protected void sequence_PlatformStructMember(ISerializationContext context, PlatformStructMember semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformStruct
	 *     PlatformElement returns PlatformStruct
	 *     PlatformComposableElement returns PlatformStruct
	 *     PlatformDataType returns PlatformStruct
	 *     PlatformStruct returns PlatformStruct
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         realizes=[LogicalElement|QN] 
	 *         member+=PlatformStructMember 
	 *         member+=PlatformStructMember 
	 *         member+=PlatformStructMember?
	 *     )
	 * </pre>
	 */
	protected void sequence_PlatformStruct(ISerializationContext context, PlatformStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformULongLong
	 *     PlatformElement returns PlatformULongLong
	 *     PlatformComposableElement returns PlatformULongLong
	 *     PlatformDataType returns PlatformULongLong
	 *     PlatformPrimitive returns PlatformULongLong
	 *     PlatformNumber returns PlatformULongLong
	 *     PlatformInteger returns PlatformULongLong
	 *     PlatformUnsignedInteger returns PlatformULongLong
	 *     PlatformULongLong returns PlatformULongLong
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformULongLong(ISerializationContext context, PlatformULongLong semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformULong
	 *     PlatformElement returns PlatformULong
	 *     PlatformComposableElement returns PlatformULong
	 *     PlatformDataType returns PlatformULong
	 *     PlatformPrimitive returns PlatformULong
	 *     PlatformNumber returns PlatformULong
	 *     PlatformInteger returns PlatformULong
	 *     PlatformUnsignedInteger returns PlatformULong
	 *     PlatformULong returns PlatformULong
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformULong(ISerializationContext context, PlatformULong semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UddlElement returns PlatformUShort
	 *     PlatformElement returns PlatformUShort
	 *     PlatformComposableElement returns PlatformUShort
	 *     PlatformDataType returns PlatformUShort
	 *     PlatformPrimitive returns PlatformUShort
	 *     PlatformNumber returns PlatformUShort
	 *     PlatformInteger returns PlatformUShort
	 *     PlatformUnsignedInteger returns PlatformUShort
	 *     PlatformUShort returns PlatformUShort
	 *
	 * Constraint:
	 *     (name=ID description=STRING? realizes=[LogicalElement|QN])
	 * </pre>
	 */
	protected void sequence_PlatformUShort(ISerializationContext context, PlatformUShort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
