/**
 * generated by Xtext 2.32.0
 */
package com.epistimis.uddl.generator;

import com.epistimis.uddl.RealizedAssociation;
import com.epistimis.uddl.RealizedComposableElement;
import com.epistimis.uddl.RealizedDataType;
import com.epistimis.uddl.RealizedEntity;
import com.epistimis.uddl.uddl.PlatformAssociation;
import com.epistimis.uddl.uddl.PlatformComposableElement;
import com.epistimis.uddl.uddl.PlatformDataType;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.google.common.collect.Iterables;
import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class UddlGenerator extends AbstractGenerator {
  private static Logger logger = Logger.getLogger(UddlGenerator.class);

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Iterable<PlatformComposableElement> elements = Iterables.<PlatformComposableElement>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), PlatformComposableElement.class);
    for (final PlatformComposableElement elem : elements) {
      if ((elem instanceof PlatformAssociation)) {
        new RealizedAssociation(((PlatformAssociation)elem));
      } else {
        if ((elem instanceof PlatformDataType)) {
          new RealizedDataType(((PlatformDataType)elem));
        } else {
          if ((elem instanceof PlatformEntity)) {
            new RealizedEntity(((PlatformEntity)elem));
          } else {
            String _string = elem.getClass().toString();
            String _plus = ("No processing available for type " + _string);
            UddlGenerator.logger.warn(_plus);
          }
        }
      }
    }
    RealizedComposableElement.linkTypes();
    try {
      final ProtobufDataStructureGenerator gen2 = new ProtobufDataStructureGenerator(RealizedComposableElement.allComposableElements);
      gen2.doGenerate(resource, fsa, context);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception excp = (Exception)_t;
        String _localizedMessage = excp.getLocalizedMessage();
        String _plus_1 = ("Protobuf exception: " + _localizedMessage);
        UddlGenerator.logger.error(_plus_1, excp);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    try {
      final IDLDataStructureGenerator gen1 = new IDLDataStructureGenerator(RealizedComposableElement.allComposableElements);
      gen1.doGenerate(resource, fsa, context);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception excp = (Exception)_t;
        String _localizedMessage = excp.getLocalizedMessage();
        String _plus_1 = ("IDL exception: " + _localizedMessage);
        UddlGenerator.logger.error(_plus_1, excp);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    try {
      final RDBMSDataStructureGenerator gen3 = new RDBMSDataStructureGenerator(RealizedComposableElement.allComposableElements);
      gen3.doGenerate(resource, fsa, context);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception excp = (Exception)_t;
        String _localizedMessage = excp.getLocalizedMessage();
        String _plus_1 = ("RDBMS exception: " + _localizedMessage);
        UddlGenerator.logger.error(_plus_1, excp);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
