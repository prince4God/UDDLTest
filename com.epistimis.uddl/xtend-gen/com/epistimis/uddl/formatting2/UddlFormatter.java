/**
 * generated by Xtext 2.32.0
 */
package com.epistimis.uddl.formatting2;

import com.epistimis.uddl.uddl.ConceptualAssociation;
import com.epistimis.uddl.uddl.ConceptualCharacteristic;
import com.epistimis.uddl.uddl.ConceptualComposition;
import com.epistimis.uddl.uddl.ConceptualDataModel;
import com.epistimis.uddl.uddl.ConceptualElement;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.ConceptualParticipant;
import com.epistimis.uddl.uddl.DataModel;
import com.epistimis.uddl.uddl.LogicalAssociation;
import com.epistimis.uddl.uddl.LogicalCharacteristic;
import com.epistimis.uddl.uddl.LogicalComposition;
import com.epistimis.uddl.uddl.LogicalCoordinateSystem;
import com.epistimis.uddl.uddl.LogicalCoordinateSystemAxis;
import com.epistimis.uddl.uddl.LogicalDataModel;
import com.epistimis.uddl.uddl.LogicalElement;
import com.epistimis.uddl.uddl.LogicalEntity;
import com.epistimis.uddl.uddl.LogicalEnumerated;
import com.epistimis.uddl.uddl.LogicalEnumeratedBase;
import com.epistimis.uddl.uddl.LogicalMeasurementConstraint;
import com.epistimis.uddl.uddl.LogicalMeasurementSystem;
import com.epistimis.uddl.uddl.LogicalMeasurementSystemAxis;
import com.epistimis.uddl.uddl.LogicalParticipant;
import com.epistimis.uddl.uddl.LogicalReferencePoint;
import com.epistimis.uddl.uddl.LogicalReferencePointPart;
import com.epistimis.uddl.uddl.LogicalValueTypeUnit;
import com.epistimis.uddl.uddl.PlatformAssociation;
import com.epistimis.uddl.uddl.PlatformCharacteristic;
import com.epistimis.uddl.uddl.PlatformComposition;
import com.epistimis.uddl.uddl.PlatformDataModel;
import com.epistimis.uddl.uddl.PlatformDataType;
import com.epistimis.uddl.uddl.PlatformElement;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.epistimis.uddl.uddl.PlatformParticipant;
import com.epistimis.uddl.uddl.UddlElement;
import com.epistimis.uddl.uddl.UddlPackage;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class UddlFormatter extends AbstractFormatter2 {
  /**
   * General functions
   */
  public void objOpen(final EObject obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(obj).keyword("{"), _function);
  }

  public void objClose(final EObject obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(document.surround(this.textRegionExtensions.regionFor(obj).keyword("};"), _function), _function_1);
  }

  public void formatContainerContents(final EList<EObject> objs, @Extension final IFormattableDocument document) {
    for (final EObject obj : objs) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.setNewLines(1, 1, 2);
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(1, 1, 2);
      };
      document.<EObject>append(document.<EObject>prepend(obj, _function), _function_1);
    }
  }

  public void formatContainer(final EObject obj, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(obj).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(obj).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(open, _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(document.prepend(close, _function_2), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
  }

  public void formatObj(final EObject obj, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(obj).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(obj).keyword("};");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(open, _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(document.prepend(close, _function_2), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
  }

  public void formatSubobj(final EObject obj, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(obj).keyword("(");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(obj).keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
  }

  public void formatListContainer(final EObject obj, final EList<EObject> contents, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).keyword("]"), _function_1);
    this.formatList(contents, document);
  }

  public void formatList(final EList<EObject> objs, @Extension final IFormattableDocument document) {
    for (final EObject obj : objs) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.<EObject>surround(obj, _function);
    }
  }

  public void formatAttribute(final ISemanticRegion attrStart, final ISemanticRegion attrEnd, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(attrStart, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(attrEnd, _function_1);
  }

  public void formatAttributeElement(final ISemanticRegion elem, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(elem, _function);
  }

  public void formatAttributeElement(final EObject obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.<EObject>surround(obj, _function);
  }

  /**
   * Model specific functions
   */
  protected void _format(final DataModel dataModel, @Extension final IFormattableDocument document) {
    this.formatContainer(dataModel, document);
    EList<ConceptualDataModel> _cdm = dataModel.getCdm();
    for (final ConceptualDataModel conceptualDataModel : _cdm) {
      document.<ConceptualDataModel>format(conceptualDataModel);
    }
    EList<LogicalDataModel> _ldm = dataModel.getLdm();
    for (final LogicalDataModel logicalDataModel : _ldm) {
      document.<LogicalDataModel>format(logicalDataModel);
    }
    EList<PlatformDataModel> _pdm = dataModel.getPdm();
    for (final PlatformDataModel platformDataModel : _pdm) {
      document.<PlatformDataModel>format(platformDataModel);
    }
  }

  protected void _format(final ConceptualDataModel conceptualDataModel, @Extension final IFormattableDocument document) {
    this.formatContainer(conceptualDataModel, document);
    EList<ConceptualElement> _element = conceptualDataModel.getElement();
    for (final ConceptualElement conceptualElement : _element) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<ConceptualElement>append(conceptualElement, _function);
        document.<ConceptualElement>format(conceptualElement);
      }
    }
    EList<ConceptualDataModel> _cdm = conceptualDataModel.getCdm();
    for (final ConceptualDataModel _conceptualDataModel : _cdm) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<ConceptualDataModel>append(_conceptualDataModel, _function);
        document.<ConceptualDataModel>format(_conceptualDataModel);
      }
    }
  }

  protected void _format(final LogicalDataModel logicalDataModel, @Extension final IFormattableDocument document) {
    this.formatContainer(logicalDataModel, document);
    EList<LogicalElement> _element = logicalDataModel.getElement();
    for (final LogicalElement logicalElement : _element) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<LogicalElement>append(logicalElement, _function);
        document.<LogicalElement>format(logicalElement);
      }
    }
    EList<LogicalDataModel> _ldm = logicalDataModel.getLdm();
    for (final LogicalDataModel _logicalDataModel : _ldm) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<LogicalDataModel>append(_logicalDataModel, _function);
        document.<LogicalDataModel>format(_logicalDataModel);
      }
    }
  }

  protected void _format(final PlatformDataModel platformDataModel, @Extension final IFormattableDocument document) {
    this.formatContainer(platformDataModel, document);
    EList<PlatformElement> _element = platformDataModel.getElement();
    for (final PlatformElement platformElement : _element) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<PlatformElement>append(platformElement, _function);
        document.<PlatformElement>format(platformElement);
      }
    }
    EList<PlatformDataModel> _pdm = platformDataModel.getPdm();
    for (final PlatformDataModel _platformDataModel : _pdm) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<PlatformDataModel>append(_platformDataModel, _function);
        document.<PlatformDataModel>format(_platformDataModel);
      }
    }
  }

  /**
   * Conceptual
   */
  protected void _format(final ConceptualElement obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConceptualElement>prepend(obj, _function);
    this.formatObj(obj, document);
    EList<EObject> _eContents = obj.eContents();
    for (final EObject contained : _eContents) {
      document.<EObject>format(contained);
    }
  }

  protected void _formatEntity(final ConceptualEntity obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<ConceptualComposition> _composition = obj.getComposition();
    for (final ConceptualComposition c : _composition) {
      {
        document.<ConceptualComposition>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<ConceptualComposition>append(c, _function);
      }
    }
  }

  protected void _format(final ConceptualEntity obj, @Extension final IFormattableDocument document) {
    this.formatEntity(obj, document);
  }

  protected void _format(final ConceptualAssociation obj, @Extension final IFormattableDocument document) {
    this.formatEntity(obj, document);
    EList<ConceptualParticipant> _participant = obj.getParticipant();
    for (final ConceptualParticipant c : _participant) {
      {
        document.<ConceptualParticipant>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<ConceptualParticipant>append(c, _function);
      }
    }
  }

  protected void _formatCharacteristic(final ConceptualCharacteristic obj, @Extension final IFormattableDocument document) {
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.CONCEPTUAL_CHARACTERISTIC__ROLENAME), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.CONCEPTUAL_CHARACTERISTIC__DESCRIPTION), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.CONCEPTUAL_CHARACTERISTIC__SPECIALIZES), document);
  }

  protected void _format(final ConceptualComposition obj, @Extension final IFormattableDocument document) {
    this.formatCharacteristic(obj, document);
  }

  protected void _format(final ConceptualParticipant obj, @Extension final IFormattableDocument document) {
    this.formatCharacteristic(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.CONCEPTUAL_PARTICIPANT__SOURCE_LOWER_BOUND), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.CONCEPTUAL_PARTICIPANT__SOURCE_UPPER_BOUND), document);
  }

  /**
   * Logical
   */
  protected void _format(final LogicalElement obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<LogicalElement>prepend(obj, _function);
    this.formatObj(obj, document);
    EList<EObject> _eContents = obj.eContents();
    for (final EObject contained : _eContents) {
      document.<EObject>format(contained);
    }
  }

  protected void _formatEntity(final LogicalEntity obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<LogicalComposition> _composition = obj.getComposition();
    for (final LogicalComposition c : _composition) {
      {
        document.<LogicalComposition>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<LogicalComposition>append(c, _function);
      }
    }
  }

  protected void _format(final LogicalEntity obj, @Extension final IFormattableDocument document) {
    this.formatEntity(obj, document);
  }

  protected void _formatCharacteristic(final LogicalCharacteristic obj, @Extension final IFormattableDocument document) {
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_CHARACTERISTIC__ROLENAME), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_CHARACTERISTIC__DESCRIPTION), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_CHARACTERISTIC__SPECIALIZES), document);
  }

  protected void _format(final LogicalComposition obj, @Extension final IFormattableDocument document) {
    this.formatCharacteristic(obj, document);
  }

  protected void _format(final LogicalParticipant obj, @Extension final IFormattableDocument document) {
    this.formatCharacteristic(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_PARTICIPANT__SOURCE_LOWER_BOUND), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_PARTICIPANT__SOURCE_UPPER_BOUND), document);
  }

  protected void _format(final LogicalAssociation obj, @Extension final IFormattableDocument document) {
    this.formatEntity(obj, document);
    EList<LogicalParticipant> _participant = obj.getParticipant();
    for (final LogicalParticipant c : _participant) {
      {
        document.<LogicalParticipant>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<LogicalParticipant>append(c, _function);
      }
    }
  }

  protected void _format(final LogicalCoordinateSystem lcs, @Extension final IFormattableDocument document) {
    this.formatObj(lcs, document);
    this.formatAttribute(this.textRegionExtensions.regionFor(lcs).keyword("axis:"), this.textRegionExtensions.regionFor(lcs).feature(UddlPackage.Literals.LOGICAL_COORDINATE_SYSTEM__AXIS_RELATIONSHIP_DESCRIPTION), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(lcs).keyword("angleEq:"), this.textRegionExtensions.regionFor(lcs).feature(UddlPackage.Literals.LOGICAL_COORDINATE_SYSTEM__ANGLE_EQUATION), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(lcs).keyword("distanceEq:"), this.textRegionExtensions.regionFor(lcs).feature(UddlPackage.Literals.LOGICAL_COORDINATE_SYSTEM__DISTANCE_EQUATION), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(lcs).keyword("["), this.textRegionExtensions.regionFor(lcs).keyword("]"), document);
    EList<LogicalCoordinateSystemAxis> _axis = lcs.getAxis();
    for (final EObject obj : _axis) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.<EObject>surround(obj, _function);
    }
  }

  protected void _format(final LogicalEnumerated obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_ENUMERATED__STANDARD_REFERENCE), document);
    EList<LogicalEnumeratedBase> _label = obj.getLabel();
    for (final EObject elem : _label) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.<EObject>surround(elem, _function);
    }
  }

  protected void _format(final LogicalMeasurementSystem obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<LogicalMeasurementSystemAxis> _measurementSystemAxis = obj.getMeasurementSystemAxis();
    for (final LogicalMeasurementSystemAxis elem : _measurementSystemAxis) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.<LogicalMeasurementSystemAxis>surround(elem, _function);
    }
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("coord:"), this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_MEASUREMENT_SYSTEM__COORDINATE_SYSTEM), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("extRefStd:"), this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_MEASUREMENT_SYSTEM__EXTERNAL_STANDARD_REFERENCE), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("orient:"), this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_MEASUREMENT_SYSTEM__ORIENTATION), document);
    EList<LogicalReferencePoint> _referencePoint = obj.getReferencePoint();
    for (final LogicalReferencePoint elem_1 : _referencePoint) {
      document.<LogicalReferencePoint>format(elem_1);
    }
    EList<LogicalMeasurementConstraint> _constraint = obj.getConstraint();
    for (final LogicalMeasurementConstraint elem_2 : _constraint) {
      document.<LogicalMeasurementConstraint>format(elem_2);
    }
  }

  protected void _format(final LogicalReferencePoint obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("landmark:"), this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_REFERENCE_POINT__LANDMARK), document);
    EList<LogicalReferencePointPart> _referencePointPart = obj.getReferencePointPart();
    for (final LogicalReferencePointPart elem : _referencePointPart) {
      {
        document.<LogicalReferencePointPart>format(elem);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<LogicalReferencePointPart>append(elem, _function);
      }
    }
  }

  protected void _format(final LogicalReferencePointPart obj, @Extension final IFormattableDocument document) {
    this.formatSubobj(obj, document);
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_REFERENCE_POINT_PART__AXIS), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_REFERENCE_POINT_PART__VALUE), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_REFERENCE_POINT_PART__VALUE_TYPE_UNIT), _function_2);
  }

  protected void _format(final LogicalValueTypeUnit obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_VALUE_TYPE_UNIT__VALUE_TYPE), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.LOGICAL_VALUE_TYPE_UNIT__UNIT), document);
  }

  /**
   * Platform
   */
  protected void _format(final PlatformElement obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<PlatformElement>prepend(obj, _function);
    this.formatObj(obj, document);
    EList<EObject> _eContents = obj.eContents();
    for (final EObject contained : _eContents) {
      document.<EObject>format(contained);
    }
  }

  protected void _formatEntity(final PlatformEntity obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<PlatformComposition> _composition = obj.getComposition();
    for (final PlatformComposition c : _composition) {
      {
        document.<PlatformComposition>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<PlatformComposition>append(c, _function);
      }
    }
  }

  protected void _format(final PlatformEntity obj, @Extension final IFormattableDocument document) {
    this.formatEntity(obj, document);
  }

  protected void _format(final PlatformDataType obj, @Extension final IFormattableDocument document) {
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.UDDL_ELEMENT__NAME), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.UDDL_ELEMENT__DESCRIPTION), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.PLATFORM_DATA_TYPE__REALIZES), document);
  }

  protected void _formatCharacteristic(final PlatformCharacteristic obj, @Extension final IFormattableDocument document) {
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.PLATFORM_CHARACTERISTIC__ROLENAME), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.PLATFORM_CHARACTERISTIC__DESCRIPTION), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.PLATFORM_CHARACTERISTIC__SPECIALIZES), document);
  }

  protected void _format(final PlatformComposition obj, @Extension final IFormattableDocument document) {
    this.formatCharacteristic(obj, document);
  }

  protected void _format(final PlatformParticipant obj, @Extension final IFormattableDocument document) {
    this.formatCharacteristic(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.PLATFORM_PARTICIPANT__SOURCE_LOWER_BOUND), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(UddlPackage.Literals.PLATFORM_PARTICIPANT__SOURCE_UPPER_BOUND), document);
  }

  protected void _format(final PlatformAssociation obj, @Extension final IFormattableDocument document) {
    this.formatEntity(obj, document);
    EList<PlatformParticipant> _participant = obj.getParticipant();
    for (final PlatformParticipant c : _participant) {
      {
        document.<PlatformParticipant>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<PlatformParticipant>append(c, _function);
      }
    }
  }

  public void format(final Object obj, final IFormattableDocument document) {
    if (obj instanceof ConceptualAssociation) {
      _format((ConceptualAssociation)obj, document);
      return;
    } else if (obj instanceof LogicalAssociation) {
      _format((LogicalAssociation)obj, document);
      return;
    } else if (obj instanceof LogicalEnumerated) {
      _format((LogicalEnumerated)obj, document);
      return;
    } else if (obj instanceof PlatformAssociation) {
      _format((PlatformAssociation)obj, document);
      return;
    } else if (obj instanceof ConceptualEntity) {
      _format((ConceptualEntity)obj, document);
      return;
    } else if (obj instanceof LogicalEntity) {
      _format((LogicalEntity)obj, document);
      return;
    } else if (obj instanceof LogicalMeasurementSystem) {
      _format((LogicalMeasurementSystem)obj, document);
      return;
    } else if (obj instanceof PlatformDataType) {
      _format((PlatformDataType)obj, document);
      return;
    } else if (obj instanceof PlatformEntity) {
      _format((PlatformEntity)obj, document);
      return;
    } else if (obj instanceof LogicalCoordinateSystem) {
      _format((LogicalCoordinateSystem)obj, document);
      return;
    } else if (obj instanceof LogicalValueTypeUnit) {
      _format((LogicalValueTypeUnit)obj, document);
      return;
    } else if (obj instanceof XtextResource) {
      _format((XtextResource)obj, document);
      return;
    } else if (obj instanceof ConceptualComposition) {
      _format((ConceptualComposition)obj, document);
      return;
    } else if (obj instanceof ConceptualDataModel) {
      _format((ConceptualDataModel)obj, document);
      return;
    } else if (obj instanceof ConceptualElement) {
      _format((ConceptualElement)obj, document);
      return;
    } else if (obj instanceof ConceptualParticipant) {
      _format((ConceptualParticipant)obj, document);
      return;
    } else if (obj instanceof DataModel) {
      _format((DataModel)obj, document);
      return;
    } else if (obj instanceof LogicalComposition) {
      _format((LogicalComposition)obj, document);
      return;
    } else if (obj instanceof LogicalDataModel) {
      _format((LogicalDataModel)obj, document);
      return;
    } else if (obj instanceof LogicalElement) {
      _format((LogicalElement)obj, document);
      return;
    } else if (obj instanceof LogicalParticipant) {
      _format((LogicalParticipant)obj, document);
      return;
    } else if (obj instanceof LogicalReferencePoint) {
      _format((LogicalReferencePoint)obj, document);
      return;
    } else if (obj instanceof PlatformComposition) {
      _format((PlatformComposition)obj, document);
      return;
    } else if (obj instanceof PlatformDataModel) {
      _format((PlatformDataModel)obj, document);
      return;
    } else if (obj instanceof PlatformElement) {
      _format((PlatformElement)obj, document);
      return;
    } else if (obj instanceof PlatformParticipant) {
      _format((PlatformParticipant)obj, document);
      return;
    } else if (obj instanceof LogicalReferencePointPart) {
      _format((LogicalReferencePointPart)obj, document);
      return;
    } else if (obj instanceof EObject) {
      _format((EObject)obj, document);
      return;
    } else if (obj == null) {
      _format((Void)null, document);
      return;
    } else if (obj != null) {
      _format(obj, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(obj, document).toString());
    }
  }

  public void formatEntity(final UddlElement obj, final IFormattableDocument document) {
    if (obj instanceof ConceptualEntity) {
      _formatEntity((ConceptualEntity)obj, document);
      return;
    } else if (obj instanceof LogicalEntity) {
      _formatEntity((LogicalEntity)obj, document);
      return;
    } else if (obj instanceof PlatformEntity) {
      _formatEntity((PlatformEntity)obj, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(obj, document).toString());
    }
  }

  public void formatCharacteristic(final EObject obj, final IFormattableDocument document) {
    if (obj instanceof ConceptualCharacteristic) {
      _formatCharacteristic((ConceptualCharacteristic)obj, document);
      return;
    } else if (obj instanceof LogicalCharacteristic) {
      _formatCharacteristic((LogicalCharacteristic)obj, document);
      return;
    } else if (obj instanceof PlatformCharacteristic) {
      _formatCharacteristic((PlatformCharacteristic)obj, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(obj, document).toString());
    }
  }
}
